22/07/22, 02:51 - Messages and calls are end-to-end encrypted. No one outside of this chat, not even WhatsApp, can read or listen to them. Tap to learn more.
22/07/22, 09:56 - Harecharan CSE E Amrita CBE: Someone in front take photo of all things in white board
22/07/22, 10:15 - Harecharan CSE E Amrita CBE: <Media omitted>
22/07/22, 10:17 - Harecharan CSE E Amrita CBE: <Media omitted>
22/07/22, 10:38 - Araviiii 🎓: Prabhu Sir Cse Research Scholar.vcf (file attached)
22/07/22, 19:54 - Shesadriii 🎓: https://drive.google.com/drive/mobile/folders/1LKM84TWpzwj3c7rhcBxMgwb9QQNJrksv?usp=sharing
22/07/22, 20:07 - Phoool Gobiiii  🎓: https://sites.google.com/view/chlab/2021-25-batch
22/07/22, 20:07 - Araviiii 🎓: https://instagram.com/stories/dhanushkraja/2887995491750503008?utm_source=ig_story_item_share&igshid=MDJmNzVkMjY=
22/07/22, 20:07 - Araviiii 🎓: Sanjay watch this 🔥🔥
22/07/22, 20:32 - Sanjuuu 🎓: <Media omitted>
22/07/22, 20:32 - Sanjuuu 🎓: my first tinker cad project
22/07/22, 20:49 - Harecharan CSE E Amrita CBE: <Media omitted>
23/07/22, 07:58 - Sanjuuu 🎓: Bois
23/07/22, 07:59 - Sanjuuu 🎓: Breakfast
23/07/22, 07:59 - Sanjuuu 🎓: ????
23/07/22, 08:00 - Shesadriii 🎓: Ss
23/07/22, 08:58 - Harecharan CSE E Amrita CBE: <Media omitted>
23/07/22, 10:26 - Sanjuuu 🎓: <Media omitted>
23/07/22, 11:35 - Harecharan CSE E Amrita CBE: <Media omitted>
23/07/22, 11:57 - Shesadriii 🎓: <Media omitted>
23/07/22, 11:58 - Shesadriii 🎓: <Media omitted>
23/07/22, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
23/07/22, 14:36 - Phoool Gobiiii  🎓: void setup() {
  // put your setup code here, to run once:
  pinMode(LED_BUILTIN,OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:
    digitalWrite(LED_BUILTIN,HIGH);
    delay(5000);
    digitalWrite(LED_BUILTIN,LOW);
    delay(1000);
}
23/07/22, 15:09 - Phoool Gobiiii  🎓: int value = 1;
void setup() {
  // put your setup code here, to run once:
  pinMode(LED_BUILTIN,OUTPUT);
  Serial.begin(9600);
  
}

void loop() {
  // put your main code here, to run repeatedly:
    value = digitalRead(12);
    if(value == LOW){
//    Serial.println(" Sensor detects");
    digitalWrite(LED_BUILTIN,LOW);
    Serial.println(" LED On");
    delay(100);
    }
    else{
    digitalWrite(LED_BUILTIN,HIGH);
    Serial.println(" LED Off");
    delay(100);
    }
}
23/07/22, 15:47 - Shesadriii 🎓: <Media omitted>
23/07/22, 15:49 - Phoool Gobiiii  🎓: void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
  pinMode(LED_BUILTIN, OUTPUT);
}

// the loop routine runs over and over again forever:
void loop() {
  // read the input on analog pin 0:
  int sensorValue = analogRead(A0);
  // print out the value you read:
  Serial.println(sensorValue);
  if (sensorValue > 500)
  {
    digitalWrite(LED_BUILTIN, HIGH);
  }
  else{
    digitalWrite(LED_BUILTIN, LOW);
  }
  delay(1);        // delay in between reads for stability
}
23/07/22, 15:51 - Phoool Gobiiii  🎓: Sir asked to send 👀
23/07/22, 15:55 - Viswaa Ramasubramanian: int value=1;
void setup()
{
  pinMode(13, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  value=digitalRead(12);
  if(value==0){
    Serial.println("Sensor Detects");
    digitalWrite(LED_BUILTIN,LOW);
    Serial.println("LED ON");
    delay(100);
  }
  else if(value==1){
    digitalWrite(LED_BUILTIN,HIGH);
    Serial.println("LED OFF");
    delay(100);
    
  }
}
//Serial.println("My LED is ON")
//Shorter the cable higher the board rate
24/07/22, 17:07 - Harecharan CSE E Amrita CBE: Boyßss les go eat
24/07/22, 18:43 - Sanjuuu 🎓: Guys wake me up before going to dinner
24/07/22, 19:06 - Araviiii 🎓: We are in bb court
25/07/22, 07:38 - Shesadriii 🎓: Bf ?
25/07/22, 07:38 - Shesadriii 🎓: Boiz
25/07/22, 07:38 - Araviiii 🎓: Yaaaaaaas
25/07/22, 07:46 - Shesadriii 🎓: Where u guys
26/07/22, 11:04 - Sooorrrr 🎓: <Media omitted>
26/07/22, 11:04 - Sooorrrr 🎓: // C++ code
//

void setup()
{
  pinMode(13, INPUT);
  pinMode(12, INPUT);
  pinMode(10, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  if(digitalRead(13)== HIGH && digitalRead(12)== HIGH)
  {
    Serial.println("TANK FULL");
    digitalWrite(10,LOW);
  }
  if(digitalRead(13) == HIGH && digitalRead(12)==LOW)
  {
    Serial.println("TANK FULL (NOT REGULAR CASE)");
    digitalWrite(10,LOW);
  }
  if(digitalRead(13)==LOW && digitalRead(12)==HIGH)
  {
    Serial.println("NO change in status of motor");
    if(digitalRead(10) == LOW)
    {
      digitalWrite(10,LOW);
    }
    else{
      digitalWrite(10,HIGH);
    }
  }
  if(digitalRead(13) == LOW && digitalRead(12)== LOW)
  {
    Serial.println("NO WATER! SWITCH ON MOTOR");
    digitalWrite(10,HIGH);
  }
}
26/07/22, 11:45 - Araviiii 🎓: bois need help
26/07/22, 12:04 - Sooorrrr 🎓: void setup()
{
  pinMode(13, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(7, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  char status=Serial.read();
  if(status=='F'){
  digitalWrite(13,HIGH);
  digitalWrite(12,LOW);
  digitalWrite(8,LOW);
  digitalWrite(7,LOW);
  Serial.println("Forward");
    delay(1000);}// Wait for 1000 millisecond(s)
  else if(status=='B'){
  digitalWrite(13,LOW);
  digitalWrite(12,HIGH);
  digitalWrite(8,LOW);
  digitalWrite(7,LOW);
    Serial.println("Backward");}
  else if(status=='L'){
  digitalWrite(13,LOW);
  digitalWrite(12,LOW);
  digitalWrite(8,HIGH);
  digitalWrite(7,LOW);
    Serial.println("Left");}
  else if(status=='R'){
  digitalWrite(13,LOW);
  digitalWrite(12,LOW);
  digitalWrite(8,LOW);
  digitalWrite(7,HIGH);
    Serial.println("Right");}
  else if(status=='S'){
  digitalWrite(13,LOW);
  digitalWrite(12,LOW);
  digitalWrite(8,LOW);
  digitalWrite(7,LOW);
    Serial.println("Stop");}
}
26/07/22, 13:03 - Harecharan CSE E Amrita CBE: We r at mess boys
26/07/22, 13:04 - Sanjuuu 🎓: Damn bro that's crazy
26/07/22, 13:04 - Harecharan CSE E Amrita CBE: U were not here so just sayong
26/07/22, 13:04 - Harecharan CSE E Amrita CBE: I cse anyone searching 4 me
26/07/22, 16:00 - Harecharan CSE E Amrita CBE: <Media omitted>
26/07/22, 16:00 - Harecharan CSE E Amrita CBE: <Media omitted>
26/07/22, 17:07 - Sanjuuu 🎓: Bread bajji
26/07/22, 17:07 - Harecharan CSE E Amrita CBE: Fhanks a lot
26/07/22, 17:09 - Sanjuuu 🎓: Can anyone come and get me one?
26/07/22, 17:09 - Sanjuuu 🎓: If not interested to eat
27/07/22, 06:55 - Shesadriii 🎓: Reached boiz
27/07/22, 07:51 - Gannu: Reached home safely
27/07/22, 07:55 - Araviiii 🎓: Reached home bois
27/07/22, 07:55 - Viswaa Ramasubramanian: Reached home 🏠
27/07/22, 07:57 - Sooorrrr 🎓: Reached home
27/07/22, 08:51 - Harecharan CSE E Amrita CBE: Ok
27/07/22, 11:33 - Shesadriii 🎓: <Media omitted>
28/07/22, 07:37 - Araviiii 🎓: <Media omitted>
28/07/22, 07:39 - Sanjuuu 🎓: Itll be fun
28/07/22, 07:41 - Araviiii 🎓: 2hrs written paper-ruka na enna ezhuthu-nu theriyala ippo only 15min than appo suthama theiyathu …….. empty paper than kuduthutu varanum nanu
28/07/22, 07:42 - Araviiii 🎓: eruku semma fun-aa than erukum
28/07/22, 07:43 - Sanjuuu 🎓: <Media omitted>
28/07/22, 07:43 - Araviiii 🎓: cheri da
28/07/22, 07:45 - Shesadriii 🎓: Tf....28th July ?
28/07/22, 07:45 - Araviiii 🎓: yep.....it is for tdy...…….tomorrow we will get the same like this
28/07/22, 07:46 - Shesadriii 🎓: Gad dammitch
28/07/22, 07:55 - Harecharan CSE E Amrita CBE: <Media omitted>
28/07/22, 07:56 - Harecharan CSE E Amrita CBE: Ummmmm..... where is E section here? 28 is for a b,c only did you guys see it
28/07/22, 07:56 - Shesadriii 🎓: Dei....29th E section
28/07/22, 07:56 - Harecharan CSE E Amrita CBE: Oof
28/07/22, 08:39 - Sanjuuu 🎓: Summer Internship for students in connection with the inaugural function of the Amrita Hospital, Faridabad, 
AUGUST 10-24,2022

Namah Shivaya All,

As you all are very much aware, on the 24th of August, Amrita Hospital, Faridabad, will be inaugurated by the Honourable Prime Minister, Shri Narendra Modi, in our Beloved Amma's holy presence. The inauguration will take place at 10:30 a.m. with a grand function.

Amma’s irresistible, divine attraction and Her flawless guidance have gifted us with an immense wealth of young students. However, as Amma constantly reminds us, “We need to put forth the maximum effort. Karma [action] is in the present, and the present alone is in our hands. If we use the present moment in an intelligent manner, we can easily befriend the future. 

Here, we have a great opportunity for our students to come together in the divine presence of our most beloved Amma, the unparalleled master, and do service in Her presence before the Hospital inauguration.

We need volunteers from NSS who are interested to offer their service at Amrita Hospital Faridabad for the final two weeks leading up to the inauguration on the 24th of August.  Their two weeks service at Faridabad will be regarded as a summer internship.

The interns will be provided with Accommodation, Food, and a Certificate of Appreciation. 

Interested students can give the names to NSS Programme officers.
28/07/22, 08:43 - Shesadriii 🎓: I will be on a vacation tho
28/07/22, 08:44 - Harecharan CSE E Amrita CBE: If u r not then r u willing to do 2 weeks of social service just for a certificate
28/07/22, 08:45 - Harecharan CSE E Amrita CBE: Not related to computer science also
28/07/22, 20:52 - Araviiii 🎓: G1: Write the procedure, wiring diagram and python code to interface DHT11 sensor to Raspberry PI.  (10 Marks) 15 minutes

G2: Write the procedure, wiring diagram and python code to interface any analogue sensor to Raspberry PI using MCP 3008.  (10 Marks) 15 minutes
28/07/22, 21:00 - Araviiii 🎓: <Media omitted>
28/07/22, 21:00 - Shesadriii 🎓: Ada dei aa
29/07/22, 07:07 - Shesadriii 🎓: Breakfast boiz
29/07/22, 07:30 - Araviiii 🎓: Yepppppppp
29/07/22, 09:10 - Viswaa Ramasubramanian: asechelab@gmail.com
29/07/22, 10:11 - Shesadriii 🎓: asechelab@gmail.com
29/07/22, 11:06 - Harecharan CSE E Amrita CBE: <Media omitted>
29/07/22, 11:07 - Harecharan CSE E Amrita CBE: <Media omitted>
29/07/22, 11:07 - Harecharan CSE E Amrita CBE: <Media omitted>
29/07/22, 11:07 - Harecharan CSE E Amrita CBE: <Media omitted>
29/07/22, 19:30 - Harecharan CSE E Amrita CBE: Dinner boysss
29/07/22, 23:36 - Sooorrrr 🎓: <Media omitted>
29/07/22, 23:36 - Sooorrrr 🎓: <Media omitted>
30/07/22, 10:51 - Harecharan CSE E Amrita CBE: Where yall guys at?
30/07/22, 11:04 - Araviiii 🎓: ground
30/07/22, 13:46 - Harecharan CSE E Amrita CBE: Does everybody have what they all need
30/07/22, 13:47 - Harecharan CSE E Amrita CBE: Like stick file or bonaire
30/07/22, 14:07 - Araviiii 🎓: Bonaire na?
30/07/22, 14:07 - Harecharan CSE E Amrita CBE: Bona fide
30/07/22, 14:09 - Araviiii 🎓: Bona fide na "good thought " thana
30/07/22, 14:09 - Araviiii 🎓: Is there any other meaning 🤔?
30/07/22, 14:09 - Harecharan CSE E Amrita CBE: Manga colour sheet
30/07/22, 14:09 - Araviiii 🎓: ???
30/07/22, 14:10 - Harecharan CSE E Amrita CBE: <Media omitted>
30/07/22, 14:10 - Araviiii 🎓: Oh got it
30/07/22, 14:11 - Harecharan CSE E Amrita CBE: Does anyone need to go to store means tell me
30/07/22, 14:46 - Sooorrrr 🎓: <Media omitted>
30/07/22, 14:47 - Sooorrrr 🎓: <Media omitted>
30/07/22, 15:43 - Sooorrrr 🎓: Happy friendship day
30/07/22, 15:43 - Sooorrrr 🎓: <Media omitted>
30/07/22, 16:20 - Viswaa Ramasubramanian: 🫂
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: Automation ☝️
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 17:58 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:21 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:24 - Sooorrrr 🎓: <Media omitted>
30/07/22, 18:51 - Gannu: <Media omitted>
30/07/22, 19:11 - Sanjuuu 🎓: Bois we came straight to mess
30/07/22, 19:11 - Sanjuuu 🎓: U guys come too
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:12 - Sooorrrr 🎓: <Media omitted>
30/07/22, 19:17 - Sooorrrr 🎓: <Media omitted>
30/07/22, 22:54 - Harecharan CSE E Amrita CBE: <Media omitted>
01/08/22, 07:55 - Harecharan CSE E Amrita CBE: Going to mess bois
01/08/22, 07:57 - Shesadriii 🎓: S coming
01/08/22, 07:57 - Araviiii 🎓: Let's goooo
01/08/22, 14:40 - Sooorrrr 🎓: <Media omitted>
01/08/22, 14:40 - Sooorrrr 🎓: <Media omitted>
01/08/22, 16:29 - Viswaa Ramasubramanian: <Media omitted>
01/08/22, 16:29 - Viswaa Ramasubramanian: <Media omitted>
01/08/22, 16:30 - Viswaa Ramasubramanian: <Media omitted>
01/08/22, 19:53 - Shesadriii 🎓: <Media omitted>
01/08/22, 19:53 - Shesadriii 🎓: This one to be filled in electronics side*
02/08/22, 07:33 - Harecharan CSE E Amrita CBE: Guys breakfast at 8?
02/08/22, 07:54 - Araviiii 🎓: Let's goooi
02/08/22, 08:35 - Viswaa Ramasubramanian: For 19EEE182 Electrical and Electronics Engineering Practice lab, which is going to happen for 2nd and 3rd August, 2022. 
On 2nd August Roll No. 1 to 36 (Batch 1)can come to Room no. B101 Electrical Machines lab for Electrical part and  Roll No. 37 to 70 (Batch 2) can go to A101 for Electronics part. 

On 3rd August, the two batches will be swapped.
On each day you have to complete the corresponding lab experiments completely. The students  should bring their Manuals, calculator, Pencil scale so that the experiments as well as calculation part can also be completed on the same day itself. 
There will be a Assessment of each of the lab  at the end of the session.
The studnets should be present at corresponding labs by 8.45 a.m with uniform and shoes.
02/08/22, 14:49 - Viswaa Ramasubramanian: <Media omitted>
02/08/22, 17:08 - Araviiii 🎓: Bois cutlet it seems
02/08/22, 17:08 - Araviiii 🎓: Let's goooo
03/08/22, 08:17 - Sanjuuu 🎓: Bois
03/08/22, 08:17 - Sanjuuu 🎓: I'm In mba canteen
03/08/22, 18:00 - Sooorrrr 🎓: <Media omitted>
03/08/22, 20:06 - Phoool Gobiiii  🎓: <Media omitted>
04/08/22, 13:44 - Phoool Gobiiii  🎓: What’s the raw material used?
What’s the temperature of the bed?
What’s the temperature when the substance gets melted?
04/08/22, 13:50 - Harecharan CSE E Amrita CBE: Extension of the file saved
Ans : .sql
04/08/22, 13:52 - Sooorrrr 🎓: stl
04/08/22, 19:53 - Viswaa Ramasubramanian: <Media omitted>
04/08/22, 19:54 - Viswaa Ramasubramanian: Station is missing you guyss seekaram kelambi vaangaa
04/08/22, 20:39 - Harecharan CSE E Amrita CBE: See my Instagram story
04/08/22, 20:45 - Viswaa Ramasubramanian: Adha avoid panitan
04/08/22, 23:03 - Viswaa Ramasubramanian: <Media omitted>
04/08/22, 23:04 - Harecharan CSE E Amrita CBE: Unnakelam current organisation kedu nu power ra cut pannitaanga 😀😀😀
04/08/22, 23:04 - Harecharan CSE E Amrita CBE: This message was deleted
04/08/22, 23:05 - Viswaa Ramasubramanian: Kedu nu solra un vaya konjam moodu
05/08/22, 07:44 - Viswaa Ramasubramanian: Reached Home Boisss
05/08/22, 08:17 - Harecharan CSE E Amrita CBE: Okay
05/08/22, 09:31 - Phoool Gobiiii  🎓: Reached home bois.. around 3 am 😁
05/08/22, 09:36 - Viswaa Ramasubramanian: Mass nae
05/08/22, 15:48 - Sooorrrr 🎓: This message was deleted
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:48 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:49 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:49 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:49 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:49 - Sooorrrr 🎓: <Media omitted>
05/08/22, 15:49 - Sooorrrr 🎓: <Media omitted>
05/08/22, 16:17 - Phoool Gobiiii  🎓: Happy journey ❤️
05/08/22, 16:32 - Araviiii 🎓: Surya nee amcha entha photo-laium nee illaya 🤣🤣🤣
05/08/22, 16:34 - Sooorrrr 🎓: Ya bro
05/08/22, 16:34 - Sooorrrr 🎓: Just wanted to take photos of shatabdi and kovai express
05/08/22, 16:34 - Sooorrrr 🎓: Thanks
05/08/22, 16:35 - Sooorrrr 🎓: Reached erode
05/08/22, 16:35 - Sooorrrr 🎓: Miss you guys
05/08/22, 17:22 - Sooorrrr 🎓: Arrived at Salem
05/08/22, 17:23 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:23 - Sooorrrr 🎓: Where are you bro aravind?
05/08/22, 17:23 - Sooorrrr 🎓: When are you coming to Chennai
05/08/22, 17:23 - Sooorrrr 🎓: ?
05/08/22, 17:25 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:25 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:27 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:27 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:27 - Viswaa Ramasubramanian: adhane ennada mask illama irukane nu doubt uh vandhuchu
05/08/22, 17:28 - Sooorrrr 🎓: 😅😅😂😂
05/08/22, 17:28 - Viswaa Ramasubramanian: mask irindha dhan adhu suri illana adhu namba mess puri
05/08/22, 17:28 - Sooorrrr 🎓: 😂😂😂
05/08/22, 17:29 - Viswaa Ramasubramanian: aama innaiki vinayakan ah morning breakfast ku elupi vithuya
05/08/22, 17:29 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:29 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:30 - Viswaa Ramasubramanian: mass nae nee
05/08/22, 17:30 - Viswaa Ramasubramanian: thopii thopiiiiii
05/08/22, 17:30 - Sooorrrr 🎓: 👍👍
05/08/22, 17:30 - Sooorrrr 🎓: Yep
05/08/22, 17:30 - Viswaa Ramasubramanian: Now u are looking like *TOP CLASS BHAAP*
05/08/22, 17:31 - Sooorrrr 🎓: BHAAP?
05/08/22, 17:31 - Sooorrrr 🎓: ??
05/08/22, 17:31 - Sooorrrr 🎓: What does that mean?
05/08/22, 17:31 - Viswaa Ramasubramanian: summa adichu viduvom bhaap na appa dhana
05/08/22, 17:32 - Sooorrrr 🎓: Ok
05/08/22, 17:32 - Viswaa Ramasubramanian: oh sry then BEST DAD CAP owner will get angry #sheshadri
05/08/22, 17:32 - Sooorrrr 🎓: You wrote in hindi aa
05/08/22, 17:32 - Sooorrrr 🎓: Haha
05/08/22, 17:32 - Viswaa Ramasubramanian: hinglish
05/08/22, 17:32 - Sooorrrr 🎓: 👍👍😀
05/08/22, 17:32 - Viswaa Ramasubramanian: Boring without u guyssssss
05/08/22, 17:32 - Sooorrrr 🎓: Yep
05/08/22, 17:32 - Viswaa Ramasubramanian: misssinggg soooo much
05/08/22, 17:32 - Viswaa Ramasubramanian: RAAAAAAAAAAAAAAAAAAAAAAAAMMEEEEEEEEEEEEEEEEEEEHHHHHHHHHHH
05/08/22, 17:33 - Viswaa Ramasubramanian: idhu sollanum pola iruku naeeeeeeeeee
05/08/22, 17:33 - Viswaa Ramasubramanian: cheriiiii daaaaaaaa
05/08/22, 17:33 - Viswaa Ramasubramanian: gundaaaaaa
05/08/22, 17:33 - Viswaa Ramasubramanian: sanju samson
05/08/22, 17:33 - Harecharan CSE E Amrita CBE: Romba mokka poduthu da veetla
05/08/22, 17:33 - Sooorrrr 🎓: Have you reached your home harecharan?
05/08/22, 17:33 - Viswaa Ramasubramanian: suriiiiiiii
05/08/22, 17:33 - Harecharan CSE E Amrita CBE: Yep
05/08/22, 17:33 - Harecharan CSE E Amrita CBE: At1pm
05/08/22, 17:33 - Viswaa Ramasubramanian: ama da
05/08/22, 17:33 - Sooorrrr 🎓: Ya boy
05/08/22, 17:34 - Viswaa Ramasubramanian: one day kuda agala but oru mari iruku boss
05/08/22, 17:39 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:53 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:53 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:53 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:53 - Sooorrrr 🎓: <Media omitted>
05/08/22, 17:55 - Araviiii 🎓: It's "aravindh"
05/08/22, 17:55 - Sooorrrr 🎓: Sorry
05/08/22, 17:56 - Sooorrrr 🎓: Aravindh
05/08/22, 17:56 - Sooorrrr 🎓: When are you coming back to chennai?
05/08/22, 17:56 - Araviiii 🎓: I am munnar
05/08/22, 17:56 - Sooorrrr 🎓: Nice enjoy
05/08/22, 17:57 - Araviiii 🎓: Dude to climate issues I am not sure
05/08/22, 17:57 - Sooorrrr 🎓: Ok
05/08/22, 17:57 - Sooorrrr 🎓: The climate isn't that bad
05/08/22, 17:57 - Sooorrrr 🎓: It's just some exaggeration from the news stations
05/08/22, 17:59 - Sooorrrr 🎓: It rained a little in coimbatore other than that not much
05/08/22, 17:59 - Sooorrrr 🎓: Anyways take care and enjoy
05/08/22, 17:59 - Araviiii 🎓: Sure
05/08/22, 18:00 - Araviiii 🎓: Here it is raining heavy
05/08/22, 18:00 - Araviiii 🎓: Full fog
05/08/22, 18:00 - Sooorrrr 🎓: Oh ok
05/08/22, 18:02 - Araviiii 🎓: @918939677049  knew it
05/08/22, 18:02 - Araviiii 🎓: He has traveled in that train
05/08/22, 18:02 - Araviiii 🎓: I think some double decker train
05/08/22, 18:02 - Gannu: Double decker
05/08/22, 18:02 - Sooorrrr 🎓: Yep
05/08/22, 18:02 - Araviiii 🎓: Damn bro
05/08/22, 18:03 - Sooorrrr 🎓: You want the answer
05/08/22, 18:03 - Sooorrrr 🎓: ??
05/08/22, 18:03 - Araviiii 🎓: Yep
05/08/22, 18:03 - Sooorrrr 🎓: It is uday express
05/08/22, 18:03 - Sooorrrr 🎓: Which goes from coimbatore to bangalore
05/08/22, 18:05 - Sooorrrr 🎓: What about shreyas
05/08/22, 18:05 - Sooorrrr 🎓: When did you reach home br
05/08/22, 18:05 - Sooorrrr 🎓: bro*
05/08/22, 18:05 - Sooorrrr 🎓: ?
05/08/22, 18:10 - Sooorrrr 🎓: <Media omitted>
05/08/22, 18:10 - Sooorrrr 🎓: This is where I'm exactly
05/08/22, 18:11 - Sooorrrr 🎓: https://stories.app.goo.gl/awcc
05/08/22, 18:13 - Sooorrrr 🎓: ISRO's ten greatest achievements☝️
05/08/22, 18:13 - Sooorrrr 🎓: https://stories.app.goo.gl/kxcQ
05/08/22, 19:33 - Viswaa Ramasubramanian: Nethiki en train varadhuku munnadi 6th platform ku vandichu return vandho banglore to cbe
05/08/22, 21:32 - Sooorrrr 🎓: Train has arrived at basin bridge
05/08/22, 21:51 - Viswaa Ramasubramanian: apdiye erangi veetuku odiru nae
05/08/22, 23:11 - Sooorrrr 🎓: Reached home finally!!!
05/08/22, 23:12 - Sooorrrr 🎓: It's over
05/08/22, 23:12 - Harecharan CSE E Amrita CBE: 👌 nice good night da
05/08/22, 23:31 - Sooorrrr 🎓: Good night💤💤😴😴
05/08/22, 23:31 - Sooorrrr 🎓: Sleep well
05/08/22, 23:31 - Sanjuuu 🎓: Good night
05/08/22, 23:31 - Sooorrrr 🎓: I will wake you guys up for breakfast tomorrow😂😂😅
05/08/22, 23:32 - Sanjuuu 🎓: No no no
05/08/22, 23:32 - Sanjuuu 🎓: I'll take care of that
05/08/22, 23:32 - Sanjuuu 🎓: But ukw u call at 7 am
05/08/22, 23:32 - Sanjuuu 🎓: I'll Pagani wake up beforev6 30
05/08/22, 23:32 - Sooorrrr 🎓: Well bro i said simply
05/08/22, 23:33 - Sanjuuu 🎓: 😶
05/08/22, 23:33 - Sooorrrr 🎓: Just for teasing you guys
05/08/22, 23:34 - Sooorrrr 🎓: Well also feels sad that can't eat breakfast with you guys for next 40 days
05/08/22, 23:34 - Sooorrrr 🎓: Anyways enjoy
05/08/22, 23:34 - Sooorrrr 🎓: Good night
05/08/22, 23:34 - Sooorrrr 🎓: Have a safe journey tomorrow
06/08/22, 06:18 - Viswaa Ramasubramanian: Yes naa 6:15 endrichitan
Kandipa andha nayi ippah thoongitu irukum
06/08/22, 06:19 - Viswaa Ramasubramanian: Enga naanga oru dosa saptu mudikara kulla nee motha breakfast saptu room ku poiruva
06/08/22, 08:34 - Harecharan CSE E Amrita CBE: I came to group to say good morning but here all are already wken up
06/08/22, 08:34 - Harecharan CSE E Amrita CBE: Poi thuungungadaa
06/08/22, 09:05 - Viswaa Ramasubramanian: Porupu Illa da parupa irukiye nae
06/08/22, 18:35 - Harecharan CSE E Amrita CBE: Anyone interested in participating mime
06/08/22, 18:35 - Harecharan CSE E Amrita CBE: Our any other event?
06/08/22, 19:42 - Araviiii 🎓: Wat are the other events?
06/08/22, 19:43 - Araviiii 🎓: Nvm
06/08/22, 21:25 - Gannu: <Media omitted>
06/08/22, 21:26 - Sooorrrr 🎓: Nice
06/08/22, 21:27 - Sooorrrr 🎓: Watching peaky blinders?
06/08/22, 21:27 - Sooorrrr 🎓: Enjoy👍👍
06/08/22, 21:27 - Gannu: Yeah
06/08/22, 21:29 - Sooorrrr 🎓: <Media omitted>
06/08/22, 21:30 - Sooorrrr 🎓: <Media omitted>
06/08/22, 21:31 - Gannu: Cool
06/08/22, 21:31 - Sooorrrr 🎓: Where is the train?
06/08/22, 21:31 - Sooorrrr 🎓: Crossed katpadi?
06/08/22, 21:32 - Gannu: Yeah jus now crossed arakkonam
06/08/22, 21:32 - Sooorrrr 🎓: Oh nice
06/08/22, 21:32 - Sooorrrr 🎓: So sanjay got down right
06/08/22, 21:33 - Gannu: Yep he reached home
06/08/22, 21:33 - Sooorrrr 🎓: That's great
06/08/22, 21:33 - Sooorrrr 🎓: Just put out a message after you reach too
06/08/22, 21:33 - Sooorrrr 🎓: Enjoy the rest of the journey and the holidays as well
06/08/22, 21:33 - Sooorrrr 🎓: Let's plan to meet some time
06/08/22, 21:34 - Gannu: Sure
06/08/22, 21:44 - Sanjuuu 🎓: Reached home bois
06/08/22, 21:49 - Harecharan CSE E Amrita CBE: I see goop
06/08/22, 22:26 - Sooorrrr 🎓: This message was deleted
06/08/22, 22:26 - Sooorrrr 🎓: Yep
06/08/22, 22:27 - Harecharan CSE E Amrita CBE: U collect ben 10 figurines?
06/08/22, 22:27 - Sooorrrr 🎓: <Media omitted>
06/08/22, 22:27 - Harecharan CSE E Amrita CBE: Humangasour
06/08/22, 22:27 - Sooorrrr 🎓: This message was deleted
06/08/22, 22:27 - Harecharan CSE E Amrita CBE: I'm a huge ben 10 fab da
06/08/22, 22:27 - Sooorrrr 🎓: That's right
06/08/22, 22:27 - Sooorrrr 🎓: Me too
06/08/22, 22:28 - Harecharan CSE E Amrita CBE: Damn.....how come we've never got to know about this?
06/08/22, 22:28 - Sooorrrr 🎓: What's happening in unofficial
06/08/22, 22:28 - Harecharan CSE E Amrita CBE: Group la lovers quarrel
06/08/22, 22:28 - Sooorrrr 🎓: 😂😂😅😅
06/08/22, 22:28 - Sooorrrr 🎓: 🤔🤔🤔
06/08/22, 22:29 - Harecharan CSE E Amrita CBE: Started from gokulastami and see where it have ended
06/08/22, 22:29 - Sooorrrr 🎓: Yeah
06/08/22, 23:28 - Gannu: Reached home 🏡 safely
06/08/22, 23:29 - Sooorrrr 🎓: 👍👍👍👍
07/08/22, 13:50 - Araviiii 🎓: Reached home bois
07/08/22, 14:42 - Harecharan CSE E Amrita CBE: Suthipaathiyaa covai ya
07/08/22, 14:42 - Sanjuuu 🎓: Kovai*
07/08/22, 14:42 - Harecharan CSE E Amrita CBE: Covai kovai all the same
07/08/22, 14:43 - Sanjuuu 🎓: This is better
07/08/22, 14:44 - Harecharan CSE E Amrita CBE: Coimbatore->covai that is the derivation
07/08/22, 14:45 - Sanjuuu 🎓: <Media omitted>
07/08/22, 14:46 - Harecharan CSE E Amrita CBE: <Media omitted>
07/08/22, 14:47 - Sanjuuu 🎓: <Media omitted>
07/08/22, 14:47 - Harecharan CSE E Amrita CBE: Yeah I still have this sticker
07/08/22, 15:07 - Viswaa Ramasubramanian: <Media omitted>
07/08/22, 15:14 - Harecharan CSE E Amrita CBE: Credit to shreyass
07/08/22, 15:14 - Sanjuuu 🎓: <Media omitted>
07/08/22, 15:15 - Sanjuuu 🎓: <Media omitted>
07/08/22, 15:40 - Araviiii 🎓: Ethu yaaru?
07/08/22, 15:43 - Sanjuuu 🎓: Shreyas
07/08/22, 15:44 - Sanjuuu 🎓: 😂
07/08/22, 16:54 - Araviiii 🎓: Shreyas-aa 😲 😮 😲
07/08/22, 16:54 - Araviiii 🎓: Un-bil-bil ya
08/08/22, 18:20 - Harecharan CSE E Amrita CBE: Does anyone have warden no.
08/08/22, 19:33 - Araviiii 🎓: Santosh Warden.vcf (file attached)
08/08/22, 22:14 - Sanjuuu 🎓: aug 17
08/08/22, 22:15 - Sanjuuu 🎓: Result date it seems
08/08/22, 22:15 - Sanjuuu 🎓: Buckle up guys
08/08/22, 22:16 - Araviiii 🎓: Dei
08/08/22, 22:16 - Araviiii 🎓: 😱 😨
08/08/22, 22:17 - Araviiii 🎓: Ganeshuu nee sirikathapa
08/08/22, 22:17 - Araviiii 🎓: Nee padichita
08/08/22, 22:17 - Araviiii 🎓: Na apadiya
08/08/22, 22:18 - Gannu: Yellaam nalladhe nadakum 😂
08/08/22, 22:18 - Araviiii 🎓: 🤣 Nala sollu vada
08/08/22, 22:18 - Araviiii 🎓: Unnaku Ena pa nee topper na apadiya
08/08/22, 22:34 - Araviiii 🎓: Nee nabunalum nambala nalum Ethan nejam @918939677049
08/08/22, 22:39 - Gannu: <Media omitted>
08/08/22, 22:42 - Araviiii 🎓: 🤣🤣🤣🤣🤣🤣
08/08/22, 23:27 - Harecharan CSE E Amrita CBE: <Media omitted>
08/08/22, 23:29 - Araviiii 🎓: Dei thambi intha dialogue ellam unnoda appa Amma kitta selupadi-gathu
09/08/22, 07:03 - Viswaa Ramasubramanian: Yaru sonna da
09/08/22, 07:04 - Viswaa Ramasubramanian: En nee idha unofficial la podala
09/08/22, 07:07 - Viswaa Ramasubramanian: Dei first sem la online exam ke avanunga romba naal edutanunga da
09/08/22, 07:07 - Viswaa Ramasubramanian: Also EEE ku innum manufacturing lab mudiyala
09/08/22, 07:07 - Viswaa Ramasubramanian: Ellarukum orey nalila dhana result poduvanga
09/08/22, 07:07 - Araviiii 🎓: And one more
09/08/22, 07:08 - Araviiii 🎓: When is the viva?
09/08/22, 07:09 - Viswaa Ramasubramanian: Adhuvum terila
09/08/22, 07:09 - Viswaa Ramasubramanian: Oru vela indha aug17 viva date ah
09/08/22, 07:59 - Araviiii 🎓: erukalam
09/08/22, 07:59 - Araviiii 🎓: https://www.youtube.com/watch?v=tNnPHz1u3RM
09/08/22, 07:59 - Araviiii 🎓: aug 18th ❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥❤️‍🔥🔥🔥🔥🔥🔥🔥🔥
09/08/22, 08:20 - Viswaa Ramasubramanian: Idhu hit agum naanum nenaikiran
09/08/22, 08:21 - Araviiii 🎓: Conform
09/08/22, 08:21 - Viswaa Ramasubramanian: Megham karukatha in loop ❤️
09/08/22, 10:01 - Harecharan CSE E Amrita CBE: Feedback forms close aanathuku qparam thaana result varum  so by that logic it is after aug 30 only na
09/08/22, 11:50 - Viswaa Ramasubramanian: Pothan paru head shotttt
🫡
09/08/22, 13:36 - Sooorrrr 🎓 started a call
09/08/22, 13:37 - Sooorrrr 🎓: By mistake started a call
09/08/22, 13:37 - Sooorrrr 🎓: Please don't mind it
09/08/22, 13:41 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/yzU_4nJcmXc?feature=share
09/08/22, 13:42 - Harecharan CSE E Amrita CBE: Vikram is actually part two of vikram 1986
09/08/22, 15:19 - Viswaa Ramasubramanian: Adhuve unaku ippah dhan teriyuma
09/08/22, 15:22 - Harecharan CSE E Amrita CBE: Yes
09/08/22, 15:22 - Harecharan CSE E Amrita CBE: After m y mom told me
10/08/22, 12:00 - Sanjuuu 🎓: Guys participating in quiz?
10/08/22, 12:00 - Sanjuuu 🎓: Anyone?
10/08/22, 12:17 - Araviiii 🎓: Not me
12/08/22, 21:31 - Sanjuuu 🎓: <Media omitted>
12/08/22, 22:02 - Shesadriii 🎓: https://youtu.be/R6e1_IlvmQs
13/08/22, 07:49 - Viswaa Ramasubramanian: bro enna idhu DBMS usual stuff nu patha adhu pathukinu ennanamo potirukanga
13/08/22, 07:50 - Viswaa Ramasubramanian: amrita value program la verum Ramayana nu sonnanga
13/08/22, 07:51 - Viswaa Ramasubramanian: Message from Amma’s Life for the Modern World
Amma’s messages can be put to action in our life through pragmatism and attuning of our thought process in a
positive and creative manner. Every single word Amma speaks and the guidance received in on matters which we
consider as trivial are rich in content and touches the very inner being of our personality. Life gets enriched by
Amma’s guidance and She teaches us the art of exemplary life skills where we become witness to all the happenings
around us still keeping the balance of the mind.
Lessons from the Ramayana
Introduction to Ramayana, the first Epic in the world – Influence of Ramayana on Indian values and culture –Storyline
of Ramayana – Study of leading characters in Ramayana – Influence of Ramayana outside India – Relevance of
Ramayana for modern times.
Lessons from the Mahabharata
Introduction to Mahabharata, the largest Epic in the world – Influence of Mahabharata on Indian values and culture –
Storyline of Mahabharata – Study of leading characters in Mahabharata – Kurukshetra War and its significance -
Relevance of Mahabharata for modern times.
Lessons from the Upanishads
Introduction to the Upanishads: Sruti versus Smrti - Overview of the four Vedas and the ten Principal Upanishads -
The central problems of the Upanishads – The Upanishads and Indian Culture – Relevance of Upanishads for modern
times – A few Upanishad Personalities: Nachiketas, Satyakama Jabala, Aruni, Shvetaketu.
Message of the Bhagavad Gita
Introduction to Bhagavad Gita – Brief storyline of Mahabharata - Context of Kurukshetra War – The anguish of Arjuna
– Counsel by Sri. Krishna – Key teachings of the Bhagavad Gita – Karma Yoga, Jnana Yoga and Bhakti Yoga -
Theory of Karma and Reincarnation – Concept of Dharma – Concept of Avatar - Relevance of Mahabharata for
modern times.
Life and Message of Swami Vivekananda
Brief Sketch of Swami Vivekananda’s Life – Meeting with Guru – Disciplining of Narendra - Travel across India -
Inspiring Life incidents – Address at the Parliament of Religions – Travel in United States and Europe – Return and
reception India – Message from Swamiji’s life.
Life and Teachings of Spiritual Masters India
Sri Rama, Sri Krishna, Sri Buddha, Adi Shankaracharya, Sri Ramakrishna Paramahamsa, Swami Vivekananda, Sri
Ramana Maharshi, Mata Amritanandamayi Devi.
Insights into Indian Arts and Literature
The aim of this course is to present the rich literature and culture of Ancient India and help students appreciate their
deep influence on Indian Life - Vedic culture, primary source of Indian Culture – Brief introduction and appreciation
of a few of the art forms of India - Arts, Music, Dance, Theatre.
Yoga and Meditation
The objective of the course is to provide practical training in YOGA ASANAS with a sound theoretical base and
theory classes on selected verses of Patanjali’s Yoga Sutra and Ashtanga Yoga. The coverage also includes the effect
of yoga on integrated personality development.
Kerala Mural Art and Painting
Mural painting is an offshoot of the devotional tradition of Kerala. A mural is any piece of artwork painted or applied
directly on a wall, ceiling or other large permanent surface. In the contemporary scenario Mural painting is not
restricted to the permanent structures and are being done even on canvas. Kerala mural paintings are the frescos
depicting mythology and legends, which are drawn on the walls of temples and churches in South India, principally
in Kerala. Ancient temples, churches and places in Kerala, South India, display an abounding tradition of mural
paintings mostly dating back between the 9th to 12th centuries when this form of art enjoyed Royal patronage.
Learning Mural painting through the theory and practice workshop is the objective of this course.
Course on Organic Farming and Sustainability
Organic farming is emerging as an important segment of human sustainability and healthy life. Haritamritam’ is an
attempt to empower the youth with basic skills in tradition of organic farming and to revive the culture of growing
vegetables that one consumes, without using chemicals and pesticides. Growth of Agriculture through such positive
initiatives will go a long way in nation development. In Amma’s words “it is a big step in restoring the lost harmony
of nature“.
Benefits of Indian Medicinal Systems
Indian medicinal systems are one of the most ancient in the world. Even today society continues to derive enormous
benefits from the wealth of knowledge in Ayurveda of which is recognised as a viable and sustainable medicinal
tradition. This course will expose students to the fundamental principles and philosophy of Ayurveda and other Indian
medicinal traditions.
Traditional Fine Arts of India
India is home to one of the most diverse Art forms world over. The underlying philosophy of Indian life is ‘Únity in
Diversity” and it has led to the most diverse expressions of culture in India. Most art forms of India are an expression
of devotion by the devotee towards the Lord and its influence in Indian life is very pervasive. This course will introduce
students to the deeper philosophical basis of Indian Art forms and attempt to provide a practical demonstration of the
continuing relevance of the Art.
Science of Worship in India
Indian mode of worship is unique among the world civilisations. Nowhere in the world has the philosophical idea of
reverence and worshipfulness for everything in this universe found universal acceptance as it in India. Indian religious
life even today is a practical demonstration of the potential for realisation of this profound truth. To see the allpervading consciousness in everything, including animate and inanimate, and constituting society to realise this truth
can be seen as the epitome of civilizational excellence. This course will discuss the principles and rationale behind
different modes of worship prevalent in India.
13/08/22, 07:51 - Viswaa Ramasubramanian: ivlo topics iruku
13/08/22, 12:16 - Araviiii 🎓: <Media omitted>
13/08/22, 12:16 - Araviiii 🎓: <Media omitted>
13/08/22, 12:16 - Araviiii 🎓: Please do a sticker with this 🤣🤣🤣
13/08/22, 14:37 - Phoool Gobiiii  🎓: 😐😐
14/08/22, 08:34 - Araviiii 🎓: Guys do we still need oracle and virtual box stuff ???
14/08/22, 08:34 - Araviiii 🎓: Ubuntu and all those stuff
14/08/22, 09:13 - Sanjuuu 🎓: We might need it
14/08/22, 10:21 - Araviiii 🎓: Cheri da
15/08/22, 08:50 - Sooorrrr 🎓: Happy independence day🇮🇳🇮🇳🇮🇳🇮🇳
15/08/22, 09:16 - Harecharan CSE E Amrita CBE: Happy independence day🇮🇳
15/08/22, 10:58 - Araviiii 🎓: Happy independence day my bois 🇮🇳🇮🇳🇮🇳🇮🇳🇮🇳
15/08/22, 23:33 - Sanjuuu 🎓: https://youtu.be/pbLM7Mecnqk
15/08/22, 23:33 - Sanjuuu 🎓: Remind you of someone?
15/08/22, 23:36 - Gannu: Ujjwal 😂
16/08/22, 06:54 - Araviiii 🎓: Dei
16/08/22, 06:54 - Araviiii 🎓: Conform ujjwal than da
16/08/22, 14:07 - Harecharan CSE E Amrita CBE: Guys do we have to write just code screenshot of output in report right
16/08/22, 15:30 - Araviiii 🎓: Sathiyama theriyathu
16/08/22, 15:31 - Sanjuuu 🎓: This message was deleted
16/08/22, 15:31 - Sanjuuu 🎓: Same*
18/08/22, 16:49 - Viswaa Ramasubramanian: <Media omitted>
18/08/22, 16:51 - Viswaa Ramasubramanian: <Media omitted>
18/08/22, 16:52 - Sooorrrr 🎓: So our classes start only on September 21st?
18/08/22, 16:52 - Araviiii 🎓: Dei it os for 1st year
18/08/22, 16:53 - Araviiii 🎓: Is*
18/08/22, 16:53 - Sooorrrr 🎓: Oh ok
18/08/22, 16:53 - Araviiii 🎓: We are 2nd year
18/08/22, 16:53 - Viswaa Ramasubramanian: You deleted this message
18/08/22, 16:54 - Viswaa Ramasubramanian: You deleted this message
18/08/22, 16:54 - Viswaa Ramasubramanian: oh sry
18/08/22, 16:54 - Viswaa Ramasubramanian: mybad
18/08/22, 16:55 - Viswaa Ramasubramanian: kannu seriya work aga mathikidhu
18/08/22, 16:56 - Viswaa Ramasubramanian: nalla vela namba grp la pothan unofficial la podala enna vachu senjiripanga 🫥
18/08/22, 19:31 - Sanjuuu 🎓: <Media omitted>
21/08/22, 08:36 - Araviiii 🎓: Hey
21/08/22, 08:36 - Araviiii 🎓: Guys
21/08/22, 08:36 - Araviiii 🎓: Btw
21/08/22, 08:37 - Araviiii 🎓: Where did my boost ball go 🤔?
21/08/22, 09:11 - Gannu: I have it...dw
21/08/22, 09:44 - Araviiii 🎓: Oh okie
23/08/22, 12:46 - Araviiii 🎓: hey
23/08/22, 12:46 - Araviiii 🎓: when are we guys leaving ?
23/08/22, 12:47 - Araviiii 🎓: i mean sept 11th or 12th ?
23/08/22, 13:35 - Viswaa Ramasubramanian: Better to reach hostel on 12th itself because one 13th too much of crowd will be there
24/08/22, 09:27 - Harecharan CSE E Amrita CBE: Like this only many will think da
24/08/22, 09:27 - Harecharan CSE E Amrita CBE: And telugu guys may come on 12th to be on safe side
24/08/22, 18:33 - Araviiii 🎓: Okie
24/08/22, 18:34 - Araviiii 🎓: Ganesh , viswaa and surya okie with Sept 12th
24/08/22, 18:34 - Araviiii 🎓: La?
24/08/22, 18:34 - Viswaa Ramasubramanian: Ya fine
24/08/22, 18:34 - Araviiii 🎓: K
25/08/22, 16:07 - Harecharan CSE E Amrita CBE: <Media omitted>
26/08/22, 15:21 - Sanjuuu 🎓: Hey
26/08/22, 15:21 - Sanjuuu 🎓: Anyone?
26/08/22, 15:21 - Sanjuuu 🎓: Fall guys
26/08/22, 15:21 - Sanjuuu 🎓: ???
26/08/22, 15:21 - Araviiii 🎓: Seeing some series bro
26/08/22, 15:21 - Araviiii 🎓: Dei
26/08/22, 15:21 - Araviiii 🎓: Sanjay
26/08/22, 15:21 - Araviiii 🎓: Nee eppo
26/08/22, 15:21 - Sanjuuu 🎓: ?
26/08/22, 15:21 - Araviiii 🎓: Kelambapora
26/08/22, 15:22 - Sanjuuu 🎓: U remember me?
26/08/22, 15:22 - Araviiii 🎓: Wat
26/08/22, 15:22 - Araviiii 🎓: ?
26/08/22, 15:22 - Gannu: After 5??
26/08/22, 15:22 - Sanjuuu 🎓: Okay
26/08/22, 15:22 - Sanjuuu 🎓: Let me know when u guys come
26/08/22, 15:22 - Araviiii 🎓: Unnaku enna achu
26/08/22, 15:22 - Gannu: Yep sure 👍
26/08/22, 15:23 - Sanjuuu 🎓: 12th
26/08/22, 15:23 - Sanjuuu 🎓: Sept
26/08/22, 15:23 - Araviiii 🎓: K
26/08/22, 19:23 - Sanjuuu 🎓: <Media omitted>
26/08/22, 19:26 - Gannu: Anaalum... They need lakhs of money from us 🥲
26/08/22, 19:31 - Harecharan CSE E Amrita CBE: That is how her net worth is 250 mil dollars
26/08/22, 19:31 - Harecharan CSE E Amrita CBE: Guys are anyone studying anything in this leave?
26/08/22, 19:31 - Sanjuuu 🎓: Oh yes
26/08/22, 19:31 - Gannu: Lol
26/08/22, 19:31 - Sanjuuu 🎓: Almost done with 3rd sem portions
26/08/22, 19:32 - Sanjuuu 🎓: 😒😒😒
26/08/22, 19:32 - Harecharan CSE E Amrita CBE: Serious aa va?
26/08/22, 19:33 - Harecharan CSE E Amrita CBE: Or sarcasm?
26/08/22, 19:33 - Harecharan CSE E Amrita CBE: I can never tell if it is in chat
26/08/22, 19:33 - Sanjuuu 🎓: <Media omitted>
27/08/22, 11:08 - Sooorrrr 🎓: <Media omitted>
27/08/22, 11:08 - Sooorrrr 🎓: <Media omitted>
27/08/22, 11:10 - Sooorrrr 🎓: <Media omitted>
27/08/22, 11:13 - Sooorrrr 🎓: <Media omitted>
27/08/22, 11:14 - Harecharan CSE E Amrita CBE: Which temple?
27/08/22, 11:15 - Sooorrrr 🎓: Utchi Pillayar temple
27/08/22, 11:15 - Sooorrrr 🎓: In trichy
27/08/22, 11:15 - Harecharan CSE E Amrita CBE: Ooh
27/08/22, 11:16 - Harecharan CSE E Amrita CBE: Staying for night aaa or 1 day trip aa
27/08/22, 11:16 - Viswaa Ramasubramanian: One day dhan
27/08/22, 11:16 - Viswaa Ramasubramanian: Evening 5 return
27/08/22, 11:16 - Harecharan CSE E Amrita CBE: Ok 👌
27/08/22, 12:31 - Sanjuuu 🎓: <Media omitted>
27/08/22, 12:31 - Sanjuuu 🎓: Check cms
27/08/22, 12:31 - Sanjuuu 🎓: In view students
27/08/22, 12:31 - Sanjuuu 🎓: Scroll down
27/08/22, 12:43 - Viswaa Ramasubramanian: <Media omitted>
27/08/22, 12:43 - Harecharan CSE E Amrita CBE: <Media omitted>
27/08/22, 12:44 - Harecharan CSE E Amrita CBE: Adjacent rooms just like we asked
27/08/22, 12:44 - Viswaa Ramasubramanian: 204 205 fun dhannn
27/08/22, 12:44 - Harecharan CSE E Amrita CBE: Woohoooò
27/08/22, 12:44 - Harecharan CSE E Amrita CBE: We will ask other boys to see if we are in same floor
27/08/22, 13:00 - Araviiii 🎓: Then we are first floor-aa?
27/08/22, 13:00 - Sanjuuu 🎓: Yea they are
27/08/22, 13:01 - Araviiii 🎓: Hmm
27/08/22, 13:01 - Araviiii 🎓: K then
27/08/22, 13:01 - Harecharan CSE E Amrita CBE: 204 na second floor thana
27/08/22, 13:01 - Araviiii 🎓: I think that's is room number
27/08/22, 13:01 - Araviiii 🎓: Beside that there is a Roman numerical
27/08/22, 13:02 - Araviiii 🎓: I think that represents floor
27/08/22, 13:02 - Harecharan CSE E Amrita CBE: 104 is 1 s t floor and 204 means 2nd floor?
27/08/22, 13:02 - Araviiii 🎓: Erukalam
27/08/22, 13:02 - Araviiii 🎓: Who knows
27/08/22, 13:02 - Araviiii 🎓: 🤷🏻‍♂️
27/08/22, 13:03 - Harecharan CSE E Amrita CBE: We'll see
27/08/22, 13:03 - Araviiii 🎓: k
27/08/22, 15:48 - Viswaa Ramasubramanian: Naanga pathapa A101 ground floor
27/08/22, 15:49 - Sanjuuu 🎓: I is block
27/08/22, 15:49 - Harecharan CSE E Amrita CBE: Namma thaana poi paathom I 4got then we are 1st floor
27/08/22, 15:49 - Sanjuuu 🎓: The alphabet is block
27/08/22, 15:49 - Viswaa Ramasubramanian: Yes
27/08/22, 15:49 - Sanjuuu 🎓: We are first floor .... I think
27/08/22, 15:50 - Viswaa Ramasubramanian: Yes
27/08/22, 15:57 - Araviiii 🎓: K
27/08/22, 15:58 - Sanjuuu 🎓: If the alphabet was floor....🤣 we'd be 8th floor
27/08/22, 15:59 - Harecharan CSE E Amrita CBE: For that we have to use doraemon s device 🤣🤣
27/08/22, 16:30 - Sanjuuu 🎓 changed the settings so only admins can edit the group settings
27/08/22, 21:29 - Harecharan CSE E Amrita CBE: I need family Friendly movies to watch now preferably in Amazon prime or Disney hotstar
27/08/22, 21:30 - Harecharan CSE E Amrita CBE: Your recommendations
27/08/22, 21:30 - Sanjuuu 🎓: The intern
27/08/22, 21:30 - Sanjuuu 🎓: Wholesome movie
27/08/22, 21:31 - Harecharan CSE E Amrita CBE: Anything else
27/08/22, 21:31 - Harecharan CSE E Amrita CBE: Not english movies
27/08/22, 21:31 - Sanjuuu 🎓: Hmm
28/08/22, 17:41 - Sanjuuu 🎓: Fall guys anyone?
28/08/22, 17:41 - Sanjuuu 🎓: New game mode
28/08/22, 17:42 - Sanjuuu 🎓: Its sun
28/08/22, 17:42 - Sanjuuu 🎓: Fun*
28/08/22, 23:43 - Sanjuuu 🎓: <Media omitted>
28/08/22, 23:44 - Sooorrrr 🎓: Awesome match
28/08/22, 23:45 - Sooorrrr 🎓: Hardik pandya
28/08/22, 23:45 - Sanjuuu 🎓: <Media omitted>
29/08/22, 21:20 - Harecharan CSE E Amrita CBE: Viva pdf da
30/08/22, 21:49 - Harecharan CSE E Amrita CBE: You guys joined the internship campaign aa
31/08/22, 10:06 - Sooorrrr 🎓: It's Vinayakans birthday today
31/08/22, 10:06 - Sooorrrr 🎓: Btw happy Ganesh chaturthi
31/08/22, 10:07 - Sooorrrr 🎓: I meant our class vinayakan
31/08/22, 10:46 - Araviiii 🎓: Happy ganesha chaturthi guys
31/08/22, 17:50 - Harecharan CSE E Amrita CBE: ...
31/08/22, 17:56 - Gannu: Yeah few of us
31/08/22, 19:00 - Harecharan CSE E Amrita CBE: Nice 👌
01/09/22, 16:05 - Sanjuuu 🎓: Guys
01/09/22, 16:05 - Sanjuuu 🎓: Who has the recording of the automation lab
01/09/22, 16:05 - Sanjuuu 🎓: The audio?
01/09/22, 16:06 - Araviiii 🎓: Ethu ethuku ippa
01/09/22, 16:06 - Sanjuuu 🎓: 😐
01/09/22, 16:06 - Araviiii 🎓: Viva vuka?
01/09/22, 16:06 - Sanjuuu 🎓: Yea
01/09/22, 16:06 - Araviiii 🎓: Dei
01/09/22, 16:06 - Gannu: Vera edhuku
01/09/22, 16:06 - Araviiii 🎓: Then atb
01/09/22, 16:06 - Araviiii 🎓: Poi padi
01/09/22, 16:07 - Phoool Gobiiii  🎓: I do
01/09/22, 16:07 - Araviiii 🎓: Seri ethukoanupu
01/09/22, 16:07 - Sanjuuu 🎓: Sss send it in grp
01/09/22, 16:07 - Araviiii 🎓: Na num padikireun
01/09/22, 16:07 - Araviiii 🎓: 😳😳
01/09/22, 16:07 - Sanjuuu 🎓: <Media omitted>
01/09/22, 16:07 - Gannu: .
01/09/22, 16:07 - Phoool Gobiiii  🎓: <Media omitted>
01/09/22, 16:07 - Araviiii 🎓: 😁👍🏻
01/09/22, 16:08 - Araviiii 🎓: 😅😅😅
03/09/22, 08:26 - Araviiii 🎓: hey guys should we submit any documents to 2nd year hostel 

or

the documents submitted in the 1st year hostel will be given to 2nd year hostel?
03/09/22, 09:05 - Harecharan CSE E Amrita CBE: IDK DA
03/09/22, 09:06 - Harecharan CSE E Amrita CBE: why? just have a xerox of everything for safety
03/09/22, 09:15 - Viswaa Ramasubramanian: Once ask EEE boiss
03/09/22, 10:19 - Sanjuuu 🎓: Was it mentioned anywhere?
03/09/22, 10:19 - Sanjuuu 🎓: If not...thevaillama tension aagathe
03/09/22, 10:40 - Araviiii 🎓: Okie guys
03/09/22, 10:40 - Araviiii 🎓: Just asking
04/09/22, 23:08 - Sooorrrr 🎓: The match is terrific
06/09/22, 23:50 - Sooorrrr 🎓: <Media omitted>
06/09/22, 23:50 - Sooorrrr 🎓: Miss you MSD😭😭😭😭
07/09/22, 08:23 - Araviiii 🎓: Need help
07/09/22, 08:24 - Araviiii 🎓: Can
07/09/22, 08:24 - Araviiii 🎓: Someone
07/09/22, 08:24 - Araviiii 🎓: Send me the 2nd sem
07/09/22, 08:24 - Araviiii 🎓: Cul edu book
07/09/22, 08:40 - Viswaa Ramasubramanian: <Media omitted>
07/09/22, 09:39 - Araviiii 🎓: Thnks
07/09/22, 10:18 - Harecharan CSE E Amrita CBE: Yenda dhideernu?
07/09/22, 10:30 - Araviiii 🎓: Na athula fail aita athunala kettan
10/09/22, 09:51 - Harecharan CSE E Amrita CBE: If any of you guys have b type charger at home can u bring it to hostel?
15/09/22, 08:08 - Araviiii 🎓: https://www.instagram.com/reel/Ch4n53Pr52V/?igshid=YmMyMTA2M2Y=
15/09/22, 19:05 - Phoool Gobiiii  🎓: <Media omitted>
16/09/22, 16:11 - Viswaa Ramasubramanian: Hello guys, greeting from your 4th year seniors. This form in just to know how many people are interested in participating in the various cultural events for Gokulashtami  Celebrations which will be on the 2nd week of October. The pandemic has cut down all  the fun fulling factors of our clg life. But its not too late now. Be a part of the grand celebrations. Be sportive and take part in the competitions. College is not just about marks and grades but also about bonding, celebrations and team spirit. Hoping to see a lot of you participating!!!


https://forms.gle/WcPGH4UYcpTSNmBc8
16/09/22, 19:22 - Viswaa Ramasubramanian: <Media omitted>
16/09/22, 19:22 - Viswaa Ramasubramanian: <Media omitted>
16/09/22, 19:22 - Viswaa Ramasubramanian: <Media omitted>
16/09/22, 19:23 - Sanjuuu 🎓: Where?
16/09/22, 19:23 - Sooorrrr 🎓: Onam
16/09/22, 19:23 - Sooorrrr 🎓: Celebrating
16/09/22, 19:23 - Sooorrrr 🎓: Celebration*
16/09/22, 19:23 - Sanjuuu 🎓: Isn't it on Tuesday?
16/09/22, 19:23 - Viswaa Ramasubramanian: MBA
16/09/22, 19:23 - Sooorrrr 🎓: For MBA
16/09/22, 19:23 - Viswaa Ramasubramanian: Fest dha
16/09/22, 19:24 - Viswaa Ramasubramanian: It's MBA Fest
16/09/22, 19:24 - Viswaa Ramasubramanian: Not onam
16/09/22, 19:24 - Sanjuuu 🎓: Oh kk
16/09/22, 19:27 - Phoool Gobiiii  🎓: <Media omitted>
17/09/22, 16:02 - Sooorrrr 🎓: <Media omitted>
17/09/22, 16:02 - Sooorrrr 🎓: <Media omitted>
17/09/22, 16:03 - Sooorrrr 🎓: <Media omitted>
17/09/22, 19:24 - Phoool Gobiiii  🎓: <Media omitted>
17/09/22, 19:24 - Phoool Gobiiii  🎓: <Media omitted>
17/09/22, 19:50 - Shesadriii 🎓: <Media omitted>
18/09/22, 20:19 - Sanjuuu 🎓: <Media omitted>
18/09/22, 20:30 - Sooorrrr 🎓: Oh nice
18/09/22, 20:30 - Sooorrrr 🎓: So can we book tickets for 6th rather than 5th
18/09/22, 20:32 - Sanjuuu 🎓: No
18/09/22, 20:32 - Sanjuuu 🎓: Not confirm
18/09/22, 20:32 - Sanjuuu 🎓: Yet
18/09/22, 20:32 - Sooorrrr 🎓: Ok
18/09/22, 20:32 - Sanjuuu 🎓: Probably for the best if we wait
18/09/22, 20:32 - Sooorrrr 🎓: 👍
18/09/22, 23:13 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/bDVNgaUnWbg?feature=share
19/09/22, 14:35 - Phoool Gobiiii  🎓: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:12 - Gannu: <Media omitted>
19/09/22, 22:20 - Sooorrrr 🎓: <Media omitted>
20/09/22, 21:31 - Sooorrrr 🎓: <Media omitted>
20/09/22, 21:31 - Sooorrrr 🎓: Aateesh
20/09/22, 22:08 - Sooorrrr 🎓: <Media omitted>
20/09/22, 22:10 - Sanjuuu 🎓: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 22:19 - Gannu: <Media omitted>
20/09/22, 23:02 - Harecharan CSE E Amrita CBE: <Media omitted>
21/09/22, 07:30 - Araviiii 🎓: <Media omitted>
21/09/22, 07:30 - Araviiii 🎓: <Media omitted>
21/09/22, 07:30 - Araviiii 🎓: <Media omitted>
21/09/22, 19:05 - Gannu: @919840365293
22/09/22, 20:01 - Shesadriii 🎓: <Media omitted>
22/09/22, 20:01 - Harecharan CSE E Amrita CBE: Nice
22/09/22, 20:03 - Sanjuuu 🎓: <Media omitted>
22/09/22, 20:04 - Viswaa Ramasubramanian: Missing @916383425519
22/09/22, 20:04 - Harecharan CSE E Amrita CBE: I'll come da
22/09/22, 20:04 - Viswaa Ramasubramanian: Lots of love ❤❤
22/09/22, 20:04 - Harecharan CSE E Amrita CBE: That's what I said bit u told no
22/09/22, 20:04 - Viswaa Ramasubramanian: Sudden plan da
22/09/22, 20:05 - Harecharan CSE E Amrita CBE: Well, even if I come now we won't stand for another group photo
22/09/22, 20:05 - Viswaa Ramasubramanian: 🥲
22/09/22, 20:06 - Harecharan CSE E Amrita CBE: I searched for you and came room
22/09/22, 20:06 - Viswaa Ramasubramanian: Sryyy da 🫥🫶🏻
22/09/22, 20:06 - Viswaa Ramasubramanian: Ice tea venuma
22/09/22, 20:07 - Harecharan CSE E Amrita CBE: At least you feel sorry
22/09/22, 20:10 - Viswaa Ramasubramanian: <Media omitted>
22/09/22, 20:11 - Viswaa Ramasubramanian: Complete
22/09/22, 20:11 - Viswaa Ramasubramanian: <Media omitted>
22/09/22, 20:12 - Viswaa Ramasubramanian: It's harecharan wedding tmrw all are requested to attend it
22/09/22, 20:12 - Viswaa Ramasubramanian: Moi panam rs 69 is minimum
22/09/22, 20:13 - Viswaa Ramasubramanian: You deleted this message
22/09/22, 22:43 - Sooorrrr 🎓: #include <stdio.h>
int main(void) {
	int T,i;
	scanf("%d",&T);
	for(i=0;i<T;i++){
	    int A,B;
	    scanf("%d%d",&A,&B);
	    if(A%2!=0 && B%2!=0){
	        printf("%s\n","No");
	    }
	    else if(A==1||B==1){
	        printf("%s\n","No");
	    }
	    else{
	        printf("%s\n","Yes");
	    }
	}
	return 0;
}
23/09/22, 12:55 - Phoool Gobiiii  🎓: <Media omitted>
23/09/22, 12:56 - Sooorrrr 🎓: <Media omitted>
23/09/22, 13:56 - Viswaa Ramasubramanian: <Media omitted>
23/09/22, 14:04 - Viswaa Ramasubramanian: <Media omitted>
23/09/22, 17:48 - Sooorrrr 🎓: <Media omitted>
23/09/22, 19:18 - Harecharan CSE E Amrita CBE: Where ýall guys at?
23/09/22, 19:22 - Phoool Gobiiii  🎓: We’re still near AB1
23/09/22, 19:23 - Harecharan CSE E Amrita CBE: Ok
23/09/22, 19:23 - Sanjuuu 🎓: Same bro
23/09/22, 19:23 - Harecharan CSE E Amrita CBE: Phone no charge so oi came room
23/09/22, 19:23 - Phoool Gobiiii  🎓: Ohh okay
23/09/22, 19:23 - Harecharan CSE E Amrita CBE: Any thing fun call me immediately
23/09/22, 19:25 - Sanjuuu 🎓: There is dance going on here
23/09/22, 19:25 - Sanjuuu 🎓: Missing out on everything bro
23/09/22, 19:25 - Harecharan CSE E Amrita CBE: I'll come now
23/09/22, 19:26 - Sanjuuu 🎓: Jk
23/09/22, 19:26 - Sanjuuu 🎓: Nothing is going on here
23/09/22, 19:27 - Harecharan CSE E Amrita CBE: I came down floor da 😆
23/09/22, 19:27 - Harecharan CSE E Amrita CBE: Its ok then ill take rest
24/09/22, 11:21 - Sanjuuu 🎓: for t in range(int(input())):
    a,x=map(int,input().split())
    s=input()
    l=[x]
    for i in s:
        if(i=='R'):
            x+=1
            l.append(x)
        else:
            x-=1
            l.append(x)
    l = list(dict.fromkeys(l))
    print(len(l))
24/09/22, 16:56 - Shesadriii 🎓: Aaaaahhhhh
24/09/22, 16:59 - Shesadriii 🎓: <Media omitted>
24/09/22, 19:19 - Shesadriii 🎓: <Media omitted>
24/09/22, 19:19 - Shesadriii 🎓: <Media omitted>
24/09/22, 20:45 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/i-8FD50D4J0?feature=share
24/09/22, 20:57 - Harecharan CSE E Amrita CBE: https://youtu.be/7Ydwz7jqVRY
24/09/22, 21:12 - Harecharan CSE E Amrita CBE: <Media omitted>
24/09/22, 22:43 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
24/09/22, 22:44 - Viswaa Ramasubramanian: <Media omitted>
25/09/22, 12:33 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/mux3IGIpQ-U?feature=share
25/09/22, 13:40 - Harecharan CSE E Amrita CBE: https://youtu.be/ldZ0C8wfQXo
25/09/22, 21:51 - Harecharan CSE E Amrita CBE: <Media omitted>
25/09/22, 22:41 - Sooorrrr 🎓: <Media omitted>
25/09/22, 23:19 - Shesadriii 🎓: <Media omitted>
25/09/22, 23:29 - Viswaa Ramasubramanian: be careful whenever u visit toilet because SHREYAS IS WATCHING UUUUU
25/09/22, 23:30 - Viswaa Ramasubramanian: 👀👀👀👀👀👀👁‍🗨👁‍🗨👁‍🗨👁‍🗨👁👁👁👁
25/09/22, 23:30 - Harecharan CSE E Amrita CBE: Use surf shark vpn
26/09/22, 16:41 - Shesadriii 🎓: <Media omitted>
26/09/22, 16:57 - Gannu: <Media omitted>
26/09/22, 16:58 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 17:37 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 19:30 - Sanjuuu 🎓: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
26/09/22, 20:23 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 12:39 - Shesadriii 🎓: <Media omitted>
27/09/22, 15:59 - Sanjuuu 🎓: <Media omitted>
27/09/22, 15:59 - Sanjuuu 🎓: <Media omitted>
27/09/22, 16:00 - Sanjuuu 🎓: <Media omitted>
27/09/22, 16:00 - Sanjuuu 🎓: <Media omitted>
27/09/22, 17:38 - Harecharan CSE E Amrita CBE started a call
27/09/22, 18:45 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:46 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 18:47 - Phoool Gobiiii  🎓: https://drive.google.com/drive/folders/17mLW15kBuF2UJITEtC03uRQkL5-jL5tB
27/09/22, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
27/09/22, 19:14 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 20:06 - Sanjuuu 🎓: <Media omitted>
27/09/22, 20:34 - Viswaa Ramasubramanian: <Media omitted>
27/09/22, 21:26 - Sooorrrr 🎓: <Media omitted>
27/09/22, 21:26 - Sooorrrr 🎓: <Media omitted>
27/09/22, 21:26 - Sooorrrr 🎓: <Media omitted>
27/09/22, 21:26 - Sooorrrr 🎓: <Media omitted>
27/09/22, 21:26 - Sooorrrr 🎓: <Media omitted>
27/09/22, 23:54 - Harecharan CSE E Amrita CBE: <Media omitted>
28/09/22, 00:38 - Shesadriii 🎓: <Media omitted>
28/09/22, 00:38 - Shesadriii 🎓: <Media omitted>
28/09/22, 00:38 - Shesadriii 🎓: <Media omitted>
28/09/22, 00:38 - Shesadriii 🎓: <Media omitted>
28/09/22, 00:38 - Shesadriii 🎓: <Media omitted>
28/09/22, 08:06 - Sooorrrr 🎓: <Media omitted>
28/09/22, 08:07 - Sooorrrr 🎓: Draw this table
28/09/22, 09:49 - Sooorrrr 🎓: <Media omitted>
28/09/22, 09:49 - Sooorrrr 🎓: <Media omitted>
28/09/22, 09:51 - Sooorrrr 🎓: <Media omitted>
28/09/22, 10:14 - Viswaa Ramasubramanian: https://youtu.be/W6yhLxDAwZ0
28/09/22, 19:40 - Araviiii 🎓: https://bit.ly/3BQo14w
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 20:44 - Shesadriii 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 21:04 - Sooorrrr 🎓: <Media omitted>
28/09/22, 22:47 - Shesadriii 🎓: <Media omitted>
28/09/22, 23:00 - Harecharan CSE E Amrita CBE: <Media omitted>
28/09/22, 23:01 - Harecharan CSE E Amrita CBE: <Media omitted>
28/09/22, 23:02 - Harecharan CSE E Amrita CBE: <Media omitted>
28/09/22, 23:06 - Harecharan CSE E Amrita CBE: This message was deleted
28/09/22, 23:06 - Viswaa Ramasubramanian: <Media omitted>
28/09/22, 23:07 - Sooorrrr 🎓: 😂😂
28/09/22, 23:08 - Harecharan CSE E Amrita CBE: <Media omitted>
28/09/22, 23:08 - Harecharan CSE E Amrita CBE: <Media omitted>
29/09/22, 08:55 - Viswaa Ramasubramanian: <Media omitted>
29/09/22, 08:55 - Viswaa Ramasubramanian: <Media omitted>
29/09/22, 08:56 - Viswaa Ramasubramanian: Rules edhuvum irundha adhu engaliku illa 
Apdi edhuvum sonna adhu meera padhum 🔥🔥🔥
29/09/22, 12:32 - Viswaa Ramasubramanian: Rice
Chappati
No kurma
Some koothu
Moong dal
No onion No carrot only Tomato
Sambar
Rasam
No juice
No sweet
29/09/22, 12:33 - Viswaa Ramasubramanian: Orientation food mariye illa but morning naanum ganeshum kitchen side porapa semma smell
Ig only yb mess la andha food
29/09/22, 22:03 - Sooorrrr 🎓: a. valid
b. valid
c. valid
d. valid
e. valid
f. valid
g. valid
h. idk
I. valid
29/09/22, 22:03 - Sooorrrr 🎓: a. idk
b. idk
c. idk
d. idk
e. idk
f. idk
g. idk
h. idk
I. idk
29/09/22, 22:08 - Sanjuuu 🎓: <Media omitted>
29/09/22, 22:38 - Sooorrrr 🎓: <Media omitted>
30/09/22, 12:52 - Sooorrrr 🎓: <Media omitted>
30/09/22, 13:03 - Gannu: <Media omitted>
30/09/22, 13:05 - Araviiii 🎓: Gud work bois
30/09/22, 15:29 - Sooorrrr 🎓: #include <iostream>
#include <cmath>
using namespace std;
int main(){
    int x1,y1,x2,y2;
    cin>>x1;
    cin>>y1;
    cin>>x2;
    cin>>y2;
    float Result;
    Result=sqrt(pow((x2-x1),2) + pow((y2-y1),2));
    cout<<Result;

}
30/09/22, 18:33 - Shesadriii 🎓: Reached home boiz
30/09/22, 18:33 - Shesadriii 🎓: Bruh hare
30/09/22, 18:33 - Harecharan CSE E Amrita CBE: I could ve completed it u know
30/09/22, 18:34 - Harecharan CSE E Amrita CBE: I almost reached
30/09/22, 18:34 - Sooorrrr 🎓: 👍
30/09/22, 18:34 - Shesadriii 🎓: Damn bro that's crazy
30/09/22, 18:35 - Shesadriii 🎓: null
30/09/22, 18:46 - Phoool Gobiiii  🎓: 🥲
30/09/22, 19:59 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/qJ_R02J-k4E?feature=share
30/09/22, 22:31 - Sanjuuu 🎓: <Media omitted>
01/10/22, 04:26 - Sanjuuu 🎓: Reached home bois
01/10/22, 04:51 - Phoool Gobiiii  🎓: Reached home boisss 🏡
01/10/22, 04:51 - Phoool Gobiiii  🎓: Bruhhh this is like those movie ending scenes 😂
01/10/22, 07:47 - Viswaa Ramasubramanian: Reached home booooooiiiiissssd
01/10/22, 08:10 - Sooorrrr 🎓: Reached home🏠
01/10/22, 08:48 - Araviiii 🎓: Reached home boiss
01/10/22, 08:49 - Gannu: Reached home boiz
01/10/22, 10:11 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=hdHjjBS4cs8
01/10/22, 12:54 - Araviiii 🎓: Dei hare unofficial grp la
01/10/22, 12:54 - Araviiii 🎓: Same date mention paniruka
01/10/22, 12:55 - Araviiii 🎓: Poi change paniduda
01/10/22, 13:21 - Harecharan CSE E Amrita CBE: ook ok ok
02/10/22, 08:58 - Shesadriii 🎓: <Media omitted>
04/10/22, 15:28 - Sanjuuu 🎓: <Media omitted>
04/10/22, 15:28 - Sanjuuu 🎓: Guys who finished this?
04/10/22, 15:28 - Sanjuuu 🎓: Tomorrow 11:45 pm submission
04/10/22, 15:29 - Harecharan CSE E Amrita CBE: Sheet, I forgot we had this
04/10/22, 15:29 - Harecharan CSE E Amrita CBE: I'm in native
04/10/22, 15:29 - Sanjuuu 🎓: I didn't know we had this
04/10/22, 15:29 - Sanjuuu 🎓: 😶
04/10/22, 15:29 - Harecharan CSE E Amrita CBE: Anyone finished pls send
04/10/22, 15:30 - Sanjuuu 🎓: <Media omitted>
04/10/22, 15:59 - Shesadriii 🎓: This message was deleted
05/10/22, 14:40 - Phoool Gobiiii  🎓: Bois anyone completed the ece ha?
05/10/22, 14:40 - Harecharan CSE E Amrita CBE: Haaahaaaaan no
05/10/22, 14:40 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 14:41 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 14:42 - Sanjuuu 🎓: <Media omitted>
05/10/22, 14:55 - Shesadriii 🎓: This message was deleted
05/10/22, 14:56 - Shesadriii 🎓: Lol the disappearing messages in WhatsApp are cool
05/10/22, 15:03 - Viswaa Ramasubramanian: Mudistala answer anupu da
05/10/22, 15:44 - Phoool Gobiiii  🎓: Bois
05/10/22, 15:44 - Phoool Gobiiii  🎓: I've solved 1, 3, 4, 5 qns.. anyone needs?
05/10/22, 15:46 - Araviiii 🎓: I need 1 and 6th
05/10/22, 15:46 - Araviiii 🎓: 1st*
05/10/22, 15:46 - Araviiii 🎓: 🙋🏻‍♂️1st
05/10/22, 15:47 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 15:47 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 15:47 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 15:47 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 15:47 - Araviiii 🎓: Ennada ippa ezhuthi vaichiruka
05/10/22, 15:48 - Araviiii 🎓: 😲 😮 😲 😮 😲
05/10/22, 15:48 - Araviiii 🎓: <Media omitted>
05/10/22, 15:49 - Araviiii 🎓: <Media omitted>
05/10/22, 15:49 - Araviiii 🎓: <Media omitted>
05/10/22, 15:50 - Araviiii 🎓: Unthu crct panitu enthu crct pana ennku 0 mark kudupanga
05/10/22, 15:51 - Phoool Gobiiii  🎓: 3rd qn innum konjam identities irukku.. adha add panniko
05/10/22, 15:51 - Araviiii 🎓: Dei eruka da
05/10/22, 15:51 - Araviiii 🎓: Nala ellama thapu paniruka
05/10/22, 15:51 - Araviiii 🎓: 🤣🤣🤣
05/10/22, 15:52 - Phoool Gobiiii  🎓: 🙃🙃
05/10/22, 15:52 - Araviiii 🎓: I think I need to start from scratch
05/10/22, 16:50 - Harecharan CSE E Amrita CBE: 2nd one is this one da
05/10/22, 16:51 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 17:04 - Harecharan CSE E Amrita CBE: Aravii you r here with me da
05/10/22, 17:04 - Harecharan CSE E Amrita CBE: 🤣🤣
05/10/22, 17:04 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 17:05 - Harecharan CSE E Amrita CBE: Viswa u too da
05/10/22, 17:05 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 17:06 - Gannu: Avan yenna solla varan nu puridha @916383425519
05/10/22, 17:07 - Sanjuuu 🎓: <Media omitted>
05/10/22, 17:08 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 17:08 - Gannu: <Media omitted>
05/10/22, 17:09 - Gannu: Which temple da?
05/10/22, 17:11 - Harecharan CSE E Amrita CBE: Chennimalai
05/10/22, 17:16 - Gannu: Nyc 👍
05/10/22, 17:26 - Viswaa Ramasubramanian: Leave la kooda 7 1/2 en koodave suthudeeeee
05/10/22, 19:54 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 19:54 - Harecharan CSE E Amrita CBE: How circuit 1 gets simplified to ab +a'c
05/10/22, 19:56 - Harecharan CSE E Amrita CBE: Anyone did 6th one?
05/10/22, 19:57 - Gannu: <Media omitted>
05/10/22, 19:58 - Harecharan CSE E Amrita CBE: The fck is tis
05/10/22, 19:58 - Gannu: Adhellaam apidi dhaan 😂
05/10/22, 19:58 - Harecharan CSE E Amrita CBE: Ithellam mam solli kuduthaangala
05/10/22, 19:58 - Gannu: U asked 4 it
05/10/22, 19:59 - Gannu: Konjam explore pannunga bro
05/10/22, 20:00 - Harecharan CSE E Amrita CBE: Konjam brain use panna i shouldve thought why 1 and 6 circuit have no pair and maybe....just maybe that ab +a'c +bc somehow twisted must give 6th circuit
05/10/22, 20:00 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 20:10 - Shesadriii 🎓: Ma'am taught this tho
05/10/22, 20:11 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/22, 20:11 - Harecharan CSE E Amrita CBE: But seriously I don't remember mam teaching tis
05/10/22, 20:12 - Shesadriii 🎓: She did . I guess the class after which gautham was scolded for being silly
05/10/22, 20:13 - Harecharan CSE E Amrita CBE: Aah I think now I remember
05/10/22, 20:38 - Viswaa Ramasubramanian: Full time OD nu ooru suthuna ipdi dhan
05/10/22, 20:49 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 20:49 - Phoool Gobiiii  🎓: Bois
05/10/22, 20:49 - Phoool Gobiiii  🎓: Check this.. I think this is write
05/10/22, 20:52 - Phoool Gobiiii  🎓: Is this right?
05/10/22, 20:52 - Gannu: Yes crrt
05/10/22, 20:52 - Phoool Gobiiii  🎓: Ogeii
05/10/22, 20:53 - Sanjuuu 🎓: <Media omitted>
05/10/22, 20:53 - Sanjuuu 🎓: <Media omitted>
05/10/22, 20:53 - Phoool Gobiiii  🎓: <Media omitted>
05/10/22, 20:53 - Sanjuuu 🎓: <Media omitted>
06/10/22, 07:57 - Sanjuuu 🎓: Peaceful
06/10/22, 08:28 - Sanjuuu 🎓: <Media omitted>
06/10/22, 08:45 - Phoool Gobiiii  🎓: <Media omitted>
06/10/22, 10:07 - Harecharan CSE E Amrita CBE: Enda innaike room vanthute
06/10/22, 10:07 - Harecharan CSE E Amrita CBE: Now only i remembered
06/10/22, 10:08 - Harecharan CSE E Amrita CBE: Guys don't forget to bring full white shirt for gokulastami
06/10/22, 13:33 - Araviiii 🎓: @918939677049 @919840365293 from now on we will book cheran express itself no need of nilgiri express.
06/10/22, 13:34 - Sanjuuu 🎓: <Media omitted>
06/10/22, 13:35 - Gannu: Y this sudden decision??
06/10/22, 13:36 - Araviiii 🎓: Just now listed down yhe payments that I have to send  it to u and surya.
06/10/22, 13:37 - Sanjuuu 🎓: And?
06/10/22, 13:37 - Araviiii 🎓: Apo than I found out the convenience charge is greater for nilgiri than cheran
06/10/22, 13:37 - Sanjuuu 🎓: Greater by how much?
06/10/22, 13:38 - Araviiii 🎓: I think by 5 Rupees 🤣
06/10/22, 13:38 - Sanjuuu 🎓: Okay
06/10/22, 13:38 - Sanjuuu 🎓: Then I g I'll travel by myself like usual
06/10/22, 13:39 - Araviiii 🎓: Nee ium Cheran va
06/10/22, 13:39 - Araviiii 🎓: ?
06/10/22, 13:39 - Gannu: <Media omitted>
06/10/22, 13:40 - Sanjuuu 🎓: Doesnt stop at katpadi
06/10/22, 13:40 - Sanjuuu 🎓: Cheran doesnt
06/10/22, 13:40 - Araviiii 🎓: Is it 🤔
06/10/22, 13:40 - Sanjuuu 🎓: Pull the chain at katpadi
06/10/22, 21:38 - Harecharan CSE E Amrita CBE started a call
06/10/22, 22:06 - Harecharan CSE E Amrita CBE: Room 204 guys don't lock the door tmrw morning when going to ab3

I'm coming by bus so... I'll reach by iron
06/10/22, 22:07 - Harecharan CSE E Amrita CBE: Thirty
06/10/22, 22:07 - Harecharan CSE E Amrita CBE: *8 30
07/10/22, 10:39 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/22, 14:33 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/eu4L_u_ohf0?feature=share
07/10/22, 17:49 - Phoool Gobiiii  🎓: *Full Stack Developer Course*

Dear Students,

              Welcome to the Full Stack Developer (FSD) course. The first session for the course will be today (28/09/2022) from 6.30 PM to 7.30 PM. 

Link - https://teams.microsoft.com/l/meetup-join/19%3ameeting_ZjBlYTQ1OGItN2I2OC00NzRhLTljYWItMzE0ZTFiMmFkZjM5%40thread.v2/0?context=%7b%22Tid%22%3a%2200f9cda3-075e-44e5-aa0b-aba3add6539f%22%2c%22Oid%22%3a%225cb69a20-3bf2-4983-b061-529723928402%22%7d


*Since this is first session all paid and non-paid students are allowed to attend this session in order to get an idea about the contents of the course, from next class only paid students will be allowed*
07/10/22, 17:51 - Sanjuuu 🎓 changed this group's icon
07/10/22, 21:28 - Araviiii 🎓: <Media omitted>
07/10/22, 21:28 - Harecharan CSE E Amrita CBE: Password
07/10/22, 21:28 - Araviiii 🎓: lab1csec
07/10/22, 21:33 - Gannu: <Media omitted>
07/10/22, 21:34 - Gannu: <Media omitted>
07/10/22, 21:34 - Gannu: <Media omitted>
07/10/22, 21:34 - Gannu: Cse-D
07/10/22, 21:34 - Araviiii 🎓: 😄👍🏻
08/10/22, 10:00 - Viswaa Ramasubramanian: <Media omitted>
08/10/22, 12:51 - Phoool Gobiiii  🎓: <Media omitted>
08/10/22, 12:58 - Harecharan CSE E Amrita CBE: I see something in ur specs ram and its green
08/10/22, 12:59 - Phoool Gobiiii  🎓: That’s the screen flash
08/10/22, 12:59 - Harecharan CSE E Amrita CBE: Nope its ****
08/10/22, 13:00 - Harecharan CSE E Amrita CBE: See how eager aravii is watching it
08/10/22, 17:57 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:49 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:49 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:49 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:51 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:51 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:55 - Sooorrrr 🎓: <Media omitted>
08/10/22, 20:58 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:58 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:58 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:58 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:58 - Shesadriii 🎓: <Media omitted>
08/10/22, 20:59 - Sooorrrr 🎓: <Media omitted>
08/10/22, 20:59 - Sooorrrr 🎓: <Media omitted>
08/10/22, 21:02 - Sooorrrr 🎓: <Media omitted>
08/10/22, 21:03 - Sooorrrr 🎓: <Media omitted>
08/10/22, 21:10 - Sooorrrr 🎓: <Media omitted>
08/10/22, 21:11 - Sooorrrr 🎓: Password 123
08/10/22, 21:19 - Shesadriii 🎓: <Media omitted>
09/10/22, 10:39 - Gannu: <Media omitted>
09/10/22, 11:46 - Viswaa Ramasubramanian: https://www.youtube.com/watch?v=Jw2dNi8hV4A
09/10/22, 13:23 - Viswaa Ramasubramanian: <Media omitted>
10/10/22, 09:34 - Viswaa Ramasubramanian: <Media omitted>
10/10/22, 15:29 - Harecharan CSE E Amrita CBE: <Media omitted>
10/10/22, 18:09 - Harecharan CSE E Amrita CBE: https://us06web.zoom.us/j/84559598596?pwd=dXJJN0F0NkJTa3g1Y2tzRngwcDN4dz09
10/10/22, 18:09 - Harecharan CSE E Amrita CBE: teachnook
11/10/22, 15:28 - Harecharan CSE E Amrita CBE: <Media omitted>
11/10/22, 18:23 - Harecharan CSE E Amrita CBE: <Media omitted>
11/10/22, 18:23 - Harecharan CSE E Amrita CBE: ???
11/10/22, 23:01 - Sooorrrr 🎓: <Media omitted>
12/10/22, 19:27 - Viswaa Ramasubramanian: Menu
Dosa
Puli sadam
Rice
Rasam
12/10/22, 19:24 - Harecharan CSE E Amrita CBE: <Media omitted>
12/10/22, 19:52 - Viswaa Ramasubramanian: <Media omitted>
12/10/22, 19:33 - Sooorrrr 🎓: 👍
12/10/22, 21:13 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/L1oMRagm5vE?feature=share
12/10/22, 21:14 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/kJTt7Zg05Ms?feature=share
13/10/22, 12:07 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/QDbn8steNfs?feature=share
13/10/22, 13:01 - Sanjuuu 🎓: Chakara pongal
13/10/22, 13:01 - Sanjuuu 🎓: Vaththa kozhambu
13/10/22, 13:02 - Sanjuuu 🎓: Ram come
13/10/22, 13:09 - Phoool Gobiiii  🎓: <Media omitted>
13/10/22, 13:10 - Sanjuuu 🎓: 🥺
13/10/22, 14:47 - Sanjuuu 🎓: Bois
13/10/22, 14:47 - Harecharan CSE E Amrita CBE: Tell da
13/10/22, 14:47 - Sanjuuu 🎓: Can u go to ground
13/10/22, 14:47 - Sanjuuu 🎓: For helping with the float
13/10/22, 14:48 - Harecharan CSE E Amrita CBE: Nope sa busy being lazy
13/10/22, 14:48 - Sanjuuu 🎓: U dont want to be not participating in anything
13/10/22, 14:48 - Harecharan CSE E Amrita CBE: Mime,bch
13/10/22, 14:48 - Sanjuuu 🎓: They'll put u in some procession later
13/10/22, 14:48 - Sanjuuu 🎓: Ass.
13/10/22, 14:48 - Sanjuuu 🎓: There are other ppl in this grp
13/10/22, 14:49 - Harecharan CSE E Amrita CBE: Ya ya iknow
13/10/22, 14:49 - Sanjuuu 🎓: Uk...mime doesn't count
13/10/22, 14:49 - Sanjuuu 🎓: U aren't participating in gokulashtami
13/10/22, 14:49 - Harecharan CSE E Amrita CBE: I'll go after 30 min
13/10/22, 14:49 - Sanjuuu 🎓: That's just a side competi
13/10/22, 14:49 - Sanjuuu 🎓: Ok take ur roomates
13/10/22, 14:49 - Sanjuuu 🎓: Force then
13/10/22, 14:50 - Sanjuuu 🎓: Me and ram in ab3
13/10/22, 14:50 - Harecharan CSE E Amrita CBE: Ok
13/10/22, 19:37 - Harecharan CSE E Amrita CBE: <Media omitted>
13/10/22, 19:37 - Harecharan CSE E Amrita CBE: ,dinner come stat
13/10/22, 21:54 - Harecharan CSE E Amrita CBE: <Media omitted>
13/10/22, 21:54 - Harecharan CSE E Amrita CBE: <Media omitted>
13/10/22, 21:54 - Harecharan CSE E Amrita CBE: <Media omitted>
14/10/22, 19:21 - Viswaa Ramasubramanian: Guys Dinner ku vaanga
14/10/22, 19:21 - Viswaa Ramasubramanian: Harecharan Treat 🥳🥳🥳
14/10/22, 19:21 - Harecharan CSE E Amrita CBE: Dinner whT
14/10/22, 19:22 - Harecharan CSE E Amrita CBE: Poda
14/10/22, 19:22 - Sanjuuu 🎓: Where?
14/10/22, 19:22 - Harecharan CSE E Amrita CBE: Nonono
14/10/22, 19:22 - Viswaa Ramasubramanian: Main spot
14/10/22, 19:22 - Viswaa Ramasubramanian: Idli podi combo tdyy guys
14/10/22, 19:23 - Sanjuuu 🎓: I'm coming straight to mess
14/10/22, 19:23 - Viswaa Ramasubramanian: Mass nae nee 🔥
14/10/22, 19:23 - Sanjuuu 🎓: Theriyum
14/10/22, 19:24 - Viswaa Ramasubramanian: 🍞🍚
14/10/22, 19:24 - Sanjuuu 🎓: <Media omitted>
14/10/22, 19:24 - Viswaa Ramasubramanian: <Media omitted>
14/10/22, 19:24 - Viswaa Ramasubramanian: <Media omitted>
14/10/22, 19:24 - Sanjuuu 🎓: <Media omitted>
14/10/22, 19:25 - Viswaa Ramasubramanian: <Media omitted>
14/10/22, 19:25 - Viswaa Ramasubramanian: <Media omitted>
14/10/22, 19:27 - Sanjuuu 🎓: Idli verkadalai chutney
14/10/22, 19:27 - Viswaa Ramasubramanian: <Media omitted>
14/10/22, 19:44 - Viswaa Ramasubramanian: 🥜
14/10/22, 19:47 - Shesadriii 🎓: <Media omitted>
14/10/22, 20:43 - Shesadriii 🎓: <Media omitted>
14/10/22, 20:45 - Shesadriii 🎓: <Media omitted>
14/10/22, 20:45 - Shesadriii 🎓: <Media omitted>
14/10/22, 20:45 - Shesadriii 🎓: <Media omitted>
15/10/22, 19:24 - Sooorrrr 🎓: <Media omitted>
15/10/22, 20:33 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/1WPASmqtpzs?feature=share
16/10/22, 19:42 - Harecharan CSE E Amrita CBE: <Media omitted>
16/10/22, 20:07 - Viswaa Ramasubramanian: Guys order for dosas starts from 8:15 or 8:30
17/10/22, 22:15 - Harecharan CSE E Amrita CBE: Where r u guys are all
18/10/22, 13:19 - Harecharan CSE E Amrita CBE: Mime is going to start in a few minutes guys if you can please come and show us your support
18/10/22, 13:20 - Gannu: Where da? In ground ah?
18/10/22, 13:20 - Harecharan CSE E Amrita CBE: null
18/10/22, 13:21 - Harecharan CSE E Amrita CBE: It will start by 140
18/10/22, 13:46 - Harecharan CSE E Amrita CBE: <Media omitted>
18/10/22, 13:47 - Phoool Gobiiii  🎓: When?
18/10/22, 13:47 - Viswaa Ramasubramanian: <Media omitted>
18/10/22, 13:47 - Harecharan CSE E Amrita CBE: Now they said every team to assembly
18/10/22, 13:47 - Viswaa Ramasubramanian: <Media omitted>
18/10/22, 13:47 - Harecharan CSE E Amrita CBE: So maybe in 10 min it will start
18/10/22, 13:48 - Viswaa Ramasubramanian: <Media omitted>
18/10/22, 13:48 - Harecharan CSE E Amrita CBE: We are middle  group
18/10/22, 13:49 - Viswaa Ramasubramanian: <Media omitted>
18/10/22, 19:39 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=9cNmUNHSBac
19/10/22, 12:09 - Sooorrrr 🎓: <Media omitted>
19/10/22, 14:44 - Araviiii 🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 14:47 - Phoool Gobiiii  🎓: <Media omitted>
19/10/22, 23:33 - Harecharan CSE E Amrita CBE: <Media omitted>
19/10/22, 23:33 - Harecharan CSE E Amrita CBE: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:48 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 00:49 - Gannu: <Media omitted>
20/10/22, 09:42 - Harecharan CSE E Amrita CBE: null
20/10/22, 18:31 - Sooorrrr 🎓: <Media omitted>
20/10/22, 18:32 - Sanjuuu 🎓: null
20/10/22, 18:32 - Sooorrrr 🎓: <Media omitted>
20/10/22, 23:58 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/Rn79GV4IF5I?feature=share
21/10/22, 00:12 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/vAwCO32al3U?feature=share
21/10/22, 08:41 - Phoool Gobiiii  🎓: Bruhh
21/10/22, 19:00 - Sooorrrr 🎓: <Media omitted>
21/10/22, 19:06 - Viswaa Ramasubramanian: nice
21/10/22, 19:24 - Sooorrrr 🎓: <Media omitted>
21/10/22, 19:24 - Sooorrrr 🎓: Can't understand what's going on
21/10/22, 19:24 - Sooorrrr 🎓: It went back to this page
21/10/22, 19:24 - Harecharan CSE E Amrita CBE: ennada innum login page la ye irukura
21/10/22, 19:25 - Harecharan CSE E Amrita CBE: lol😂😂
21/10/22, 19:41 - Harecharan CSE E Amrita CBE: guys, an important discussion regarding snacks bringing
21/10/22, 19:43 - Harecharan CSE E Amrita CBE: as there is always not enough snacks for us this time everyone will bring snacks so that it will be very helpful like in times when we have to skip dinner and attend teachnook and cir and stuff
21/10/22, 19:43 - Shesadriii 🎓: This message was deleted
21/10/22, 20:05 - Sooorrrr 🎓: <Media omitted>
21/10/22, 20:05 - Sooorrrr 🎓: <Media omitted>
21/10/22, 20:05 - Shesadriii 🎓: Eat bois
21/10/22, 20:05 - Shesadriii 🎓: Eat
21/10/22, 20:05 - Sooorrrr 🎓: Thanks
21/10/22, 20:05 - Sooorrrr 🎓: What's in mess
21/10/22, 20:05 - Shesadriii 🎓: Dunno
21/10/22, 20:06 - Sooorrrr 🎓: What are you eating
21/10/22, 20:06 - Shesadriii 🎓: 🥑
21/10/22, 20:08 - Sooorrrr 🎓: <Media omitted>
21/10/22, 20:10 - Sooorrrr 🎓: <Media omitted>
21/10/22, 20:10 - Sooorrrr 🎓: <Media omitted>
22/10/22, 07:28 - Viswaa Ramasubramanian: Single seater
22/10/22, 07:28 - Viswaa Ramasubramanian: <Media omitted>
22/10/22, 07:28 - Viswaa Ramasubramanian: Edham epdiyo kadachirichu boiss
22/10/22, 07:28 - Viswaa Ramasubramanian: Diwali mode on 🫶🏻
22/10/22, 08:29 - Gannu: Reached 🏡 safely
22/10/22, 08:36 - Araviiii 🎓: Reached home
22/10/22, 08:50 - Sooorrrr 🎓: Reached home bois
22/10/22, 09:02 - Viswaa Ramasubramanian: Crowd Overloading....
22/10/22, 09:02 - Viswaa Ramasubramanian: Good
22/10/22, 09:02 - Viswaa Ramasubramanian: That got single seater
22/10/22, 09:09 - Gannu: Have fun 😂
22/10/22, 09:09 - Viswaa Ramasubramanian: Ada poya yo 
Nee vera verupethitu
Bore adikidhu
22/10/22, 09:10 - Viswaa Ramasubramanian: Shreyas Ram Sanjay hare dhan Sathiya mam oda fun panitu irupanunga
22/10/22, 09:11 - Viswaa Ramasubramanian: 🫤 sathiya mam emoji
22/10/22, 09:11 - Gannu: Rytuh 😂😂
22/10/22, 09:11 - Viswaa Ramasubramanian: Kittah tattah suit agudhu la
22/10/22, 09:12 - Viswaa Ramasubramanian: 😏 idhu kuda correct ah irukum
22/10/22, 09:12 - Gannu: Nalla ve suit agudhu XD
22/10/22, 09:36 - Shesadriii 🎓: inga function overloading
22/10/22, 09:36 - Harecharan CSE E Amrita CBE: no she is actually teaching nicely
22/10/22, 09:36 - Shesadriii 🎓: ss agreed
22/10/22, 10:01 - Gannu: Thankss a lot for these gifts boizz 🥺..... Even from my mom's side. I really have no words to express it 🥲💜
22/10/22, 10:08 - Sanjuuu 🎓: 💙💙
22/10/22, 10:46 - Viswaa Ramasubramanian: <Media omitted>
22/10/22, 10:46 - Viswaa Ramasubramanian: OOPs is not leaving me 🫤😏
22/10/22, 11:33 - Araviiii 🎓: guys come someone send me the xam TT
22/10/22, 12:02 - Shesadriii 🎓: Had ece eval today
22/10/22, 12:02 - Araviiii 🎓: for ur batch ryt?
22/10/22, 12:03 - Shesadriii 🎓: Yep
22/10/22, 12:03 - Araviiii 🎓: okie
22/10/22, 12:15 - Viswaa Ramasubramanian: Whatt he said he won't right
22/10/22, 12:15 - Viswaa Ramasubramanian: Is there any missed evals??
22/10/22, 12:16 - Viswaa Ramasubramanian: Seri vidhu avarta aprama pesikirom
22/10/22, 16:10 - Viswaa Ramasubramanian: Reached veedhu boiss 🔥
22/10/22, 16:10 - Shesadriii 🎓: <Media omitted>
22/10/22, 19:12 - Harecharan CSE E Amrita CBE: Reached home the BOIS
23/10/22, 09:03 - Phoool Gobiiii  🎓: Bois, reached home by around 4 am ✨❤️
23/10/22, 09:03 - Shesadriii 🎓: Reached home @ 7 boiz
23/10/22, 10:25 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/cWUy3S5IOGY?feature=share
23/10/22, 10:44 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/2-GedXQuFz8?feature=share
23/10/22, 10:45 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/GN8OU1tEG50?feature=share
23/10/22, 12:18 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=9VG3K6CYE4E
23/10/22, 12:20 - Shesadriii 🎓: Lolk
23/10/22, 12:20 - Shesadriii 🎓: Subway surfers music
23/10/22, 12:20 - Harecharan CSE E Amrita CBE: ya that guy raps hard
23/10/22, 12:34 - Shesadriii 🎓: https://youtube.com/shorts/rNt2RFQTXoA?feature=share
23/10/22, 13:37 - Viswaa Ramasubramanian: @919941614061  match startee
23/10/22, 13:38 - Shesadriii 🎓: This message was deleted
23/10/22, 13:38 - Shesadriii 🎓: Babar lol
23/10/22, 13:39 - Viswaa Ramasubramanian: 🦆
23/10/22, 13:39 - Shesadriii 🎓: They lost their review also
23/10/22, 13:39 - Shesadriii 🎓: Ye lol
23/10/22, 13:42 - Viswaa Ramasubramanian: Vera mari podran Arsh
23/10/22, 13:42 - Shesadriii 🎓: Yaasss
23/10/22, 13:42 - Viswaa Ramasubramanian: just miss uh
23/10/22, 13:43 - Shesadriii 🎓: Virat dooddd
23/10/22, 13:43 - Shesadriii 🎓: Very close
23/10/22, 13:43 - Viswaa Ramasubramanian: ya
23/10/22, 13:43 - Shesadriii 🎓: Rizwan bi 0 mei out hona chahiye tha
23/10/22, 13:44 - Viswaa Ramasubramanian: ya
23/10/22, 13:44 - Viswaa Ramasubramanian: fine papom epdi podhu nu
23/10/22, 13:44 - Shesadriii 🎓: Andha pu**a enna pannudhu nu parru ippa
23/10/22, 13:44 - Viswaa Ramasubramanian: 4 in last ball
23/10/22, 13:44 - Viswaa Ramasubramanian: adhana solra
23/10/22, 13:44 - Viswaa Ramasubramanian: ind nalla squad
23/10/22, 13:45 - Viswaa Ramasubramanian: bhuvi arsh shami ash axar + hp (6th opt)
23/10/22, 13:45 - Viswaa Ramasubramanian: ennama swing achu la
23/10/22, 13:45 - Shesadriii 🎓: Veri squad
23/10/22, 13:45 - Shesadriii 🎓: Hmm yes ....bounce re
23/10/22, 13:45 - Viswaa Ramasubramanian: ya ya
23/10/22, 13:45 - Shesadriii 🎓: Virat's flick can get him runs today
23/10/22, 13:47 - Shesadriii 🎓: Pah....semma swingu
23/10/22, 13:48 - Shesadriii 🎓: Aswin playing ahhh
23/10/22, 13:48 - Viswaa Ramasubramanian: ya
23/10/22, 13:49 - Viswaa Ramasubramanian: adhan pothirundhan la
23/10/22, 13:49 - Viswaa Ramasubramanian: no chahal
23/10/22, 13:49 - Viswaa Ramasubramanian: its ash and axar
23/10/22, 13:53 - Viswaa Ramasubramanian: Hoodi Baba Hoodi Baba 🤙🏻🤙🏻
23/10/22, 13:53 - Shesadriii 🎓: Saavu da
23/10/22, 13:53 - Shesadriii 🎓: 😂😂😂😂
23/10/22, 13:54 - Shesadriii 🎓: Rizwan Bhai out ho gaya
23/10/22, 13:54 - Shesadriii 🎓: <Media omitted>
23/10/22, 13:54 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 13:55 - Viswaa Ramasubramanian: null
23/10/22, 13:55 - Shesadriii 🎓: Namma innum shami use pannave illa
23/10/22, 13:55 - Viswaa Ramasubramanian: deathhhh overs
23/10/22, 13:56 - Viswaa Ramasubramanian: arshdeep and bhuvi adhula adhi vanguvanunga adhan
23/10/22, 13:59 - Viswaa Ramasubramanian: Shammmshhhiiiirrraaa
23/10/22, 13:59 - Shesadriii 🎓: 👌
23/10/22, 14:00 - Viswaa Ramasubramanian: ennaya ipdi podurapla
23/10/22, 14:00 - Viswaa Ramasubramanian: mass panraru
23/10/22, 14:00 - Viswaa Ramasubramanian: ada poya
23/10/22, 14:00 - Viswaa Ramasubramanian: @919840365293  aala kanom
23/10/22, 14:01 - Viswaa Ramasubramanian: sooooooor irukingala
23/10/22, 14:03 - Viswaa Ramasubramanian: ennadha add la square cut nu onnu kamichan pathiya
23/10/22, 14:03 - Viswaa Ramasubramanian: bangam ah irundichu
23/10/22, 14:04 - Gannu: Neenga panra commentary ah pathu bayadhurupaan
23/10/22, 14:04 - Shesadriii 🎓: This message was deleted
23/10/22, 14:04 - Viswaa Ramasubramanian: Shreya naa pathutan
23/10/22, 14:05 - Viswaa Ramasubramanian: Shreyas be like👇🏻
23/10/22, 14:05 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 14:05 - Shesadriii 🎓: Ground enna theme park polla perusa irruku ?
23/10/22, 14:05 - Viswaa Ramasubramanian: ama
23/10/22, 14:05 - Viswaa Ramasubramanian: semma perusa iruku
23/10/22, 14:05 - Viswaa Ramasubramanian: innum oru six kuda varala
23/10/22, 14:05 - Shesadriii 🎓: Varadhu
23/10/22, 14:06 - Shesadriii 🎓: Namma hit man than adippan
23/10/22, 14:06 - Viswaa Ramasubramanian: out ah
23/10/22, 14:06 - Shesadriii 🎓: Hardik
23/10/22, 14:06 - Viswaa Ramasubramanian: yes thalaivan adipan
23/10/22, 14:06 - Shesadriii 🎓: enna pa panraru
23/10/22, 14:06 - Viswaa Ramasubramanian: Kungfu mandaiyanum adipan
23/10/22, 14:07 - Viswaa Ramasubramanian: shit
23/10/22, 14:07 - Viswaa Ramasubramanian: not out
23/10/22, 14:07 - Shesadriii 🎓: illa ….but very close
23/10/22, 14:07 - Shesadriii 🎓: veri
23/10/22, 14:07 - Viswaa Ramasubramanian: but semma throw
23/10/22, 14:11 - Viswaa Ramasubramanian: partnership break theva
23/10/22, 14:14 - Viswaa Ramasubramanian: You deleted this message
23/10/22, 14:16 - Shesadriii 🎓: shan
23/10/22, 14:17 - Viswaa Ramasubramanian: ya
23/10/22, 14:17 - Viswaa Ramasubramanian: star sports mandaiyan en ipdi panran
23/10/22, 14:18 - Viswaa Ramasubramanian: mathavangala focus panlam la
23/10/22, 14:18 - Shesadriii 🎓: lol 28 dot balls
23/10/22, 14:19 - Shesadriii 🎓: 29...
23/10/22, 14:21 - Viswaa Ramasubramanian: ya
23/10/22, 15:09 - Viswaa Ramasubramanian: enna thambi unaku un insta tirumba kedaikuma
23/10/22, 15:09 - Shesadriii 🎓: Yas
23/10/22, 15:09 - Shesadriii 🎓: Andha Shan romba panran
23/10/22, 15:09 - Gannu: Confirm 😂
23/10/22, 15:10 - Shesadriii 🎓: I already logged in 😂 and kept it ready
23/10/22, 15:10 - Viswaa Ramasubramanian: apdina next photo edutha unna tag panna mudiyum la
23/10/22, 15:10 - Shesadriii 🎓: This message was deleted
23/10/22, 15:10 - Shesadriii 🎓: S
23/10/22, 15:11 - Shesadriii 🎓: Arsh konjam brain use panni Yorker potta game namma kitta
23/10/22, 15:12 - Shesadriii 🎓: Anything above 140, we need to do some work
23/10/22, 15:12 - Viswaa Ramasubramanian: arshdeep kum 19 um set anadha sarithrame illa
23/10/22, 15:12 - Shesadriii 🎓: Aye...19th over vera lvl ah poduvan da
23/10/22, 15:12 - Viswaa Ramasubramanian: unaku insta vamdhadum onnu anupran
23/10/22, 15:13 - Shesadriii 🎓: Aiyoooo
23/10/22, 15:13 - Shesadriii 🎓: Afridi ya adikka vidran da
23/10/22, 15:13 - Viswaa Ramasubramanian: dei naadhan sonnanla
23/10/22, 15:13 - Viswaa Ramasubramanian: arsh kum 19 kum set anadha sarithrame illa
23/10/22, 15:13 - Shesadriii 🎓: <Media omitted>
23/10/22, 15:14 - Shesadriii 🎓: This message was deleted
23/10/22, 15:14 - Viswaa Ramasubramanian: tirupayum solran Shreyas uh arshdeep kum 19 kum set eh avadhu
23/10/22, 15:15 - Shesadriii 🎓: Karthik ana vera lvl ah panran da
23/10/22, 15:15 - Viswaa Ramasubramanian: min 15 varum
23/10/22, 15:15 - Viswaa Ramasubramanian: indha over ;a
23/10/22, 15:15 - Shesadriii 🎓: Hm
23/10/22, 15:15 - Shesadriii 🎓: 160
23/10/22, 15:15 - Shesadriii 🎓: Varum
23/10/22, 15:15 - Viswaa Ramasubramanian: 14
23/10/22, 15:15 - Viswaa Ramasubramanian: nice
23/10/22, 15:16 - Viswaa Ramasubramanian: bhuvi enaku terinju nalla poduvan
23/10/22, 15:16 - Viswaa Ramasubramanian: avanuku 19 dhan set agadhu 20 nalla varum
23/10/22, 15:16 - Viswaa Ramasubramanian: Bhuvi kum 20kum edho konjam nanjam othukum
23/10/22, 15:16 - Shesadriii 🎓: Pakalam
23/10/22, 15:16 - Shesadriii 🎓: <Media omitted>
23/10/22, 15:17 - Shesadriii 🎓: Ahemmmm
23/10/22, 15:17 - Shesadriii 🎓: *Coughs*
23/10/22, 15:17 - Viswaa Ramasubramanian: evlo talli pothirukan
23/10/22, 15:17 - Viswaa Ramasubramanian: yow konjam neram summa iruya
23/10/22, 15:17 - Shesadriii 🎓: Better
23/10/22, 15:18 - Viswaa Ramasubramanian: naa solran ;a bhuvi kum 20 kum set agum nu
23/10/22, 15:18 - Shesadriii 🎓: Cheri da
23/10/22, 15:18 - Viswaa Ramasubramanian: konjam neram poruthu irundhu paru
23/10/22, 15:18 - Shesadriii 🎓: Nice
23/10/22, 15:18 - Viswaa Ramasubramanian: wicket
23/10/22, 15:19 - Shesadriii 🎓: Out
23/10/22, 15:19 - Shesadriii 🎓: Nai....Ella ballayum adikunum nu varan paaru
23/10/22, 15:20 - Shesadriii 🎓: Harris rauf....
23/10/22, 15:20 - Viswaa Ramasubramanian: 6
23/10/22, 15:20 - Shesadriii 🎓: Indha nai dhan sollichu.....Aus la enna yaaralayum thaduka mudiyadhu nu
23/10/22, 15:20 - Viswaa Ramasubramanian: hmm..
23/10/22, 15:21 - Viswaa Ramasubramanian: ennadha tension lam avuran
23/10/22, 15:21 - Shesadriii 🎓: 😂
23/10/22, 15:21 - Shesadriii 🎓: Lolo
23/10/22, 15:21 - Viswaa Ramasubramanian: veri agurapla
23/10/22, 15:21 - Viswaa Ramasubramanian: last ball enna agumo
23/10/22, 15:21 - Shesadriii 🎓: Rauf is swinging his bat with his eyes closed
23/10/22, 15:22 - Shesadriii 🎓: .
23/10/22, 15:22 - Viswaa Ramasubramanian: oru run waste pantanunga
23/10/22, 15:22 - Viswaa Ramasubramanian: 160 namba dhan edhukanum
23/10/22, 15:22 - Shesadriii 🎓: Hm yes
23/10/22, 15:22 - Viswaa Ramasubramanian: avanunga 159 dhana
23/10/22, 15:22 - Viswaa Ramasubramanian: so 159 nu dhan solanum oru run tadithom
23/10/22, 15:22 - Shesadriii 🎓: Ro *HIT* eddupan
23/10/22, 15:22 - Viswaa Ramasubramanian: sry
23/10/22, 15:22 - Viswaa Ramasubramanian: oru run kudithom
23/10/22, 15:23 - Viswaa Ramasubramanian: HIT X KING
23/10/22, 15:23 - Shesadriii 🎓: Yas
23/10/22, 15:23 - Viswaa Ramasubramanian: GAY ELL
23/10/22, 15:23 - Shesadriii 🎓: X sky
23/10/22, 15:23 - Shesadriii 🎓: X Finisher
23/10/22, 15:23 - Viswaa Ramasubramanian: MEGAM(SKY) KARUKATHA PENNE PENNE
23/10/22, 15:23 - Viswaa Ramasubramanian: KING KONG KUNGFU VANDHA
23/10/22, 15:24 - Viswaa Ramasubramanian: lets wait and watch
23/10/22, 15:45 - Viswaa Ramasubramanian: shittttttt
23/10/22, 15:45 - Viswaa Ramasubramanian: ennada idhu adhukula out ayitan
23/10/22, 15:47 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 15:53 - Viswaa Ramasubramanian: SHREYASSSSSSSSSSSSSSSSSSSSS
23/10/22, 15:53 - Viswaa Ramasubramanian: irukiya daaaaaaa
23/10/22, 15:53 - Viswaa Ramasubramanian: ennada nadakidhu ingaaaaaaaaaaaa
23/10/22, 15:54 - Viswaa Ramasubramanian: unaku insta tirumba vandha maridhan
23/10/22, 16:05 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 16:10 - Viswaa Ramasubramanian: adutha adum bali anadhu
23/10/22, 16:11 - Sanjuuu 🎓: Dai
23/10/22, 16:11 - Viswaa Ramasubramanian: sry boss
23/10/22, 16:11 - Sanjuuu 🎓: Evlo msg da
23/10/22, 16:11 - Viswaa Ramasubramanian: thaniya pesikiran
23/10/22, 16:11 - Viswaa Ramasubramanian: purinjirichu
23/10/22, 16:11 - Sanjuuu 🎓: This message was deleted
23/10/22, 16:12 - Sanjuuu 🎓: 😂
23/10/22, 16:12 - Sanjuuu 🎓: No problem
23/10/22, 16:12 - Sanjuuu 🎓: I mute the grp
23/10/22, 16:12 - Viswaa Ramasubramanian: mentos sapthikiran bro
23/10/22, 16:12 - Gannu: I'm very quick 😜
23/10/22, 16:12 - Gannu: <Media omitted>
23/10/22, 16:12 - Viswaa Ramasubramanian: good decision
23/10/22, 16:13 - Viswaa Ramasubramanian: nee vera yaaa
23/10/22, 16:13 - Viswaa Ramasubramanian: Ganeshuhhhh
23/10/22, 16:13 - Viswaa Ramasubramanian: rayappan voice
23/10/22, 16:13 - Gannu: Theriyum ya... Poi match paru yaa
23/10/22, 16:36 - Shesadriii 🎓: veri
23/10/22, 16:47 - Shesadriii 🎓: .
23/10/22, 16:55 - Viswaa Ramasubramanian: 54 in 24 possible??
23/10/22, 16:55 - Shesadriii 🎓: Yes
23/10/22, 16:56 - Shesadriii 🎓: Possible for csk and mi.....Then possible for IND
23/10/22, 16:56 - Viswaa Ramasubramanian: tadavuranunga da epdi vaipu iruku
23/10/22, 16:56 - Shesadriii 🎓: Karthik and Ashwin there
23/10/22, 16:56 - Viswaa Ramasubramanian: apdina BP tablets eduthu vachiko
23/10/22, 16:56 - Shesadriii 🎓: 😂
23/10/22, 16:56 - Shesadriii 🎓: Nammaku adhu pazhagunadhu
23/10/22, 16:57 - Shesadriii 🎓: Pak was 117 in 17 overs
23/10/22, 16:57 - Shesadriii 🎓: Us : 110 in 16.4
23/10/22, 16:57 - Viswaa Ramasubramanian: ennadha oru oru run ah oduranunga
23/10/22, 16:58 - Viswaa Ramasubramanian: 16.5*
23/10/22, 16:58 - Shesadriii 🎓: That's okay ....just 5 runs trailing
23/10/22, 16:59 - Viswaa Ramasubramanian: that can also lead to pak won by 4 runs dude
23/10/22, 16:59 - Shesadriii 🎓: Nope.....will not lead
23/10/22, 16:59 - Shesadriii 🎓: We have Karthik
23/10/22, 16:59 - Viswaa Ramasubramanian: adhika solra oru mari veri erudhu
23/10/22, 17:00 - Shesadriii 🎓: Ha ha ha.....
23/10/22, 17:00 - Viswaa Ramasubramanian: good boi oru 6 adichirukan
23/10/22, 17:00 - Shesadriii 🎓: Virat
23/10/22, 17:00 - Viswaa Ramasubramanian: seekaram 50 pothu veri pudicha king ah mara solra
23/10/22, 17:00 - Shesadriii 🎓: 4*
23/10/22, 17:00 - Viswaa Ramasubramanian: poda dei 6 illa 4 da
23/10/22, 17:00 - Shesadriii 🎓: It's okay....
23/10/22, 17:01 - Shesadriii 🎓: WD
23/10/22, 17:02 - Shesadriii 🎓: 4
23/10/22, 17:02 - Shesadriii 🎓: Veri
23/10/22, 17:02 - Viswaa Ramasubramanian: Rohit paru veri pudichu tension la nikran
23/10/22, 17:02 - Viswaa Ramasubramanian: india jeichaodane
23/10/22, 17:02 - Viswaa Ramasubramanian: king hitman hug irukum paru
23/10/22, 17:02 - Shesadriii 🎓: 😂Avan eduthadhu 4 runs lol
23/10/22, 17:03 - Viswaa Ramasubramanian: but captain ache
23/10/22, 17:03 - Viswaa Ramasubramanian: neeyum expect panna naanum expect pannan
23/10/22, 17:03 - Viswaa Ramasubramanian: but expect the unecpected
23/10/22, 17:03 - Shesadriii 🎓: Lol hardik says He wants to hit
23/10/22, 17:03 - Shesadriii 🎓: Shaheen Afridi joker
23/10/22, 17:04 - Shesadriii 🎓: 4*
23/10/22, 17:04 - Viswaa Ramasubramanian: pathan
23/10/22, 17:04 - Shesadriii 🎓: 😂
23/10/22, 17:04 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 17:05 - Shesadriii 🎓: Shahid Afridi will watch : ' Idhu ka Naa en ponna unaku katti kodhuthen ?'
23/10/22, 17:08 - Viswaa Ramasubramanian: enna man nadakidhu
23/10/22, 17:09 - Shesadriii 🎓: 😂😂😂
23/10/22, 17:09 - Shesadriii 🎓: Virat
23/10/22, 17:09 - Viswaa Ramasubramanian: VK VK VK KINGGG DAA DEIIIIIII
23/10/22, 17:09 - Shesadriii 🎓: VK VK VK VK VK
23/10/22, 17:10 - Viswaa Ramasubramanian: avaru kannula andha veri pathiya
23/10/22, 17:10 - Sooorrrr 🎓: Kohli kohli kohli
23/10/22, 17:10 - Shesadriii 🎓: 👽
23/10/22, 17:10 - Viswaa Ramasubramanian: vaa nae vaa nae
23/10/22, 17:10 - Viswaa Ramasubramanian: unaku dhan waiting
23/10/22, 17:12 - Viswaa Ramasubramanian: VK + DK reqd now
23/10/22, 17:12 - Shesadriii 🎓: 😫😫😫😫
23/10/22, 17:13 - Shesadriii 🎓: DK dk dk
23/10/22, 17:14 - Viswaa Ramasubramanian: 15 in 4
23/10/22, 17:15 - Viswaa Ramasubramanian: 13 in 3
23/10/22, 17:15 - Shesadriii 🎓: 6"
23/10/22, 17:15 - Shesadriii 🎓: 😂😂😂
23/10/22, 17:16 - Shesadriii 🎓: NB
23/10/22, 17:16 - Shesadriii 🎓: WHAT IS HAPPENING?
23/10/22, 17:16 - Sooorrrr 🎓: No balp
23/10/22, 17:16 - Sooorrrr 🎓: Ball
23/10/22, 17:16 - Viswaa Ramasubramanian: no balllllllll
23/10/22, 17:16 - Viswaa Ramasubramanian: poduuuuuu
23/10/22, 17:17 - Shesadriii 🎓: 👽👽👽👽👽👽👽👽
23/10/22, 17:17 - Viswaa Ramasubramanian: WD
23/10/22, 17:17 - Shesadriii 🎓: Podu
23/10/22, 17:17 - Viswaa Ramasubramanian: SURYA is ready to run into field it seems
23/10/22, 17:18 - Viswaa Ramasubramanian: dei dei BP tablets edura oru second epdi bakkunu achu teriyuma
23/10/22, 17:19 - Viswaa Ramasubramanian: DK enna speed ah 3rd run odunapla
23/10/22, 17:19 - Shesadriii 🎓: Virat OUT !!! But free hit
23/10/22, 17:21 - Shesadriii 🎓: OUT
23/10/22, 17:21 - Viswaa Ramasubramanian: dei dei dei
23/10/22, 17:21 - Shesadriii 🎓: Ada deiii
23/10/22, 17:21 - Viswaa Ramasubramanian: ennadha idhu
23/10/22, 17:23 - Shesadriii 🎓: WD !
23/10/22, 17:23 - Viswaa Ramasubramanian: wth
23/10/22, 17:23 - Viswaa Ramasubramanian: is hhappenningg
23/10/22, 17:23 - Shesadriii 🎓: 1 run to win
23/10/22, 17:23 - Viswaa Ramasubramanian: BP BP BP Eridhuuuu
23/10/22, 17:23 - Shesadriii 🎓: Ashwin out na sooooooooper over
23/10/22, 17:23 - Viswaa Ramasubramanian: IND IND IND
23/10/22, 17:24 - Viswaa Ramasubramanian: HOOOOOOOOHOOOOOOOOOO
23/10/22, 17:24 - Gannu: Shreya insta la story podu ippa
23/10/22, 17:24 - Viswaa Ramasubramanian: 🇮🇳 WON
23/10/22, 17:24 - Viswaa Ramasubramanian: pODra Firefox mandaya
23/10/22, 17:25 - Shesadriii 🎓: Insta soooo
23/10/22, 17:25 - Sooorrrr 🎓: Happy diwali
23/10/22, 17:25 - Viswaa Ramasubramanian: Podra Vediyaa
23/10/22, 17:30 - Viswaa Ramasubramanian: M.O.M
23/10/22, 17:47 - Viswaa Ramasubramanian: 👇🏻
23/10/22, 17:47 - Viswaa Ramasubramanian: <Media omitted>
23/10/22, 20:59 - Sanjuuu 🎓: PR resources are in AUMS?
23/10/22, 21:01 - Sooorrrr 🎓: Yep
23/10/22, 21:01 - Sooorrrr 🎓: <Media omitted>
24/10/22, 00:58 - Sooorrrr 🎓: Happy diwali
24/10/22, 00:59 - Shesadriii 🎓: happy Diwali fellas
24/10/22, 00:59 - Sooorrrr 🎓: <Media omitted>
24/10/22, 06:10 - Araviiii 🎓: Happy Diwali guys
24/10/22, 06:53 - Harecharan CSE E Amrita CBE: Happy Diwali Guys
24/10/22, 07:22 - Phoool Gobiiii  🎓: ✨Happy Diwali✨
24/10/22, 07:27 - Harecharan CSE E Amrita CBE: This message was deleted
24/10/22, 07:28 - Harecharan CSE E Amrita CBE: <Media omitted>
24/10/22, 09:14 - Gannu: <Media omitted>
24/10/22, 21:51 - Viswaa Ramasubramanian: <Media omitted>
24/10/22, 21:52 - Viswaa Ramasubramanian: <Media omitted>
24/10/22, 21:52 - Viswaa Ramasubramanian: Train eriyachu
24/10/22, 21:52 - Phoool Gobiiii  🎓: 🤓
24/10/22, 21:54 - Gannu: Thambi enna aale maritinge 😂
24/10/22, 21:54 - Sooorrrr 🎓: Nice
24/10/22, 21:54 - Viswaa Ramasubramanian: Inime apdi dhan 😅😂
25/10/22, 01:21 - Shesadriii 🎓: null
25/10/22, 01:21 - Shesadriii 🎓: null
25/10/22, 04:43 - Viswaa Ramasubramanian: null
25/10/22, 05:02 - Viswaa Ramasubramanian: You deleted this message
25/10/22, 05:02 - Viswaa Ramasubramanian: You deleted this message
25/10/22, 09:00 - Gannu: This message was deleted
25/10/22, 11:29 - Araviiii 🎓: null
25/10/22, 20:35 - Harecharan CSE E Amrita CBE: null
25/10/22, 20:55 - You're now an admin
25/10/22, 20:55 - Harecharan CSE E Amrita CBE changed this group's icon
25/10/22, 20:56 - Shesadriii 🎓: null
25/10/22, 20:56 - Harecharan CSE E Amrita CBE: null
25/10/22, 20:56 - Gannu: null
25/10/22, 20:57 - You're no longer an admin
25/10/22, 20:58 - Harecharan CSE E Amrita CBE: null
25/10/22, 20:58 - You're now an admin
25/10/22, 21:03 - Araviiii 🎓 deleted this group's icon
25/10/22, 21:03 - Harecharan CSE E Amrita CBE changed this group's icon
25/10/22, 21:04 - You're no longer an admin
25/10/22, 22:05 - Gannu: <Media omitted>
25/10/22, 22:14 - Shesadriii 🎓: <Media omitted>
25/10/22, 22:14 - Harecharan CSE E Amrita CBE: <Media omitted>
25/10/22, 22:25 - Sanjuuu 🎓: what is this dp
25/10/22, 22:26 - Shesadriii 🎓: ikr….
26/10/22, 12:44 - You're now an admin
26/10/22, 12:44 - You're no longer an admin
26/10/22, 12:45 - You're now an admin
26/10/22, 12:45 - You removed Harecharan CSE E Amrita CBE
26/10/22, 12:45 - Sooorrrr 🎓 added Harecharan CSE E Amrita CBE
26/10/22, 14:27 - Sanjuuu 🎓: This message was deleted
26/10/22, 14:29 - You're no longer an admin
26/10/22, 14:32 - Sanjuuu 🎓 changed this group's icon
26/10/22, 14:33 - Sanjuuu 🎓 changed this group's icon
26/10/22, 17:07 - Sanjuuu 🎓: <Media omitted>
26/10/22, 19:47 - Gannu: <Media omitted>
26/10/22, 19:47 - Gannu: <Media omitted>
26/10/22, 19:47 - Gannu: <Media omitted>
26/10/22, 19:47 - Gannu: <Media omitted>
26/10/22, 19:47 - Gannu: <Media omitted>
26/10/22, 20:00 - Viswaa Ramasubramanian: Mess food 🔥🔥🔥
26/10/22, 20:01 - Harecharan CSE E Amrita CBE: Ennadu
26/10/22, 20:18 - Viswaa Ramasubramanian: idly😅😅
26/10/22, 20:18 - Viswaa Ramasubramanian: channa biriyani
27/10/22, 02:23 - Phoool Gobiiii  🎓: https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/?ref=leftbar-rightbar
27/10/22, 07:11 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 07:23 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 11:57 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 11:59 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:15 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:15 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:15 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:15 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:15 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:53 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:53 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:53 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:53 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 13:53 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 14:04 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 16:02 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 16:03 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 16:03 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 16:03 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 16:03 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 17:21 - Gannu: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Viswaa Ramasubramanian: null
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Harecharan CSE E Amrita CBE: <Media omitted>
27/10/22, 18:14 - Viswaa Ramasubramanian: null
27/10/22, 18:14 - Viswaa Ramasubramanian: null
27/10/22, 18:14 - Viswaa Ramasubramanian: null
27/10/22, 18:15 - Viswaa Ramasubramanian: null
27/10/22, 18:15 - Viswaa Ramasubramanian: null
27/10/22, 18:15 - Viswaa Ramasubramanian: null
27/10/22, 18:15 - Viswaa Ramasubramanian: null
27/10/22, 18:15 - Viswaa Ramasubramanian: null
27/10/22, 22:43 - Viswaa Ramasubramanian: https://www.youtube.com/shorts/QlIb92L1XJQ
27/10/22, 22:46 - You're now an admin
27/10/22, 22:50 - Viswaa Ramasubramanian: Hail NSS
27/10/22, 22:51 - Shesadriii 🎓: Hail NSS
27/10/22, 23:00 - You changed this group's icon
27/10/22, 23:00 - Sooorrrr 🎓: Hail NSS
27/10/22, 23:01 - Viswaa Ramasubramanian: Sui
27/10/22, 23:01 - Sooorrrr 🎓: Meow
27/10/22, 23:10 - Araviiii 🎓: <Media omitted>
27/10/22, 23:10 - Araviiii 🎓: <Media omitted>
27/10/22, 23:13 - Araviiii 🎓: <Media omitted>
27/10/22, 23:33 - Phoool Gobiiii  🎓: https://www.guru99.com/code-coverage.html
27/10/22, 23:34 - You're no longer an admin
28/10/22, 09:55 - Araviiii 🎓: <Media omitted>
28/10/22, 10:50 - Harecharan CSE E Amrita CBE: Thumbsup
29/10/22, 10:46 - Viswaa Ramasubramanian: <Media omitted>
29/10/22, 10:46 - Viswaa Ramasubramanian: <Media omitted>
29/10/22, 15:06 - Sanjuuu 🎓 changed this group's icon
29/10/22, 16:11 - Araviiii 🎓: Bois
29/10/22, 16:12 - Araviiii 🎓: Avp xam result is decalred
29/10/22, 16:12 - Araviiii 🎓: I got 13.83 🤣🤣🤣
29/10/22, 23:16 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:16 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
29/10/22, 23:19 - Sooorrrr 🎓: <Media omitted>
30/10/22, 09:25 - You're now an admin
30/10/22, 09:26 - You're no longer an admin
30/10/22, 09:26 - You're now an admin
30/10/22, 09:27 - Shesadriii 🎓 changed this group's icon
30/10/22, 09:41 - Harecharan CSE E Amrita CBE: Nice dp 👌 😍 😉 😏 😜 👍
30/10/22, 14:20 - Phoool Gobiiii  🎓: https://www.youtube.com/watch?v=H7UlMH_SdGc
30/10/22, 20:59 - Phoool Gobiiii  🎓: https://www.geeksforgeeks.org/access-modifiers-java/
30/10/22, 21:36 - Harecharan CSE E Amrita CBE: null
30/10/22, 21:36 - Sooorrrr 🎓: null
30/10/22, 21:36 - Viswaa Ramasubramanian: You deleted this message
30/10/22, 21:41 - Sanjuuu 🎓: <Media omitted>
30/10/22, 21:46 - Viswaa Ramasubramanian: <Media omitted>
30/10/22, 23:15 - Harecharan CSE E Amrita CBE: https://forms.office.com/Pages/ResponsePage.aspx?id=o835AF4H5USqC6ujrdZTnypB07OR5rhCg7zHBuxC7TNUNjJDUEUyUk8zQVc4UlE3OExVWlA4Q1ZRMi4u
30/10/22, 23:16 - Phoool Gobiiii  🎓: What's this for?
30/10/22, 23:17 - Harecharan CSE E Amrita CBE: Hostel feedback
30/10/22, 23:20 - Sanjuuu 🎓: <Media omitted>
30/10/22, 23:21 - Viswaa Ramasubramanian: <Media omitted>
30/10/22, 23:21 - Viswaa Ramasubramanian: <Media omitted>
30/10/22, 23:22 - Sanjuuu 🎓: <Media omitted>
30/10/22, 23:23 - Viswaa Ramasubramanian: You deleted this message
30/10/22, 23:24 - Viswaa Ramasubramanian: <Media omitted>
31/10/22, 02:08 - Sooorrrr 🎓 changed this group's icon
31/10/22, 02:09 - Sooorrrr 🎓 changed this group's icon
31/10/22, 08:27 - You changed the group name from "actually studying peepal" to "Always Sleeping Peepal"
31/10/22, 08:32 - You changed this group's icon
31/10/22, 10:37 - You're no longer an admin
31/10/22, 10:38 - You're now an admin
31/10/22, 10:37 - Shesadriii 🎓 changed this group's icon
31/10/22, 10:39 - Harecharan CSE E Amrita CBE changed the group description
31/10/22, 11:53 - You're no longer an admin
31/10/22, 13:28 - Harecharan CSE E Amrita CBE: <Media omitted>
31/10/22, 13:28 - Harecharan CSE E Amrita CBE: Sub function not low level viswa
31/10/22, 17:14 - Shesadriii 🎓: <Media omitted>
31/10/22, 17:14 - Shesadriii 🎓: <Media omitted>
31/10/22, 20:47 - Shesadriii 🎓: <Media omitted>
31/10/22, 22:05 - Viswaa Ramasubramanian: <Media omitted>
31/10/22, 22:05 - Viswaa Ramasubramanian: <Media omitted>
31/10/22, 22:17 - Viswaa Ramasubramanian: <Media omitted>
31/10/22, 22:21 - Viswaa Ramasubramanian: <Media omitted>
31/10/22, 22:43 - Viswaa Ramasubramanian: <Media omitted>
02/11/22, 00:43 - Gannu: .
02/11/22, 12:56 - Sanjuuu 🎓: <Media omitted>
02/11/22, 13:09 - Sanjuuu 🎓 changed this group's icon
03/11/22, 18:25 - Viswaa Ramasubramanian: <Media omitted>
03/11/22, 18:25 - Viswaa Ramasubramanian: Two legends in one frame 🔥🔥🔥🔥🔥🔥
03/11/22, 19:31 - Harecharan CSE E Amrita CBE changed this group's icon
04/11/22, 07:43 - Sooorrrr 🎓: <Media omitted>
04/11/22, 08:03 - Sanjuuu 🎓: Send f sec q paper
04/11/22, 08:06 - Gannu: <Media omitted>
04/11/22, 15:44 - Sanjuuu 🎓: Bye bye bois....
04/11/22, 15:44 - Sanjuuu 🎓: We have left hostel
04/11/22, 15:44 - Araviiii 🎓: k
04/11/22, 15:44 - Araviiii 🎓: have safe journey da
04/11/22, 15:45 - Phoool Gobiiii  🎓: Byeeee
04/11/22, 15:45 - Phoool Gobiiii  🎓: You guys too
04/11/22, 15:45 - Sooorrrr 🎓: nice
04/11/22, 15:45 - Sooorrrr 🎓: take care
04/11/22, 15:46 - Sooorrrr 🎓: enjoy your journey
04/11/22, 15:46 - Phoool Gobiiii  🎓: You too, my man ❤️✨
04/11/22, 15:46 - Sooorrrr 🎓: Not much happened in PR lab so no issues
04/11/22, 15:46 - Gannu: have a happy and safe journey boizz
04/11/22, 15:46 - Sooorrrr 🎓: Class is coming to a close
04/11/22, 17:08 - Phoool Gobiiii  🎓: 😮‍💨
04/11/22, 18:12 - Sanjuuu 🎓: <Media omitted>
04/11/22, 18:14 - Araviiii 🎓: <Media omitted>
04/11/22, 18:15 - Sanjuuu 🎓: <Media omitted>
04/11/22, 19:14 - Phoool Gobiiii  🎓: <Media omitted>
04/11/22, 19:14 - Sooorrrr 🎓: 👍
04/11/22, 19:51 - Viswaa Ramasubramanian: <Media omitted>
04/11/22, 21:26 - Phoool Gobiiii  🎓: <Media omitted>
04/11/22, 21:28 - Gannu: Noicee... Have fun
05/11/22, 00:00 - Harecharan CSE E Amrita CBE: <Media omitted>
05/11/22, 07:57 - Sooorrrr 🎓: Reached home bois
05/11/22, 08:03 - Gannu: Reached 🏡 safely
05/11/22, 08:04 - Araviiii 🎓: Reached home bois
05/11/22, 11:36 - Harecharan CSE E Amrita CBE: Wat da viswa you said you didn't go home cuz its raining but inga veyil mandaiya polakuthu
05/11/22, 11:37 - Harecharan CSE E Amrita CBE: <Media omitted>
05/11/22, 11:46 - Sanjuuu 🎓: <Media omitted>
05/11/22, 12:07 - Viswaa Ramasubramanian: madhiyanam ku mela paru nae
05/11/22, 13:44 - Araviiii 🎓: null
05/11/22, 15:36 - Viswaa Ramasubramanian: <Media omitted>
07/11/22, 00:06 - Sanjuuu 🎓: Happy birthday @919840365293
07/11/22, 00:06 - Sooorrrr 🎓: thanks
07/11/22, 07:23 - Harecharan CSE E Amrita CBE: Many more happy returns of the day da soor 🎊🎊🎊🍰🥧🥧
07/11/22, 07:29 - Harecharan CSE E Amrita CBE: Happy birthday wishes da viswaaaaaa 🥧🥧🥧🍰🍰
07/11/22, 15:22 - Harecharan CSE E Amrita CBE: package lab_prac;

import java.util.Scanner;
class Author{
	private String AuthorName;

	public String getAuthorName() {
		return AuthorName;
	}

	public void setAuthorName(String authorName) {
		AuthorName = authorName;
	}
}
class book{

		private String name;
		private Author a;
		private double price;
		private int qty;
		public book() {};
		public book (String name, Author a, double price) { 
			this.name = name;
			this.a = a;
			this.price = price;
			
		}
		
		public book (String name, Author a, double price, int qty) { 
		this.name = name;
		this.a = a;
		this.price = price;
		this.qty = qty;
		}
		
		public void printdetails() {
			System.out.println("name of book is "+name+"and author name is "+a+"and price is "+ price + " and qty is "+qty);
		}
		
	



public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public double getPrice() {
			return price;
		}

		public void setPrice(double price) {
			this.price = price;
		}

		public int getQty() {
			return qty;
		}

		public void setQty(int qty) {
			this.qty = qty;
		}

}

public class hare_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner scanner = new Scanner(System.in);
		String a= scanner.next();
		book storybook = new book();
		
		book.author author = book.new author;
		double c=scanner.nextDouble();
		int d=scanner.nextInt();
		book storybook(a,author ,c,d);
		
		
		

	}

}
07/11/22, 15:23 - Harecharan CSE E Amrita CBE: can anyone say wha the hellis wrong with this code pls
07/11/22, 18:49 - Phoool Gobiiii  🎓: <Media omitted>
07/11/22, 18:49 - Phoool Gobiiii  🎓: <Media omitted>
07/11/22, 18:49 - Phoool Gobiiii  🎓: <Media omitted>
07/11/22, 18:49 - Phoool Gobiiii  🎓: <Media omitted>
07/11/22, 18:52 - Sooorrrr 🎓: Nice
07/11/22, 18:52 - Sooorrrr 🎓: 👍
08/11/22, 23:23 - Harecharan CSE E Amrita CBE: <Media omitted>
08/11/22, 23:23 - Harecharan CSE E Amrita CBE: en pangu over unga pangu ?
08/11/22, 23:37 - Phoool Gobiiii  🎓: <Media omitted>
08/11/22, 23:37 - Phoool Gobiiii  🎓: yeee
09/11/22, 17:25 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn30 {
    public static void main(String args[]){
        int a,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;

        for(int i=1;i<d;i++){
            if(d%i==0){
                s+=i;
            }
        }

        if(s==a){
            System.out.println("Perfect Number");
        }
        else{
            System.out.println("Not an Perfect Number");
        }
    }

}
09/11/22, 18:42 - Harecharan CSE E Amrita CBE: <Media omitted>
09/11/22, 20:21 - Araviiii 🎓: <Media omitted>
09/11/22, 20:21 - Araviiii 🎓: <Media omitted>
09/11/22, 20:21 - Araviiii 🎓: <Media omitted>
09/11/22, 20:21 - Araviiii 🎓: <Media omitted>
09/11/22, 20:23 - Araviiii 🎓: For 4th question u can any programming language
09/11/22, 20:24 - Araviiii 🎓: U can even use python it seems
09/11/22, 20:36 - Araviiii 🎓: <Media omitted>
09/11/22, 20:37 - Gannu: <Media omitted>
09/11/22, 20:37 - Gannu: <Media omitted>
09/11/22, 20:37 - Gannu: <Media omitted>
09/11/22, 20:37 - Gannu: <Media omitted>
09/11/22, 20:37 - Gannu: <Media omitted>
10/11/22, 15:36 - Sanjuuu 🎓: guys....alt ergo code for prop logic syntax
10/11/22, 15:36 - Sanjuuu 🎓: anyone
10/11/22, 15:36 - Sanjuuu 🎓: just the syntax
10/11/22, 15:37 - Viswaa Ramasubramanian: logic p,q,r,s,t:prop
goal c:
    ((p->q) and (s->r) and ((q or r)->t) and (not t)) -> ((not p) and (not r))
10/11/22, 15:37 - Sanjuuu 🎓: 😘
10/11/22, 15:37 - Phoool Gobiiii  🎓: logic p,q : prop
goal c:
Expression
10/11/22, 19:07 - Sanjuuu 🎓 changed this group's icon
10/11/22, 22:28 - Araviiii 🎓: <Media omitted>
10/11/22, 22:29 - Araviiii 🎓: Having friendship like Joey and chandler is awesome
10/11/22, 22:29 - Araviiii 🎓: In life
10/11/22, 23:01 - Shesadriii 🎓: Aww.....Joey is back as his roommate
10/11/22, 23:20 - Viswaa Ramasubramanian: Q30 TO Q35 👇🏻👇🏻👇🏻
10/11/22, 23:20 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn30 {
    public static void main(String args[]){
        int a,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;

        for(int i=1;i<d;i++){
            if(d%i==0){
                s+=i;
            }
        }

        if(s==a){
            System.out.println("Perfect Number");
        }
        else{
            System.out.println("Not an Perfect Number");
        }
    }

}
10/11/22, 23:21 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn31 {
    public static void main(String args[]){
        int a,b,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;
        while (d > 0) {

            b=d%10;
            d=d/10;
            s+=b*b*b;

        }
        if(s==a){
            System.out.println("Armstrong");
        }
        else{
            System.out.println("Not an Armstrong");
        }
    }

}
10/11/22, 23:21 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn32 {
    public static void main(String args[]){
        int a,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;

        for(int i=1;i<=d;i++){
            if(d%i==0){
                s+=1;
            }
        }

        if(s==2){
            System.out.println("Prime Number");
        }
        else{
            System.out.println("Not an Prime Number");
        }
    }

}
10/11/22, 23:21 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn33 {
    public static void main(String args[]){
        int n1=0,n2=1,n3,i,count;
        Scanner in = new Scanner(System.in);
        count=in.nextInt();
        if(count==1) {
            System.out.print(n1);
        }
        if(count>=2) {
            System.out.print(n1 + " " + n2);
        }
        for(i=2;i<count;++i)
        {
            n3=n1+n2;
            System.out.print(" "+n3);
            n1=n2;
            n2=n3;
        }
    }
}
10/11/22, 23:21 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn34 {
    public static void main(String args[]){
        int a,b,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;
        while (d > 0) {

            b=d%10;
            d=d/10;
            s=s*10+b;

        }
        System.out.println(s);
    }

}
10/11/22, 23:21 - Viswaa Ramasubramanian: package Assigmemt1;

import java.util.Scanner;

public class Qn35 {
    public static void main(String args[]){
        int a,b,s=0;
        Scanner in =new Scanner(System.in);
        a= in.nextInt();
        int d=a;
        while (d > 0) {

            b=d%10;
            d=d/10;
            s=s*10+b;

        }
        if(s==a){
            System.out.println("Palindrome");
        }
        else{
            System.out.println("Not a Palindrome");
        }

    }

}
10/11/22, 23:22 - Viswaa Ramasubramanian: **********************************
10/11/22, 23:22 - Gannu: Q12 TO Q15 👇🏻👇🏻👇🏻👇🏻👇🏻👇🏻
10/11/22, 23:23 - Gannu: package assignment1;
import java.util.*;
public class Qn12 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the year: ");
        int year=sc.nextInt();
        if((year%4==0)){
            if(year%100==0 && year%400!=0){
                System.out.println("not a leap year");
            }
            else{
                System.out.println("it is a leap year");
            }
        }

        else{
            System.out.println("not a leap year");
        }

    }
}
10/11/22, 23:23 - Gannu: package assignment1;
import java.util.*;
public class Qn13 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the age: ");
        int age=sc.nextInt();
        if(age>=18){
            System.out.println("You are eligible to vote");
        }
        else{
            System.out.println("you are not eligible to vote");
        }

    }
}
10/11/22, 23:23 - Gannu: package assignment1;
import java.util.*;
public class Qn14 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the side lengths: ");
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        if(a==b && b==c){
            System.out.println("Equilateral");
        }
        else if(a==b || b==c || a==c){
            System.out.println("Isosceles");
        }
        else{
            System.out.println("Scalene");
        }

    }
}
10/11/22, 23:23 - Gannu: package assignment1;
import java.util.*;
public class Qn15 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("enter 3 angles: ");
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        if(((a+b+c)==180) && (a!=0 && b!=0 && c!=0)) {
            System.out.println("Triangle can be formed");
        }
        else{
            System.out.println("Triangle cannot be formed");
        }

    }
}
10/11/22, 23:23 - Harecharan CSE E Amrita CBE: *********************************
10/11/22, 23:23 - Harecharan CSE E Amrita CBE: 16 to 20  biecch
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: class findout {

    static void find(char a)
    {
        if ((a >= 65 && a <= 90)
                || (a >= 97 && a <= 122))
            System.out.println(" Alphabet ");

            // CHECKING FOR DIGITS
        else if (a >= 48 && a <= 57)
            System.out.println(" Digit ");

        else
            System.out.println(" Special Character ");
    }

    // Driver Code
    public static void main(String[] args)
    {
        char a = '$';
        find(a);
    }
}
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: q 16 up
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: public class Main{

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        char a ;
        a = sc.next().charAt(0);

        if(a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u' )
            System.out.println(a + " is vowel");
        else
            System.out.println(a + " is consonant");

    }
}
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: q 17 up
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("enter cust id");
        int custid = sc.nextInt();
        System.out.println("enter cust name");
        String name = sc.next();
        System.out.println("enter units used");
        int unit = sc.nextInt();
        double amt = 0;
        System.out.println("Customer idno:" + custid);
        System.out.println("unit consumed:" + unit);
        if (unit <= 199)
            amt = unit * 1.2;
        else if (unit > 199 && unit < 400)
            amt = unit * 1.5;
        else if (unit >= 400 && unit < 600)
            amt = unit * 1.8 * 1.15;
        else if (unit >= 600)
            amt = 1.15 * (unit * 2);
        System.out.println("amount is " + amt);
    }
}
10/11/22, 23:24 - Harecharan CSE E Amrita CBE: q 18 up
10/11/22, 23:25 - Harecharan CSE E Amrita CBE: public class Main {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("enter MONTH NUMBER");
        int n = sc.nextInt();
        switch (n) {
            case 1:
                System.out.println("month is janauary");
                break;
            case 2:
                System.out.println("month is febraury");
                break;
            case 3:
                System.out.println("month is march");
                break;
            case 4:
                System.out.println("month is april");
                break;
            case 5:
                System.out.println("month is may");
                break;
            case 6:
                System.out.println("month is june");
                break;
            case 7:
                System.out.println("month is july");
                break;
            case 8:
                System.out.println("month is august");
                break;
            case 9:
                System.out.println("month is september");
                break;
            case 10:
                System.out.println("month is october");
            case 11:
                System.out.println("month is november");
                break;
            case 12:
                System.out.println("month is december");
                break;

            default:
                System.out.println("only 12 months are there");
        }
10/11/22, 23:25 - Harecharan CSE E Amrita CBE: q 19 up
10/11/22, 23:25 - Harecharan CSE E Amrita CBE: import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        System.out.println("enter MONTH NUMBER");
        int n = sc.nextInt();
         switch (n) {
             case 1:
                 System.out.println("month has 31 days"); break;

             case 2:
                 System.out.println("month has 28/29 days"); break;
             case 3:
                 System.out.println("month has 31 days"); break;
             case 4:
                 System.out.println("month has 30 days"); break;
             case 5:
                 System.out.println("month has 31 days"); break;
             case 6:
                 System.out.println("month has 30 days"); break;
             case 7:
                 System.out.println("month has 31 days"); break;
             case 8:
                 System.out.println("month has 31 days"); break;
             case 9:
                 System.out.println("month has 30 daysr"); break;
             case 10:
                 System.out.println("month has 31 days"); break;
             case 11:
                 System.out.println("month has 30 days"); break;
             case 12:
                 System.out.println("month has 31 days"); break;

             default:
                 System.out.println("only 12 months are there ");
         }

    }
}
10/11/22, 23:25 - Harecharan CSE E Amrita CBE: q 20 up
10/11/22, 23:25 - Harecharan CSE E Amrita CBE: *****************************************
10/11/22, 23:26 - Sooorrrr 🎓: https://docs.google.com/document/d/1Hwm979Ot4CXzAuniGzwyWeZddAsVdlVsM1dZ_O_N0sM/edit?usp=sharing
10/11/22, 23:39 - Gannu: package assignment1;
import java.util.*;
public class Qn21 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int s=0;
        for(int i=100;i<200;i++){
            if(i%9==0) {
                System.out.println(i + " is divisible by 9");
                s += i;
            }
        }
        System.out.println("the sum of these numbers is "+s);

    }
}
10/11/22, 23:39 - Gannu: package assignment1;
import java.util.*;
public class Qn22 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("the first 10 natural numbers are: ");
        for(int i=1;i<=10;i++){
            System.out.print(i+" ");
        }

    }
}
10/11/22, 23:39 - Gannu: package assignment1;
import java.util.*;
public class Qn23 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        int s=0;
        for(int i=1;i<=n;i++){
            s+=i;
        }
        System.out.println("the sum of first "+n+" natural numbers is "+s);

    }
}
10/11/22, 23:40 - Gannu: package assignment1;
import java.util.*;
public class Qn24 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        for(int i=1;i<=n;i++){
            System.out.println("the cube of "+i+" is "+i*i*i);
        }


    }
}
10/11/22, 23:40 - Gannu: package assignment1;
import java.util.*;
public class Qn25 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        for(int i=1;i<=10;i++){
            System.out.println(n+" x "+i+" = "+n*i);
        }


    }
}
10/11/22, 23:40 - Gannu: package assignment1;
import java.util.*;
public class Qn26 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        int c=0;
        int i=1;
        int s=0;
        System.out.println("odd numbers are: ");
        while(c<n){
            if(i%2==0){
                i++;
                continue;
            }
            else{
                System.out.print(i+" ");
                s+=i;
                c++;
                i++;
            }

        }
        System.out.println();
        System.out.println("the sum of odd numbers is "+s);


    }
}
10/11/22, 23:41 - Gannu: package assignment1;
import java.util.*;
public class Qn27 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        int i=1;
        int f=1;
        while(i<=n){
            f*=i;
            i++;
        }
        System.out.println("the factorial is "+f);
    }
}
10/11/22, 23:41 - Gannu: package assignment1;
import java.util.*;
public class Qn28 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        int c=0;
        int i=0;
        int s=0;
        System.out.println("series: ");
        while(c<n){
            System.out.print(((i*10)+9)+" ");
            c++;
            i=i*10+9;
            s+=i;
        }
        System.out.println();
        System.out.println("the sum of the series is "+s);


    }
}
10/11/22, 23:41 - Gannu: package assignment1;
import java.util.*;
public class Qn29 {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the value of n: ");
        int n= sc.nextInt();
        int s=0;
        System.out.print("the series: ");
        for(int i=1;i<=n;i++){
            System.out.print(i*i+" ");
            s+=i*i;
        }
        System.out.println();
        System.out.println("the sum of square of first "+n+" natural numbers is "+s);

    }
}
10/11/22, 23:53 - Phoool Gobiiii  🎓: .
11/11/22, 09:04 - Phoool Gobiiii  🎓: <Media omitted>
11/11/22, 15:35 - Sooorrrr 🎓: 1)Write a C++ program to demonstrate binary addition using operator overloading.
2)Write a C++ program to demonstrate binary mmultiplication using operator overloading.
3)Identify the resultant of c=a+b*c where "+" needs to call addition overloading
"*" multiplication overloading
12/11/22, 15:35 - Harecharan CSE E Amrita CBE: null
12/11/22, 15:52 - Sooorrrr 🎓: <Media omitted>
12/11/22, 19:02 - Shesadriii 🎓 deleted this group's icon
12/11/22, 20:00 - Sooorrrr 🎓: <Media omitted>
12/11/22, 20:00 - Sooorrrr 🎓: <Media omitted>
12/11/22, 22:24 - Shesadriii 🎓 changed this group's icon
13/11/22, 09:12 - Harecharan CSE E Amrita CBE changed this group's icon
13/11/22, 14:06 - Harecharan CSE E Amrita CBE changed this group's icon
13/11/22, 22:32 - Phoool Gobiiii  🎓: Bois
13/11/22, 22:32 - Harecharan CSE E Amrita CBE: 2hay
13/11/22, 22:32 - Harecharan CSE E Amrita CBE: What
13/11/22, 22:32 - Phoool Gobiiii  🎓: My parents want me to stay for another day here.. I won’t be coming tmrw
13/11/22, 22:32 - Phoool Gobiiii  🎓: See y’all on Tuesday 🙃
13/11/22, 22:32 - Harecharan CSE E Amrita CBE: Okay
13/11/22, 22:33 - Gannu: Ogeyy da... Tc
13/11/22, 22:33 - Sooorrrr 🎓: 👍👍
13/11/22, 22:37 - Harecharan CSE E Amrita CBE: Take care
14/11/22, 10:16 - Phoool Gobiiii  🎓: Guys for the java qn with myDate class.. did you guys increment the days based on month?
14/11/22, 10:17 - Phoool Gobiiii  🎓: As in if its july and august should we increment till 31 and then the month?
14/11/22, 10:17 - Araviiii 🎓: s
14/11/22, 10:17 - Araviiii 🎓: s
14/11/22, 10:17 - Phoool Gobiiii  🎓: Or did you guys assume 30 days?
14/11/22, 10:17 - Araviiii 🎓: nope
14/11/22, 10:17 - Harecharan CSE E Amrita CBE: U want to practice and understand concepts thats olimportant
14/11/22, 10:18 - Harecharan CSE E Amrita CBE: Thats what mam wants
14/11/22, 10:18 - Harecharan CSE E Amrita CBE: And, she won't check it at all so no worries she only sees whether  a file there ot not
14/11/22, 10:18 - Phoool Gobiiii  🎓: Hmm alright
14/11/22, 10:18 - Phoool Gobiiii  🎓: Imma assume 30 days for all months then
14/11/22, 10:18 - Harecharan CSE E Amrita CBE: But I took lep yrs alsp
14/11/22, 10:19 - Phoool Gobiiii  🎓: Ahh okay okay
14/11/22, 11:05 - Sanjuuu 🎓: 😅
14/11/22, 20:31 - Sooorrrr 🎓 changed this group's icon
14/11/22, 21:20 - Harecharan CSE E Amrita CBE changed this group's icon
14/11/22, 20:30 - Sooorrrr 🎓: <Media omitted>
14/11/22, 20:30 - Sooorrrr 🎓: <Media omitted>
14/11/22, 20:30 - Sooorrrr 🎓: <Media omitted>
15/11/22, 10:12 - Sanjuuu 🎓 removed Araviiii 🎓
15/11/22, 10:13 - Sanjuuu 🎓 added Araviiii 🎓
15/11/22, 08:41 - Sanjuuu 🎓 changed this group's icon
15/11/22, 10:11 - Sanjuuu 🎓: Guys
15/11/22, 10:11 - Sanjuuu 🎓: I need charger adapter
15/11/22, 10:12 - Sanjuuu 🎓: Ram?
15/11/22, 10:12 - Phoool Gobiiii  🎓: Currently charging
15/11/22, 10:12 - Araviiii 🎓: lol
15/11/22, 10:12 - Sanjuuu 🎓: Ganesh?
15/11/22, 10:13 - Gannu: didn't bring my charger today 😅
15/11/22, 10:14 - Araviiii 🎓: looking like tdy is not ur day sanjay
15/11/22, 10:15 - Sanjuuu 🎓: <Media omitted>
15/11/22, 10:57 - Araviiii 🎓: wth who kept this group icon?
15/11/22, 15:27 - Viswaa Ramasubramanian: You deleted this message
15/11/22, 16:57 - Harecharan CSE E Amrita CBE: <Media omitted>
16/11/22, 08:55 - Harecharan CSE E Amrita CBE: 3 input sensors
2 output LED
LED 1 will glow, when sensor 1 is high and sensor 2,3 are low
LED 2 will glow, when sensor 1 is high and sensor 2,3 are not the same
16/11/22, 09:00 - Sooorrrr 🎓: Yes boss
16/11/22, 14:27 - Sanjuuu 🎓: bois
16/11/22, 14:27 - Sanjuuu 🎓: sir here
16/11/22, 14:28 - Sanjuuu 🎓: with papers
16/11/22, 14:28 - Gannu: 🥲
16/11/22, 15:26 - Sooorrrr 🎓: <Media omitted>
16/11/22, 16:18 - Sanjuuu 🎓: We need ece feedback to fill it in the reps feed back form so pls send me the feedback from individual point of view as soon as possible
16/11/22, 18:26 - Sooorrrr 🎓: <Media omitted>
16/11/22, 18:27 - Sooorrrr 🎓: <Media omitted>
16/11/22, 18:27 - Sooorrrr 🎓: <Media omitted>
17/11/22, 09:16 - Sooorrrr 🎓: <Media omitted>
17/11/22, 14:44 - Sanjuuu 🎓: bois
17/11/22, 14:44 - Sooorrrr 🎓: Yes
17/11/22, 14:44 - Sooorrrr 🎓: ?
17/11/22, 14:45 - Sanjuuu 🎓: the question the pdf
17/11/22, 14:45 - Sanjuuu 🎓: can send you?
17/11/22, 14:46 - Sanjuuu 🎓: sury
17/11/22, 14:46 - Sanjuuu 🎓: a
17/11/22, 14:47 - Sanjuuu 🎓: anyone?
17/11/22, 14:47 - Harecharan CSE E Amrita CBE: <Media omitted>
17/11/22, 14:47 - Sanjuuu 🎓: thank you
17/11/22, 14:47 - Harecharan CSE E Amrita CBE: HARE TO THE RESCUE
17/11/22, 14:47 - Sanjuuu 🎓: 😭
17/11/22, 14:52 - Sanjuuu 🎓: bois
17/11/22, 14:52 - Harecharan CSE E Amrita CBE: solda
17/11/22, 14:52 - Sanjuuu 🎓: what is forward and backward reasoning
17/11/22, 14:52 - Harecharan CSE E Amrita CBE: pre to post forwa post to pre backwa
17/11/22, 18:43 - Gannu: #include <iostream>
using namespace std;

class polynomial{
    private:
    int n,a[50],b[50];
    public:
    polynomial(){};
    polynomial(int x){
        n=x;
    }
    void arrin(){
        for(int i=0;i<n;i++){
            cout<<"enter coeff and power of "<<i+1<<" term:";
            cin>>a[i];
            cin>>b[i];
        }

    }
    void disp(){
        int i=0;
        cout<<"the polynomial is:"<<endl;
        cout<<a[i]<<"x^"<<b[i];
        for(int i=1;i<n;i++){
            cout<<" + "<<a[i]<<"x^"<<b[i];
        }
        cout<<endl;
    }
    polynomial operator*(polynomial m){
        polynomial t;
        for(int i=0;i<n;i++){
            t.a[i]=a[i]*m.a[i];
            t.b[i]=b[i]+m.b[i];
        }
        return t;

    }
    
};
int main()
{
    cout<<"enter the size of array:";
    int x,y;cin>>x>>y;
    polynomial o1(x),o2(y),o3(x*y);
    o1.arrin();
    o1.disp();
    o2.arrin();
    o2.disp();
    o3=o1*o2;
    o3.disp();

}
17/11/22, 19:47 - Gannu: #include <iostream>
using namespace std;

class polynomial{
    private:
    int n,a[50]={},b[50]={};
    public:
    polynomial(){};
    polynomial(int x){
        n=x;
    }
    void arrin(){
        for(int i=0;i<n;i++){
            cout<<"enter coeff and power of "<<i+1<<" term:";
            cin>>a[i];
            cin>>b[i];
        }

    }
    void disp(){
        int i=0;
        cout<<n<<endl;
        cout<<"the polynomial is:"<<endl;
        cout<<a[i]<<"x^"<<b[i];
        for(int i=1;i<n;i++){
            cout<<" + "<<a[i]<<"x^"<<b[i];
        }
        cout<<endl;
    }
    polynomial operator*(polynomial m){
        polynomial t;int k=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m.n;j++){
            t.a[k]=a[i]*m.a[j];
            t.b[k]=b[i]+m.b[j];
            k++;
            }
        }
        t.n=this->n*m.n;
        return t;

    }
    
};
int main()
{
    cout<<"enter the size of array:";
    int x,y;cin>>x>>y;
    polynomial o1(x),o2(y),o3;
    o1.arrin();
    o1.disp();
    o2.arrin();
    o2.disp();
    o3=o1*o2;
    o3.disp();

}
17/11/22, 19:50 - Phoool Gobiiii  🎓: #include <iostream>
using namespace std;

class Poly{
    private:
    int n = 5;
    int coeff[25]={};
    int pow[25] = {};

    public:
    Poly(){

    }
    Poly(int n, int a[], int b[]) {
        this->n=n;
        for (int i = 0; i < n; i++) {
            coeff[i] = a[i];
            pow[i] = b[i];
        }
    }
    void set_n(int n){
        this->n=n;
    }

    Poly operator *(Poly M){
        Poly N;
        N.set_n(this->n*M.n);
        int k = 0;
        for(int i = 0; i < this->n;i++) {
            for (int j = 0; j < M.n; j++) {
                N.coeff[k] = this->coeff[i] * M.coeff[j];
                N.pow[k] = this->pow[i] + M.pow[j];
                k++;
            }
        }
        return N;
    }

    void display(){
        cout << coeff[0] << " x^" << pow[0];
        for (int i = 1; i < n; i++) {
            cout << " + ";
            cout << coeff[i] << " x^" << pow[i];
        }
        cout << endl;
    }
};

int main() {
    int n1;
    cout << "Enter no of terms for 1st polynomial: ";
    cin >> n1;
    int coeff1[n1];
    int pow1[n1];
    for (int i = 0; i < n1; i ++) {
        cout << "Enter the coefficient for " <<i+1<<" term: ";
        cin >> coeff1[i];
        cout << "Enter the power for " <<i+1<<" term: ";
        cin >> pow1[i];
    }

    int n2;
    cout << "Enter no of terms for 2nd polynomial: ";
    cin >> n2;
    int coeff2[n2];
    int pow2[n2];
    for (int i = 0; i < n2; i ++) {
        cout << "Enter the coefficient for " <<i+1<<" term: ";
        cin >> coeff2[i];
        cout << "Enter the power for " <<i+1<<" term: ";
        cin >> pow2[i];
    }

    Poly A(n1, coeff1, pow1);
    A.display();
    cout << "-----" << endl;
    Poly B(n2, coeff2, pow2);
    B.display();
    cout << "-----" << endl;
    Poly R;
    R.set_n(n1*n2);

    R = A*B;
    R.display();

    return 0;
}
17/11/22, 21:45 - Sanjuuu 🎓: int i, j;
	int n=3;
	sailboat key;
    for (i = 1; i < n; i++)
    {
//    	cout<<"---------------------------------------";
//        for(int m=0;m<3;m++){
//    		arr[m].writeInfo();
//		}
//		cout<<"---------------------------------------";
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
        
    }
17/11/22, 21:45 - Sanjuuu 🎓: sailboat array sort
17/11/22, 22:09 - Harecharan CSE E Amrita CBE: 1 paper 2nd ques if you want add input
17/11/22, 22:09 - Harecharan CSE E Amrita CBE: #include<iostream>
using namespace std;    

class patient
{
    protected:
    string name;
    int age;
    string sex;
    string address;  
    
};

class treatment
{
    protected:
    string nature_of_illness;
    string doc_name;
    int med_fees;
};

class room
{
    protected:
    int room_no;
    string type_of_room;
    int date_for_discharge;
    int date_for_admission;
};

class bill : public patient, public treatment , public room
{
    public:
    void print(){
        cout <<"                BILLING             " << endl;
        cout <<"Name:                  "<<name<<endl;
        cout<<"age:                    "<<age<<endl;
        cout<<"sex:                     "<<sex<<endl;
        cout<<"address:                 "<<address<<endl;
        cout<<"nature_of_illness:   "<<nature_of_illness<<endl;
        cout<<"doc_name :            "<<doc_name<<endl;
        cout<<"med_fees: "<<med_fees<<endl;
        cout<<"type_of_room : "<<type_of_room<<endl;
        cout<<"date_for_discharge: "<<date_for_discharge<<endl;
        cout<<"date_for_discharge: "<<date_for_discharge<<endl;
    }


    };

    



int main(){
    bill billda;
    
    billda.print();

}
17/11/22, 22:32 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class sailboat
{
private:
    string mname;
    int length;
    int width;
    int draught;

public:
    void setinfo(string name, int l, int w, int d)
    {
        mname = name;
        length = l;
        width = w;
        draught = d;
    }
    void writeinfo()
    {
        cout << mname << " " << length << " " << width << " " << draught << endl;
    }
    int operator>(sailboat m)
    {
        int v = 0;
        if (length > m.length)
        {
            v = 1;
        }
        else if (length == m.length && width > m.width)
        {
            v = 1;
        }
        return v;
    }
};
int main()
{
    sailboat s[3], t;
    int length, width, draught;
    string name;
    for (int i = 0; i < 3; i++)
    {
        cout << "Enter values: " << endl;
        cin >> name >> length >> width >> draught;
        s[i].setinfo(name, length, width, draught);
    }
    int i, j;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2 - i; j++)
        {
            if (s[j] > s[j + 1])
            {
                t = s[j];
                s[j] = s[j + 1];
                s[j + 1] = t;
            }
        }
    }
    for (int i = 0; i < 3; i++)
    {
        s[i].writeinfo();
    }
}
17/11/22, 23:04 - Sanjuuu 🎓: int operator >(sailboat x){
			int f=0;
			if(length>x.length){
				f=1;
			}
			else if(length==x.length && b_width>x.b_width){
				f=1;
			}
			return f;
		}
17/11/22, 23:08 - Gannu: #include <iostream>
using namespace std;

class polynomial{
    private:
    int n,a[50]={},b[50]={};
    public:
    polynomial(){};
    polynomial(int x){
        n=x;
    }
    void arrin(){
        for(int i=0;i<n;i++){
            cout<<"enter coeff and power of "<<i+1<<" term:";
            cin>>a[i];
            cin>>b[i];
        }

    }
    void disp(){
        int i=0;
        cout<<"the polynomial is:"<<endl;
        cout<<a[i]<<"x^"<<b[i];
        for(int i=1;i<n;i++){
            cout<<" + "<<a[i]<<"x^"<<b[i];
        }
        cout<<endl;
    }
    polynomial operator*(polynomial m){
        polynomial t;int k=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m.n;j++){
            t.a[k]=a[i]*m.a[j];
            t.b[k]=b[i]+m.b[j];
            k++;
            }
        }
        t.n=this->n*m.n;
        return t;

    }
    
};
int main()
{
    cout<<"enter the size of array:";
    int x,y;cin>>x>>y;
    polynomial o1(x),o2(y),o3;
    o1.arrin();
    o1.disp();
    o2.arrin();
    o2.disp();
    o3=o1*o2;
    o3.disp();

}
17/11/22, 23:12 - Sanjuuu 🎓: #include <iostream>

using namespace std;

class num{
	int n;
	
	public:
		void set(int a){
			n=a;
		}
		void set(char a){
			cout<<"Enter a number: ";
			cin>>n;
		}
		int get(){
			return n;
		}
};
class perfect: public num{
	
	public:
		int checkPerfect(){
			int sum=0;
			for (int i=1;i<get();i++){
				if(get()%i==0){
					sum+=i;
				}
			}
			if(sum==get()){
				return 1;
			}
			else{
				return 0;
			}
		}
};
int main(){
	perfect obj;
	obj.set('a');
	(obj.checkPerfect())?cout<<"Perfect":cout<<"Not Perfect";
}
18/11/22, 19:41 - Sanjuuu 🎓 changed this group's icon
18/11/22, 19:42 - Sanjuuu 🎓: Looks 👍
18/11/22, 19:42 - Sanjuuu 🎓: Good
18/11/22, 19:43 - Shesadriii 🎓: Yaass
18/11/22, 19:44 - Gannu: 🥲
18/11/22, 21:54 - Harecharan CSE E Amrita CBE: Fuys reached home 🏡 and refresed
18/11/22, 21:54 - Araviiii 🎓: Okay
19/11/22, 06:48 - Sanjuuu 🎓: Bois reached home at 4 30
19/11/22, 07:50 - Viswaa Ramasubramanian: Reached home 🏠
19/11/22, 07:58 - Phoool Gobiiii  🎓: <Media omitted>
19/11/22, 08:01 - Gannu: Hv fun da
19/11/22, 08:43 - Shesadriii 🎓: Reached home lol
19/11/22, 09:00 - Sooorrrr 🎓: Reached home🏠
19/11/22, 09:11 - Gannu: Reached home safely
19/11/22, 09:15 - Viswaa Ramasubramanian: poitu varivayaaa song mathiruvom
19/11/22, 09:16 - Viswaa Ramasubramanian: hey eppurah ns unaku munnadi msg potirukan
19/11/22, 09:19 - Araviiii 🎓: Reached home bois 💙
19/11/22, 09:27 - Gannu: Yenga thala vidhi... Train lateuh 🥲
19/11/22, 09:28 - Viswaa Ramasubramanian: sed laiff
19/11/22, 12:18 - Phoool Gobiiii  🎓: Guysss.. do watch black panther
19/11/22, 12:18 - Phoool Gobiiii  🎓: Vera level da
20/11/22, 12:16 - Harecharan CSE E Amrita CBE: Guys for tmrw oops lab what should we study
20/11/22, 12:17 - Harecharan CSE E Amrita CBE: We have interview like questions too right?
20/11/22, 12:21 - Sooorrrr 🎓: What do you mean by interview questions?
20/11/22, 12:21 - Harecharan CSE E Amrita CBE: Mam said no, to prepare for viva,search Internet for interview level questions
20/11/22, 12:22 - Sooorrrr 🎓: I thought we only had lab
20/11/22, 12:22 - Sooorrrr 🎓: We also have viv
20/11/22, 12:22 - Sooorrrr 🎓: Viva*
20/11/22, 12:22 - Sooorrrr 🎓: ?
20/11/22, 12:22 - Harecharan CSE E Amrita CBE: Thats what I'm asking
20/11/22, 12:22 - Harecharan CSE E Amrita CBE: Tomorrow 9nly lab or lab and visa
20/11/22, 12:22 - Sooorrrr 🎓: Not sure
20/11/22, 12:23 - Harecharan CSE E Amrita CBE: We have viva thats for sure but its tmrw ot next week I'm not sure
20/11/22, 12:23 - Sooorrrr 🎓: CR needs to confirm
20/11/22, 12:23 - Harecharan CSE E Amrita CBE: Sanjayy...time for u to shine
20/11/22, 12:23 - Harecharan CSE E Amrita CBE: Lab portions ?
20/11/22, 12:23 - Harecharan CSE E Amrita CBE: Inheritance is there?
20/11/22, 12:24 - Sooorrrr 🎓: Till periodical 1
20/11/22, 12:24 - Sooorrrr 🎓: No inheritance
20/11/22, 12:24 - Sooorrrr 🎓: Only constructors
20/11/22, 12:24 - Sooorrrr 🎓: And getter setter methods
20/11/22, 12:26 - Harecharan CSE E Amrita CBE: Ohh okok
20/11/22, 12:26 - Sooorrrr 🎓: 👍
20/11/22, 12:53 - Sanjuuu 🎓: Guys..
20/11/22, 12:53 - Sanjuuu 🎓: Tomorrow only lab eval
20/11/22, 12:53 - Sanjuuu 🎓: Viva next monday
20/11/22, 13:00 - Harecharan CSE E Amrita CBE: Phew..
21/11/22, 11:54 - Phoool Gobiiii  🎓: package P1_Practice;

import java.util.Scanner;

public class Menu {
    String[] foodName = new String[5];
    String[] drinkName = new String[5];
    double[] foodPrice = new double[5];
    double[] drinkPrice= new double[5];

    public void order(){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the no of food items: ");
        int foodN = sc.nextInt();
        System.out.print("Enter the no of drinks: ");
        int drinkN = sc.nextInt();

        for (int i = 0; i < foodN; i++) {
            System.out.print("Enter the food name: ");
//            foodName[i] = "";
            sc.nextLine();
            foodName[i] = sc.nextLine();
            System.out.print("Enter the food price: ");
            foodPrice[i] = sc.nextDouble();
        }

        for (int i = 0; i < drinkN; i++) {
            System.out.print("Enter the drink name: ");
//            drinkName[i] = "";
            sc.nextLine();
            drinkName[i] = sc.nextLine();
            System.out.print("Enter the drink price: ");
            drinkPrice[i] = sc.nextDouble();
        }
    }
}
21/11/22, 11:54 - Phoool Gobiiii  🎓: package P1_Practice;

import java.util.Scanner;

public class Order {
    double tax;
    double total;
    String paymentMethod;
    Scanner sc = new Scanner(System.in);
    public void calculateBill(Menu m1){
        double foodSum = 0;
        double drinkSum = 0;
        for (int i = 0; i < (m1.foodPrice.length); i++) {
            foodSum += m1.foodPrice[i];
        }
        for (int i = 0; i < (m1.drinkPrice.length); i++) {
            drinkSum += m1.drinkPrice[i];
        }
        total += ((foodSum + 0.035*foodSum) + (drinkSum + 0.048*drinkSum));
        tax += 0.035*foodSum + 0.048*drinkSum;
    }


    public void pay(){
        System.out.print("Enter payment method: ");
        paymentMethod = sc.next();
    }

    public void display(Menu m1){
        System.out.println();
        System.out.println("Receipt");
        for (int i = 0; i < (m1.foodName.length); i++) {
            if (m1.foodName[i] != null) {
                System.out.println(m1.foodName[i] + "\t" + m1.foodPrice[i]);
            }
        }
        for (int i = 0; i < (m1.drinkName.length); i++) {
            if (m1.drinkName[i] != null) {
                System.out.println(m1.drinkName[i] + "\t" + m1.drinkPrice[i]);
            }
        }
        System.out.println();
        System.out.println("Tax = " + tax);
        System.out.println("Total = " + total);
        System.out.println("Payment mode: " + paymentMethod);
    }
}
21/11/22, 11:54 - Phoool Gobiiii  🎓: package P1_Practice;

public class FoodMain {
    public static void main(String[] args) {
        Menu m1 = new Menu();
        Order o1 = new Order();

        m1.order();
        o1.calculateBill(m1);
        o1.pay();
        o1.display(m1);
    }
}
21/11/22, 17:23 - Sooorrrr 🎓: <Media omitted>
21/11/22, 17:23 - Sooorrrr 🎓: DBMS paper
21/11/22, 18:07 - Harecharan CSE E Amrita CBE: <Media omitted>
21/11/22, 19:06 - Phoool Gobiiii  🎓: Mazda?
21/11/22, 19:06 - Harecharan CSE E Amrita CBE: S
22/11/22, 08:21 - Harecharan CSE E Amrita CBE: Bois today vada da
22/11/22, 08:22 - Harecharan CSE E Amrita CBE: Why did yall misfit?
22/11/22, 08:22 - Harecharan CSE E Amrita CBE: Miss it*
22/11/22, 08:27 - Phoool Gobiiii  🎓: Aravindh and I didn’t
22/11/22, 08:49 - Harecharan CSE E Amrita CBE: nice
22/11/22, 09:47 - Harecharan CSE E Amrita CBE: name the laptop company that amgus uses?
22/11/22, 09:47 - Harecharan CSE E Amrita CBE: answer:A-SUS
22/11/22, 10:50 - Shesadriii 🎓: Je-SUS Christ....what a joke
22/11/22, 11:44 - Harecharan CSE E Amrita CBE: I see u deserve some PUN-ishment
22/11/22, 11:44 - Viswaa Ramasubramanian: <Media omitted>
22/11/22, 11:56 - Sooorrrr 🎓: <Media omitted>
22/11/22, 12:02 - Araviiii 🎓: dei page number-aa solungada
22/11/22, 12:03 - Sanjuuu 🎓: 333
22/11/22, 12:04 - Araviiii 🎓: dank u
22/11/22, 17:26 - Sooorrrr 🎓: <Media omitted>
22/11/22, 17:26 - Sooorrrr 🎓: <Media omitted>
22/11/22, 17:26 - Sooorrrr 🎓: <Media omitted>
22/11/22, 17:26 - Sooorrrr 🎓: <Media omitted>
22/11/22, 20:58 - Sooorrrr 🎓: <Media omitted>
22/11/22, 20:58 - Sooorrrr 🎓: <Media omitted>
22/11/22, 20:58 - Sooorrrr 🎓: <Media omitted>
22/11/22, 20:58 - Sooorrrr 🎓: <Media omitted>
22/11/22, 22:09 - Viswaa Ramasubramanian: POLL:
Harecharan oru loosu kuuuu
OPTION: True (1 vote)
OPTION: False (3 votes)
OPTION: Adhukum mela punithamanadhu (3 votes)

22/11/22, 22:11 - Sanjuuu 🎓: POLL:
shd we remove viswaa?
OPTION: yes (7 votes)
OPTION: no (0 votes)

22/11/22, 22:11 - Harecharan CSE E Amrita CBE: POLL:
MRF na tyre ru viswa pudunguva Mayiru
OPTION: yes  (1 vote)
OPTION: hell yes (2 votes)
OPTION: nakku (3 votes)
OPTION: aamanda setha payale (1 vote)

22/11/22, 22:12 - Viswaa Ramasubramanian: POLL:
Sanjay is Master of Master and King of Kingssss
OPTION: Yes (4 votes)
OPTION: No (0 votes)
OPTION: Adhukum mela mass uh ku mass uh (2 votes)

22/11/22, 22:14 - Sanjuuu 🎓 removed you
22/11/22, 22:15 - Harecharan CSE E Amrita CBE added you
22/11/22, 22:15 - Harecharan CSE E Amrita CBE: welcome bac viswa
22/11/22, 22:15 - Harecharan CSE E Amrita CBE: I dealy missed you
22/11/22, 22:15 - Viswaa Ramasubramanian: So sweet of you my brotherrr
22/11/22, 22:16 - Harecharan CSE E Amrita CBE: nee illama na romba depress aagiten
22/11/22, 22:16 - Viswaa Ramasubramanian: POLL:
Sanjay na mass uh mathavengalam loosu
OPTION: Yes (3 votes)
OPTION: No (1 vote)

22/11/22, 22:26 - Viswaa Ramasubramanian: <Media omitted>
22/11/22, 22:26 - Viswaa Ramasubramanian: https://www.youtube.com/watch?v=jME2lTFeQRE
22/11/22, 23:40 - Gannu: select min(price) from book where b_name like"%m%" and price>(select min(price) from book where b_name like"%m%" and price>(select min(price) from book where b_name like"%m%")); 
select price from book b1 where 1=(select count(price) from book b2 where b2.price<b1.price);
23/11/22, 00:48 - Sooorrrr 🎓: Select * from Instructor I where I.IID in (select C.IID from Course C  where C.CDEPT="CS" and I.IID=C.IID );
select * from book b1 where 3=(select count(price) from book b2 where b2.price>b1.price);
select * from book b1 where 2=(select count(distinct price) from book b2 where b2.price>=b1.price);
select * from book b1 where b1.BNAME like "%M%" and 0=(select count(price) from book b2 where b2.price>b1.price and  b2.BNAME like "%M%");
23/11/22, 00:49 - Sooorrrr 🎓: Select * from Instructor where SALARY>ANY(Select SALARY from Instructor);
Select * from Instructor where SALARY>ALL(Select SALARY from Instructor);
23/11/22, 00:52 - Sooorrrr 🎓: <Media omitted>
23/11/22, 00:52 - Sooorrrr 🎓: <Media omitted>
23/11/22, 00:53 - Sooorrrr 🎓: <Media omitted>
23/11/22, 00:53 - Sooorrrr 🎓: <Media omitted>
23/11/22, 08:53 - Gannu: # q2 set 1 - b
select * from book b1 where 3=(select count(distinct price) from book b2 where b2.price>b1.price);   

# q2 set 2 - b
select * from book b1 where 2=(select count(distinct price) from book b2 where b2.price>b1.price); 

# q2 set 3 - a,b
select * from book b1 where 1=(select count(distinct price) from book b2 where b2.price<b1.price);
select * from book b1 where b_name like "%m%" and 2=(select count(distinct price) from book b2 where b_name like "%m%" and b2.price<b1.price)
23/11/22, 09:46 - Phoool Gobiiii  🎓: Bois.. Ma’am reached class @918939677049 @919566280078
23/11/22, 09:47 - Phoool Gobiiii  🎓: Come quick
23/11/22, 09:47 - Araviiii 🎓: Look back bro
23/11/22, 09:48 - Sanjuuu 🎓: neck pain bro
23/11/22, 14:23 - Harecharan CSE E Amrita CBE: Sir came come dast
24/11/22, 14:39 - Gannu: <Media omitted>
24/11/22, 15:52 - Sooorrrr 🎓: https://forms.office.com/pages/responsepage.aspx?id=o835AF4H5USqC6ujrdZTn-10rWv5aKRGlACbcT2xShJURFBCTkVQM0Q5UUtYRUVKSjFPN1FNWDBRRC4u
25/11/22, 10:55 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=yIN6k57OB3U
25/11/22, 10:55 - Harecharan CSE E Amrita CBE: SEE THIS GUYS WHILE SERIES
25/11/22, 10:55 - Harecharan CSE E Amrita CBE: *WHOLE
25/11/22, 19:34 - Sooorrrr 🎓: As we celebrate the 𝟯 𝘆𝗲𝗮𝗿 𝗔𝗻𝗻𝗶𝘃𝗲𝗿𝘀𝗮𝗿𝘆 of our Coding Contest this November, we bring to you 𝗡𝗼𝘁 𝗷𝘂𝘀𝘁 𝗮 𝗿𝗲𝗴𝘂𝗹𝗮𝗿 Coding Contest but,
- 𝟯𝘅 𝗟𝗲𝗮𝗿𝗻𝗶𝗻𝗴
- 𝟯𝘅 𝗢𝗽𝗽𝗼𝗿𝘁𝘂𝗻𝗶𝘁𝘆
- 𝟯𝘅 𝗥𝗲𝘄𝗮𝗿𝗱𝘀

| 𝐏𝐫𝐢𝐳𝐞 𝐌𝐨𝐧𝐞𝐲 & 𝐆𝐢𝐟𝐭 𝐕𝐨𝐮𝐜𝐡𝐞𝐫𝐬 𝐰𝐨𝐫𝐭𝐡- ₹ 90,000/- 💰
| 𝐅𝐫𝐞𝐞 𝐑𝐞𝐠𝐢𝐬𝐭𝐫𝐚𝐭𝐢𝐨𝐧 |

💡  REGISTER NOW - https://bit.ly/Coding-Contest3-ASE

Exclusive 𝗙𝗿𝗲𝗲 𝗕𝗲𝗴𝗶𝗻𝗻𝗲𝗿 𝗳𝗿𝗶𝗲𝗻𝗱𝗹𝘆 Coding Course & Certificates for Participants 
Language Used: c/c++/Java/Javascript/Python.

𝗗𝗮𝘁𝗲 𝗼𝗳 𝗖𝗼𝗻𝘁𝗲𝘀𝘁: 𝟯𝟬𝘁𝗵 𝗡𝗼𝘃𝗲𝗺𝗯𝗲𝗿 𝟮𝟬𝟮𝟮 𝗮𝘁 𝟮𝟭:𝟬𝟬 - 𝟮𝟯:𝟯𝟬
Eligibility- Open to All

𝗣𝗦: Non-coders can be coding-ready by taking free exclusive online coding courses designed by IIT Alumni and ICPC finalists.
25/11/22, 19:34 - Sooorrrr 🎓: <Media omitted>
25/11/22, 22:53 - Harecharan CSE E Amrita CBE: <Media omitted>
26/11/22, 09:23 - Viswaa Ramasubramanian: <Media omitted>
26/11/22, 09:24 - Araviiii 🎓: So from page number 1 to 17 in this book is the portions for P2
26/11/22, 09:25 - Araviiii 🎓: ?
26/11/22, 09:26 - Araviiii 🎓: I meant lecture no 1 to 17
26/11/22, 09:30 - Sooorrrr 🎓: Lectures 1 to 17
26/11/22, 10:44 - Sooorrrr 🎓: <Media omitted>
26/11/22, 10:45 - Araviiii 🎓: guys need help
26/11/22, 10:46 - Araviiii 🎓: wat is the shortcut key for task manager
26/11/22, 10:46 - Araviiii 🎓: in windows
26/11/22, 10:46 - Shesadriii 🎓: Ctrl , shift esc
26/11/22, 10:46 - Harecharan CSE E Amrita CBE: ctrl+shift+esc
26/11/22, 10:47 - Harecharan CSE E Amrita CBE: or ctrl+alt+del and select task manager
26/11/22, 13:11 - Gannu: <Media omitted>
26/11/22, 21:09 - Gannu: https://youtu.be/FKvnmxte98A
27/11/22, 00:10 - Phoool Gobiiii  🎓: https://www.ece.uvic.ca/~fayez/courses/ceng465/lab_465/project1/adders.pdf
27/11/22, 00:48 - Shesadriii 🎓: <Media omitted>
27/11/22, 00:52 - Sooorrrr 🎓: https://www.youtube.com/watch?v=b70ZQwci5sY
27/11/22, 00:54 - Phoool Gobiiii  🎓: https://www.gatevidyalay.com/tag/3-bit-ripple-carry-adder/#:~:text=Ripple%20Carry%20Adder%2D-,Ripple%20Carry%20Adder%20is%20a%20combinational%20logic%20circuit.,as%20n%2Dbit%20parallel%20adder.
27/11/22, 01:27 - Phoool Gobiiii  🎓: https://www.youtube.com/watch?v=WI3cY_CQN1Q
27/11/22, 10:53 - Sooorrrr 🎓: multiplexer
27/11/22, 10:53 - Sooorrrr 🎓: decoders
27/11/22, 10:53 - Sooorrrr 🎓: encoders
27/11/22, 10:53 - Sooorrrr 🎓: types of adder
27/11/22, 11:06 - Shesadriii 🎓: <Media omitted>
27/11/22, 14:39 - Gannu: https://www.youtube.com/watch?v=87VUsbcPEy0&list=PLvfKBrFuxD065AT7q1Z0rDAj9kBnPnL0l&index=11&ab_channel=SukantaNayakedu
27/11/22, 15:18 - Sooorrrr 🎓: <Media omitted>
27/11/22, 15:18 - Sooorrrr 🎓: <Media omitted>
27/11/22, 19:30 - Sanjuuu 🎓: bois?
27/11/22, 19:31 - Sanjuuu 🎓: did u start?
27/11/22, 19:32 - Sanjuuu 🎓: <Media omitted>
27/11/22, 19:34 - Sanjuuu 🎓: <Media omitted>
27/11/22, 19:34 - Sanjuuu 🎓: <Media omitted>
27/11/22, 19:36 - Sanjuuu 🎓: <Media omitted>
27/11/22, 21:08 - Sooorrrr 🎓: <Media omitted>
27/11/22, 21:09 - Shesadriii 🎓: <Media omitted>
27/11/22, 21:16 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=-rw8iIsAF5I
27/11/22, 21:16 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=-rw8iIsAF5Ihttps://www.youtube.com/watch?v=-rw8iIsAF5Ihttps://www.youtube.com/watch?v=-rw8iIsAF5I
27/11/22, 21:27 - Phoool Gobiiii  🎓: <Media omitted>
27/11/22, 21:46 - Sooorrrr 🎓: <Media omitted>
27/11/22, 21:46 - Sooorrrr 🎓: Solve the riddle
27/11/22, 21:51 - Phoool Gobiiii  🎓: https://www.theserverside.com/tip/Fix-these-10-common-examples-of-the-RuntimeException-in-Java
27/11/22, 22:36 - Shesadriii 🎓: <Media omitted>
27/11/22, 23:05 - Phoool Gobiiii  🎓: https://www.youtube.com/watch?v=r_MbozD32eo
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 10:58 - Sooorrrr 🎓: <Media omitted>
28/11/22, 12:36 - Harecharan CSE E Amrita CBE: Pongal da boyz come quick
28/11/22, 18:53 - Sooorrrr 🎓: <Media omitted>
28/11/22, 18:55 - Sanjuuu 🎓: https://youtu.be/0ic39PerRyM
28/11/22, 19:22 - Sooorrrr 🎓: Quiz posponed to tomorrow 7.30 pm
28/11/22, 19:22 - Sooorrrr 🎓: Lol
28/11/22, 20:54 - Shesadriii 🎓: <Media omitted>
28/11/22, 21:21 - Sooorrrr 🎓: <Media omitted>
28/11/22, 23:21 - Phoool Gobiiii  🎓: Longcontest3 - #5
28/11/22, 23:21 - Phoool Gobiiii  🎓: def stringMan(s):
    #@start-editable@

    l = len(s)
    if (l%2 == 0):
        s = s.upper()
    else:
        s = s.title()
    
    b = s.split(" ")
    b = "-".join(b)
    s = b



   #@end-editable@ 
    return s

s=input()
myString = stringMan(s)
print (myString)
28/11/22, 23:22 - Sooorrrr 🎓: Thanks
28/11/22, 23:22 - Phoool Gobiiii  🎓: LongContest3 #final
28/11/22, 23:22 - Phoool Gobiiii  🎓: def findMissing(N,stringOfRolls):
    missingStatus = "All Present"
    # Enter Your Code Here
    
    if len(stringOfRolls.split(" ")) == N:
        pass
    else:
        missingStatus = ""
        for i in range(1, N+1):
            if str(i) not in stringOfRolls:
                missingStatus += str(i)+" "
        missingStatus.strip()    
            
    return missingStatus


N=int(input())
stringOfRolls=input()
missingRoll=findMissing(N,stringOfRolls)
print(missingRoll)
29/11/22, 09:14 - Viswaa Ramasubramanian: <Media omitted>
29/11/22, 18:19 - Sooorrrr 🎓: <Media omitted>
29/11/22, 18:19 - Sooorrrr 🎓: <Media omitted>
29/11/22, 18:19 - Sooorrrr 🎓: <Media omitted>
29/11/22, 18:19 - Sooorrrr 🎓: <Media omitted>
29/11/22, 19:27 - Sanjuuu 🎓: <Media omitted>
29/11/22, 19:30 - Araviiii 🎓: <Media omitted>
29/11/22, 19:30 - Araviiii 🎓: how to solve these one?
29/11/22, 19:57 - Sanjuuu 🎓: Bois
29/11/22, 19:57 - Sanjuuu 🎓: All done?
29/11/22, 20:27 - Sooorrrr 🎓: <Media omitted>
29/11/22, 20:28 - Shesadriii 🎓: yeet
29/11/22, 20:56 - Sooorrrr 🎓: <Media omitted>
29/11/22, 21:43 - Sanjuuu 🎓: <Media omitted>
30/11/22, 07:41 - Sooorrrr 🎓: <Media omitted>
30/11/22, 07:41 - Sooorrrr 🎓: <Media omitted>
30/11/22, 07:41 - Sooorrrr 🎓: <Media omitted>
30/11/22, 08:10 - Sooorrrr 🎓: <Media omitted>
30/11/22, 14:59 - Sooorrrr 🎓: https://amritavishwavidyapeetham-my.sharepoint.com/:f:/g/personal/c_raghavachari_cb_amrita_edu/EgKd6pqQnP1HjnhaNk--qtwBdsAeLu1VIBPFrZUZepGncQ?e=MuuPaE
30/11/22, 16:18 - Sanjuuu 🎓: <Media omitted>
30/11/22, 16:21 - Shesadriii 🎓: <Media omitted>
30/11/22, 16:23 - Harecharan CSE E Amrita CBE: ithink c
30/11/22, 16:23 - Harecharan CSE E Amrita CBE: or d
30/11/22, 17:27 - Sanjuuu 🎓: C
30/11/22, 18:01 - Sanjuuu 🎓: <Media omitted>
30/11/22, 18:28 - Sanjuuu 🎓: <Media omitted>
30/11/22, 18:29 - Viswaa Ramasubramanian: ennadha da
30/11/22, 18:30 - Sanjuuu 🎓: <Media omitted>
30/11/22, 18:51 - Harecharan CSE E Amrita CBE: https://quizizz.com/join?gc=682678&source=liveDashboard
30/11/22, 18:51 - Harecharan CSE E Amrita CBE: guys join quickly
30/11/22, 19:20 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=HP5wapaQO4Q
30/11/22, 21:18 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: <Media omitted>
30/11/22, 21:31 - Sooorrrr 🎓: Loop solution is working
30/11/22, 21:31 - Sooorrrr 🎓: If condition is not
30/11/22, 22:41 - Araviiii 🎓: 1
30/11/22, 22:42 - Araviiii 🎓: 2
30/11/22, 22:42 - Araviiii 🎓: 3
30/11/22, 22:42 - Araviiii 🎓: 4
30/11/22, 22:45 - Sooorrrr 🎓: goal c:
    forall x:int.
    (x=3000)->((x<1000 and x>2000) or (not(x<1000)) and ((x>=1000)and(x<2000))and(x>2105))
    or(not(x<1000) and not((x>=1000)and(x<2000))and((x>=2000)and(x<5000))and(x>2222))
    or(not(x<1000)and not((x>=1000)and(x<2000))and not((x>=2000)and(x<5000)) and (x>=5000)and(x>2352))
30/11/22, 22:45 - Shesadriii 🎓: goal c:
    forall a:real.
    (a=500.0)->(
        ((a<1000.0)and(a>2000.0)) or
        ((not(a<1000.0)and (a>=1000.0 and a<2000.0))and(0.95*a>2000.0)) or
        ((not(a<1000.0)and not (a>=1000.0 and a<2000.0) and (a>=2000.0 and a<5000.0))and(0.9*a>2000.0)) or 
        ((not(a<1000.0)and not(a>=1000.0 and a<2000.0) and not(a>=2000.0 and a<5000.0) and (a>=5000.0)and(0.85*a>2000.0)))
    )
30/11/22, 22:45 - Phoool Gobiiii  🎓: goal c:
    forall x : real.
    x=2021.00-> ((x<1000.0 and x>2000.0) or 
    (not(x<1000.0) and (x>=1000.0 and x<2000.0) and x>2105.0) or 
    (not(x<1000.0) and not(x>=1000.0 and x<2000.0) and (x>=2000.0 and x<5000.0) and (x>2222.22)) or 
    (not(x<1000.0) and not(x>=1000.0 and x<2000.0) and not(x>=2000.0 and x<5000.0) and x>2352.94))
30/11/22, 22:46 - Shesadriii 🎓: EPPURRA
30/11/22, 22:46 - Sooorrrr 🎓: This message was deleted
30/11/22, 22:46 - Sanjuuu 🎓: 😦
30/11/22, 23:42 - Sooorrrr 🎓: <Media omitted>
30/11/22, 23:42 - Sooorrrr 🎓: intraloop vc
01/12/22, 09:23 - Araviiii 🎓: note the point guys
01/12/22, 09:23 - Araviiii 🎓: I think sir is literally talking to u guys only
01/12/22, 09:24 - Shesadriii 🎓: 😂
01/12/22, 16:08 - Araviiii 🎓: See u in room bois
01/12/22, 16:15 - Sanjuuu 🎓: Okay
01/12/22, 16:48 - Sooorrrr 🎓: Write assignment on carry look ahead adder and BCD adders and signed 4bit numbers, 1s complement and 2 s complement ,table and range and how to get 1 s complement and 2 s complement general formula
01/12/22, 16:48 - Sooorrrr 🎓: Submission on Friday
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 17:49 - Sooorrrr 🎓: <Media omitted>
01/12/22, 21:58 - Phoool Gobiiii  🎓: <Media omitted>
01/12/22, 22:37 - Shesadriii 🎓: class Person:
    def __init__(self,name,age):
        self.age=age
        self.name=name
    def printer(se):
        print(se.name," ",se.age)

p1=Person("Shreyas",18)
i=int(input("i:"))
arrObj=[]
for j in range (0,i):
    name=input("Name:")
    age=int(input("Age:"))
    arrObj.append(Person(name,age))
for i in arrObj:
    i.printer()
02/12/22, 14:01 - Sooorrrr 🎓: class A:
    def __init__(self,num=None):
        self.num = num
    def set_a(self,num):
        self.num=num
    def get_a(self):
        print(self.num)
    def __neg__(self):
        self.num=-self.num
        return self.num

#@end-editable@

ob=A() 
#set value
inp = int(input())
ob.set_a(inp)
#get value
ob.get_a();

#Calling operator overloaded function - to negate the value
-ob

#The value of a after calling operator overloading function - is
ob.get_a()
02/12/22, 14:38 - Gannu: <Media omitted>
02/12/22, 15:37 - Shesadriii 🎓: <Media omitted>
02/12/22, 18:06 - Shesadriii 🎓: <Media omitted>
02/12/22, 20:33 - Sooorrrr 🎓: <Media omitted>
03/12/22, 09:05 - Sooorrrr 🎓: https://www.youtube.com/playlist?list=PLdo5W4Nhv31b33kF46f9aFjoJPOkdlsRc
03/12/22, 09:45 - Phoool Gobiiii  🎓: https://learn.microsoft.com/en-GB/office/troubleshoot/access/database-normalization-description
03/12/22, 19:58 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:01 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:07 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:08 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:08 - Sooorrrr 🎓: <Media omitted>
03/12/22, 20:08 - Sooorrrr 🎓: <Media omitted>
03/12/22, 21:26 - Shesadriii 🎓: <Media omitted>
03/12/22, 22:29 - Sooorrrr 🎓: <Media omitted>
03/12/22, 22:29 - Sooorrrr 🎓: By shreyas
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 10:26 - Harecharan CSE E Amrita CBE: <Media omitted>
04/12/22, 12:23 - Sooorrrr 🎓: # str=input("Enter a string")
# d={}
# for i in str:
#     d[i]=str.count(i)
# print(d)
# for k,v in d.items():
#     print("Occurrences of",k,":",v)

class Amount():
    def __init__(self,amount=None):
        self.amount = amount
    def calculate(self):
        d = {}
        rupee,paisa=self.amount.split(".")
        rupee=int(rupee)
        paisa=int(paisa)
        d["rupees"]=rupee
        print(rupee,paisa)
        nt=rupee//1000
        rupee=rupee%1000
        nh=rupee//100
        rupee=rupee%100
        nf=rupee//50
        rupee=rupee%50
        ntw=rupee//20
        rupee=rupee%20
        nten=rupee//10
        rupee=rupee%10
        nfive=rupee//5
        rupee=rupee%5
        ntwo=rupee//2
        rupee=rupee%2
        nones=rupee//1
        rupee=rupee%1
        d["thousands"]=nt
        d["Hundreds"]=nh
        d["Fifties"]=nf
        d["Twenties"]=ntw
        d["Tens"]=nten
        d["Fives"]=nfive
        d["Twos"]=ntwo
        d["Ones"]=nones
        d["Paisa"]=paisa
        print(nt,nh,nf,ntw,nten,nfive,ntwo,nones)
        return d
    def __add__(self, other):
        d={}
        rupee1, paisa1 = self.amount.split(".")
        rupee1=int(rupee1)
        paisa1 = int(paisa1)
        rupee2,paisa2 = other.amount.split(".")
        rupee2 = int(rupee2)
        paisa2 = int(paisa2)
        if(paisa1+paisa2<100):
            d["rupees"]=rupee1+rupee2
            d["Paisa"]=paisa1+paisa2
        else:
            d["rupees"]=rupee1+rupee2+1
            d["Paisa"]=(paisa1+paisa2)-100
        return d
    def __lt__(self, other):
        amt1=float(self.amount)
        amt2=float(other.amount)
        if(amt1<amt2):
            return 1
        elif(amt1>amt2):
            return -1
        else:
            return 0
    def __sub__(self, other):
        d={}
        rupee1, paisa1 = self.amount.split(".")
        rupee1 = int(rupee1)
        paisa1 = int(paisa1)
        rupee2, paisa2 = other.amount.split(".")
        rupee2 = int(rupee2)
        paisa2 = int(paisa2)
        if(paisa1-paisa2>=0):
            d["rupees"] = rupee1 - rupee2
            d["Paisa"] = paisa1 - paisa2
        elif(paisa1-paisa2<0):
            d["rupees"] = rupee1 - rupee2-1
            d["Paisa"] = 100+(paisa1 - paisa2)
        return d

#Main function
str1=input("Enter Amount 1")
str2=input("Enter Amount 2")

amt1=Amount(str1)
dict1={}
dict1=amt1.calculate()
amt2=Amount(str2)
print(dict1)
dict2={}
dict2=amt2.calculate()
print(dict2)
dict3={}
dict3=amt1+amt2
print(dict3)
v=amt1<amt2
print(v)
dict4={}
if(v==1):
    dict4 = amt2 - amt1
    print(dict4)
elif(v==-1):
    dict4 = amt1 - amt2
    print(dict4)
else:
    print(0)
04/12/22, 14:05 - Gannu: class amount:
    def __init__(self,r=None,p=None):
        self.r = r
        self.p = p
    def countnew(self):
        c1000=self.r//1000
        self.r=self.r%1000
        c100=self.r//100
        self.r=self.r%100
        c50=self.r//50
        self.r=self.r%50
        c20=self.r//20
        self.r=self.r%20
        c10=self.r//10
        self.r=self.r%10
        c5=self.r//5
        self.r=self.r%5
        c2=self.r//2
        self.r=self.r%2
        c1=self.r//1
        print(c1000)
        print(c100)
        print(c50)
        print(c10)
        print(c5)
        print(c2)
        print(c1)

    def __add__(self, other):
        o=amount()
        o.r=self.r+other.r
        o.p=self.p+other.p  
        if(o.p>99):
            o.r+=1
            o.p=o.p%100
        return o

    def __sub__(self, other):
        o=amount()
        o.r=self.r-other.r
        o.p=self.p-other.p
        if(o.p<0):
            o.p=100+o.p
            o.r-=1  
        return o

    def __gt__(self,other):
        if(self.r>other.r):
            return True
        elif(self.r==other.r and self.p>other.p):
            return True
        else:
            return False
    def dis(self):
        print("r:",self.r)
        print("p:",self.p)         
obj=amount(1006,15)   
obj.countnew()   
obj1=amount(500,50)
obj2=amount(130,55)
obj3=obj1+obj2
obj3.dis()
if(obj1>obj2):
     obj4=obj1-obj2
else:
    obj4=obj2-obj1      
obj4.dis()
04/12/22, 14:12 - Shesadriii 🎓: # list=["hey","there","mom"]
# str="".join(list)
# print(str)
# print(type(str))


# thisset = {"apple", "banana", "cherry"}
# for x in thisset:
#     print(x)

#
# a=5
# b=5
# print(a==5)
# print(a is b)


# for x in "banana":
#     print(x)


# fruits = ["apple",
# "banana", "cherry"]
# for x in fruits:
#     if x == "banana":
#         break
# print(x)





#NAME BINDING
# def func():
#     print("Hi")
#
# a=func
# a()



# print(globals())
# def f(x,y):
#     s= 'foo'
#     print(locals())
# f(10,0.5)



#----------------------CLASSES ----------------------------
# class Person:
#
#     def __init__(self,name,age):
#         self.__age=age
#         self.__name=name
#     def printer(se):
#         print(se.__name," ",se.__age)
#
# p1=Person("Shreyas",18)
# i=int(input("i:"))
# arrObj=[]
# for j in range (0,i):
#     name=input("Name:")
#     age=int(input("Age:"))
#     arrObj.append(Person(name,age))
# for i in arrObj:
#     i.printer()
# setattr(p1,"roll",1)
# print(p1.roll)

# print(hasattr(p1,"age"))

# class Employee:
# # constructor
#     def __init__(self, name, sal):
#         self._name = name;
#         self.__sal = sal;
# emp = Employee("Ironman", 999000);
# print(emp._name)
# print(emp.__sal)






# class Point:
#     def __init__(self,a=None ,b=None):
#         self.a = a
#         self.b = b
#     def __str__(self):
#         str1=str(self.a)+" "+str(self.b)
#         return str1
#     def print1(self):
#         print(self.a,self.b)
#     def __add__(self, other):
#         ob= Point()
#         ob.a = self.a + other.a
#         ob.b = self.b+ other.b
#         return ob
# Ob1 = Point(1, 2)
# Ob2 = Point(2, 3)
# ob3=Ob1+Ob2
# print(ob3)





# import math
# class Point:
#     def __init__(self,a=None ,b=None):
#         self.a = a
#         self.b = b
#     def __str__(self):
#         str1=str(self.a)+" "+str(self.b)
#         return str1
#     def __sub__(self, other):
#         ob= Point()
#         ob.a = other.a - self.a
#         ob.b =other.b - self.b
#         return ob
#     def findDistance(self):
#         x=self.a*self.a
#         y=self.b*self.b
#         res=math.sqrt(x+y)
#         return res
#     def quadrant(self):
#         x=self.a
#         y=self.b
#         if(x>0 and y>0):
#             quad="1st Quadrant"
#         elif (x<0 and y>0):
#             quad="2nd Quadrant"
#         elif (x<0 and y<0):
#             quad="3rd Quadrant"
#         elif (x>0 and y<0):
#             quad="4th Quadrant"
#         else:
#             quad="0 - No quadrant"
#         return quad
#     def sloper(self,other):
#         if(self.b==other.b):
#             line="Horizontal Line"
#         elif(self.a==other.a):
#             line="Vertical Line"
#         elif((self.a==other.a) and (self.b==other.b)):
#             line="Not a line"
#         else:
#             line="Slanting Line"
#         return line
#
#
# a1=int(input("Enter x value for point 1:"))
# b1=int(input("Enter y value for point 1:"))
# a2=int(input("Enter x value for point 2:"))
# b2=int(input("Enter y value for point 2:"))
# Ob1 = Point(a1, b1)
# Ob2 = Point(a2, b2)
# ob3=Ob1-Ob2
# print("Distance",ob3.findDistance())
# print("Point 1 quadrant:",Ob1.quadrant())
# print("Point 2 quadrant:",Ob2.quadrant())
# print(Ob1.sloper(Ob2))



# s={"Shrey","Sresht","Sash","Sreevat"}
# print(s)



class Amount:
    def __init__(self,rupees=0,paise=0):
        self.rupees=rupees
        self.paise=paise
    def count1000(self):
        thousandCount=(self.rupees//1000)
        remainingRupees=self.rupees%1000
        self.rupees=remainingRupees
        return thousandCount
    def count100(self):
        hundredCount = (self.rupees // 100)
        remainingRupees = self.rupees % 100
        self.rupees = remainingRupees
        return hundredCount
    def count50(self):
        hundredCount = (self.rupees // 50)
        remainingRupees = self.rupees % 50
        self.rupees = remainingRupees
        return hundredCount
    def count20(self):
        hundredCount = (self.rupees // 20)
        remainingRupees = self.rupees % 20
        self.rupees = remainingRupees
        return hundredCount
    def count10(self):
        hundredCount = (self.rupees // 10)
        remainingRupees = self.rupees % 10
        self.rupees = remainingRupees
        return hundredCount
    def count5(self):
        hundredCount = (self.rupees // 5)
        remainingRupees = self.rupees % 5
        self.rupees = remainingRupees
        return hundredCount
    def count2(self):
        hundredCount = (self.rupees //2)
        remainingRupees = self.rupees % 2
        self.rupees = remainingRupees
        return hundredCount
    def count1(self):
        hundredCount = (self.rupees // 1)
        remainingRupees = self.rupees % 1
        self.rupees = remainingRupees
        return hundredCount
    def __add__(self, other):
        o=Amount()
        o.paise=self.paise+other.paise
        o.rupees=self.rupees+other.rupees
        o.rupees+=o.paise//100
        o.paise=100-o.paise%100
        return o
    def __sub__(self, other):
        o = Amount()
        if(self.rupees>other.rupees):
            o.rupees = self.rupees - other.rupees
            o.paise = self.paise - other.paise
            if(o.paise<0):
                o.paise=(o.paise%100)
                o.rupees=o.rupees-1
        elif(other.rupees>self.rupees):
            o.rupees = other.rupees - self.rupees
            o.paise = other.paise - self.paise
            if (o.paise < 0):
                o.paise = (o.paise % 100)
                o.rupees = o.rupees - 1
        else:
            if(self.paise>other.paise):
                o.rupees = other.rupees - self.rupees
                o.paise = self.paise - other.paise
            elif(other.paise>self.paise):
                o.rupees = other.rupees - self.rupees
                o.paise = other.paise - self.paise
            else:
                o.paise=0
                o.rupees=0
        return o
    def getRupee(self):
        return self.rupees
    def getPaise(self):
        return self.paise
rupees=int(input("Rupees for obj1:"))
paise=int(input("Paise for obj1:"))
amt=Amount(rupees,paise)
rupees1=int(input("Rupees for obj2:"))
paise1=int(input("Paise for obj2:"))
amt1=Amount(rupees1,paise1)

while True:
    choice = int(input("Choice:"))
    if choice==1:
        print("------------obj1------------")
        print("1000's count:",amt.count1000())
        print("100's count:",amt.count100())
        print("50's count:",amt.count50())
        print("20's count:",amt.count20())
        print("10's count:",amt.count10())
        print("5's count:",amt.count5())
        print("2's count:",amt.count2())
        print("1's count:",amt.count1())
        print("-------------obj2------------")
        print("1000's count:", amt1.count1000())
        print("100's count:", amt1.count100())
        print("50's count:", amt1.count50())
        print("20's count:", amt1.count20())
        print("10's count:", amt1.count10())
        print("5's count:", amt1.count5())
        print("2's count:", amt1.count2())
        print("1's count:", amt1.count1())
    elif choice==2:
        sum=amt+amt1
        x=str(sum.getRupee())+"."+str(sum.getPaise())
        x=float(x)
        print(x)
    elif choice==3:
        dif=amt-amt1
        x = str(dif.getRupee()) + "." + str(dif.getPaise())
        x = float(x)
        print(x)




# str=input("Please enter string:")
# dict={}
# for i in str:
#     dict[i]=str.count(i)
# for i,j in dict.items():
#     print("Occurence of ",i,":",j)
04/12/22, 14:36 - Shesadriii 🎓: <Media omitted>
04/12/22, 18:04 - Gannu: def set_a(self,inp):
        self.inp=inp
    def get_a(self):
        print(self.inp)
    def __neg__(self):
        self.inp=-self.inp
04/12/22, 18:29 - Sanjuuu 🎓: Bois
04/12/22, 18:29 - Sanjuuu 🎓: Where?
04/12/22, 20:30 - Araviiii 🎓: <Media omitted>
04/12/22, 22:47 - Araviiii 🎓: This message was deleted
04/12/22, 22:49 - Araviiii 🎓: <Media omitted>
04/12/22, 22:58 - Araviiii 🎓: they will definitely ask SET bcoz it contains exception case
04/12/22, 22:59 - Sooorrrr 🎓: Exception case?
05/12/22, 00:33 - Gannu: class time:
    def __init__(self,t1,t2):
        self.t1 = t1
        self.t2 = t2
    def calc(self):
        s1=self.t1.split(':')
        s2=self.t2.split(':')
        if(int(s2[0])>int(s1[0])):
            h=int(s2[0])-int(s1[0])
            m=int(s2[1])-int(s1[1])
            if(m<0):
                m+=60
                h-=1 
        else:
            h=int(s2[0])-int(s1[0])
            m=int(s2[1])-int(s1[1])
            h+=24
            if(m<0):
                m+=60
                h-=1
        print(h,":",m)

time1=input("enter time 1: ")
time2=input("enter time 2: ")
ob=time(time1,time2) 
ob.calc()
05/12/22, 00:41 - Gannu: class time:
    def __init__(self,t1,t2):
        self.t1 = t1
        self.t2 = t2
    def calc(self):
        s1=self.t1.split(':')
        s2=self.t2.split(':')
        if(int(s2[0])>int(s1[0])):
            h=int(s2[0])-int(s1[0])
            m=int(s2[1])-int(s1[1])
            if(m<0):
                m+=60
                h-=1 
        else:
            h=int(s2[0])-int(s1[0])
            m=int(s2[1])-int(s1[1])
            h+=24
            if(m<0):
                m+=60
                h-=1
        print(h,":",m)

time1=input("enter time 1: ")
time2=input("enter time 2: ")
ob=time(time1,time2) 
ob.calc()
05/12/22, 00:41 - Sooorrrr 🎓: class Time:
    def __init__(self,starttime,endtime):
        self.starttime = starttime
        self.endtime = endtime
    def calculate(self):
        h1,m1=starttime.split(':')
        h2,m2=endtime.split(':')
        h1=int(h1)
        h2=int(h2)
        m1=int(m1)
        m2=int(m2)
        print(h1,h2)
        print(m1,m2)
        if(h1==h2):
            print("System Utilization Time::",h1-h2,"hours:",m2-m1,"minutes")
        elif(h1<h2):
            if(m1<=m2):
                print("System Utilization Time::",h2 - h1, "hours:", m2 - m1, "minutes")
            else:
                print("System Utilization Time::",h2-h1-1,"hours:",60-(m1-m2), "minutes")
        else:
            if(m1<=m2):
                print("System Utilization Time::",24-(h1-h2), "hours:",m2-m1,"minutes")
            else:
                print("System Utilization Time::",24-(h1-h2)-1,"hours:",60-(m1-m2),"minutes")

#main function to run
starttime = input("Enter start time: ")
endtime = input("Enter end time: ")
print("Start time: ", starttime)
print("End time: ", endtime)
time=Time(starttime,endtime)
time.calculate()
05/12/22, 18:01 - Harecharan CSE E Amrita CBE: ALL POST THEIR QUESTIONS HERE
05/12/22, 18:01 - Harecharan CSE E Amrita CBE: MINE:
05/12/22, 18:01 - Harecharan CSE E Amrita CBE: R(ABCD) AB->CD,C->A,D->B NF?
05/12/22, 18:03 - Harecharan CSE E Amrita CBE: CANFORM OF R(ABC) A->BC,B->C,A->B,AB->C
05/12/22, 18:38 - Harecharan CSE E Amrita CBE: <Media omitted>
05/12/22, 19:00 - Sooorrrr 🎓: <Media omitted>
05/12/22, 19:08 - Sanjuuu 🎓: What is the answer
05/12/22, 22:14 - Sanjuuu 🎓: <Media omitted>
05/12/22, 22:15 - Araviiii 🎓: 66 pages -aa?
05/12/22, 22:19 - Shesadriii 🎓: https://youtu.be/VyzKDc2GyW4
05/12/22, 22:35 - Sanjuuu 🎓: <Media omitted>
05/12/22, 22:35 - Sanjuuu 🎓: <Media omitted>
05/12/22, 22:37 - Sanjuuu 🎓: <Media omitted>
05/12/22, 23:01 - Sanjuuu 🎓: <Media omitted>
05/12/22, 23:45 - Shesadriii 🎓: <Media omitted>
05/12/22, 23:45 - Shesadriii 🎓: <Media omitted>
06/12/22, 08:37 - Sooorrrr 🎓: <Media omitted>
06/12/22, 08:37 - Sooorrrr 🎓: <Media omitted>
06/12/22, 08:37 - Sooorrrr 🎓: <Media omitted>
06/12/22, 08:40 - Gannu: <Media omitted>
06/12/22, 09:08 - Viswaa Ramasubramanian: https://www.youtube.com/watch?v=cgXovIhT6GI
06/12/22, 09:20 - Araviiii 🎓: {AB->CD , BC->D} 

guys need help 

find the Extraneous for the above FD.
06/12/22, 09:38 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:38 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:38 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:46 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:46 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:47 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:47 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:47 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:47 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:48 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:52 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:52 - Sooorrrr 🎓: <Media omitted>
06/12/22, 09:52 - Sooorrrr 🎓: <Media omitted>
06/12/22, 10:23 - Sooorrrr 🎓: <Media omitted>
06/12/22, 10:23 - Sooorrrr 🎓: <Media omitted>
06/12/22, 10:23 - Sooorrrr 🎓: <Media omitted>
06/12/22, 11:14 - Phoool Gobiiii  🎓: <Media omitted>
06/12/22, 12:18 - Gannu: select food_code,food_description from food where food_code in(select food_code from member_dinner_food group by food_code having count(food_code)>2);
06/12/22, 12:48 - Harecharan CSE E Amrita CBE: select distinct(m1.member_no) , m1.food_code, f1.food_description from member_dinner_food m1, food f1 where m1.food_code in (select m1.food_code from member_dinner_food m1 group by food_code having count(food_code)>1);
06/12/22, 18:06 - Sooorrrr 🎓: <Media omitted>
06/12/22, 18:06 - Sooorrrr 🎓: <Media omitted>
06/12/22, 20:24 - Viswaa Ramasubramanian: <Media omitted>
06/12/22, 20:41 - Viswaa Ramasubramanian: <Media omitted>
06/12/22, 20:56 - Sooorrrr 🎓: <Media omitted>
06/12/22, 20:56 - Sooorrrr 🎓: <Media omitted>
06/12/22, 20:56 - Sooorrrr 🎓: <Media omitted>
06/12/22, 20:57 - Sooorrrr 🎓: <Media omitted>
06/12/22, 21:58 - Harecharan CSE E Amrita CBE: <Media omitted>
06/12/22, 22:20 - Sooorrrr 🎓: goal c:
    forall u:real.
    (u=150.0)->(u<=50.0 and 0.5*u=112.5)or(not(u<=50.0) and u>50.0 and u<=150.0 and 0.75*u=112.5)
    or(not(u<=50.0) and not(u>50.0 and u<=150.0) and u>150.0 and u<=250.0 and 1.2*u=112.5) or
    (not(u<=50.0) and not(u>50.0 and u<=150.0) and not(u>150.0 and u<=250.0) and u>250.0 and 1.5*u=112.5)
06/12/22, 22:34 - Sooorrrr 🎓: goal c:
    forall c,a:real.
    (c=300.0)->(c<=100.0 and 200.0=315.0) or (not(c<=100.0) and c>100.0 and c<=150.0 and 0.6*c=315.0)
    or (not(c<=100.0) and not(c>100.0 and c<=150.0) and c>150.0 and c<=200.0 and c*0.5=315.0)or
    (not(c<=100.0) and not(c>100.0 and c<=150.0) and not(c>150.0 and c<=200.0) and c>200.0 and 0.4*c=315.0)
07/12/22, 09:12 - Sanjuuu 🎓: <Media omitted>
07/12/22, 09:12 - Sanjuuu 🎓: this refers to wp right?
07/12/22, 09:14 - Sooorrrr 🎓: Yep
07/12/22, 13:14 - Araviiii 🎓: <Media omitted>
07/12/22, 13:14 - Araviiii 🎓: <Media omitted>
07/12/22, 17:02 - Viswaa Ramasubramanian: 11 12 13a 13b 15 till slide 40
07/12/22, 17:02 - Viswaa Ramasubramanian: 14 is for ur endsem
07/12/22, 17:02 - Viswaa Ramasubramanian: Java ppts
07/12/22, 17:02 - Araviiii 🎓: Share the ppt bro
07/12/22, 17:03 - Viswaa Ramasubramanian: Adhu inime dhan edhukanum da
07/12/22, 17:03 - Viswaa Ramasubramanian: Idhu naa munnadi type panni vachirindhan
07/12/22, 17:03 - Araviiii 🎓: Okie
07/12/22, 17:03 - Viswaa Ramasubramanian: https://amritavishwavidyapeetham-my.sharepoint.com/:f:/g/personal/rr_sathiya_cb_amrita_edu/Eiu3_vgPtp9OnQen_THsb2ABczU1Ju1-nfXWprtZdZx77A?e=giRKVW
07/12/22, 17:52 - Araviiii 🎓: This message was deleted
07/12/22, 17:52 - Araviiii 🎓: This message was deleted
07/12/22, 17:54 - Araviiii 🎓: hey send the files bro, the link is not working for me
07/12/22, 17:55 - Sooorrrr 🎓: <Media omitted>
07/12/22, 17:55 - Sooorrrr 🎓: <Media omitted>
07/12/22, 17:56 - Sooorrrr 🎓: <Media omitted>
07/12/22, 17:56 - Sooorrrr 🎓: <Media omitted>
07/12/22, 18:03 - Sooorrrr 🎓: <Media omitted>
07/12/22, 18:15 - Gannu: <Media omitted>
07/12/22, 18:33 - Sooorrrr 🎓: import java.util.*;
public class Main {
    public static void main(String args[]) {
        Student[] s1=new Student[3];
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<3;i++) {
            System.out.println("Enter Student id");
            int id = sc.nextInt();
            System.out.println("Enter Student name");
            String name = sc.next();
            System.out.println("Enter Student age");
            int age = sc.nextInt();
            System.out.println("Enter Student marks");
            int marks = sc.nextInt();
            s1[i] = new Student(id, name, age);
            s1[i].setMarks(marks);
        }

        for(int i=0;i<3;i++){
            s1[i].print();
        }
        
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Student {
    private int id;
    private String name;
    private int age;
    private int marks;
    public Student(){
        System.out.println("Hello Student");
    }
    public Student(int id,String name,int age){
        this();
        this.id=id;
        this.name=name;
        this.age=age;
    }
    public void setMarks(int marks) {
        this.marks = marks;
    }

    public void print(){
        System.out.println(this.id+" "+this.name+" "+this.age+" "+this.marks);
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: import java.util.*;
public class Main {
    public static void main(String args[]) {
        Teacher t1=new Teacher();
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter name:");
        String name=sc.next();
        t1.setName(name);
        System.out.println("Enter age:");
        int age=sc.nextInt();
        t1.setAge(age);
        System.out.println("Enter gender:");
        String gender=sc.next();
        t1.setGender(gender);
        System.out.println("Enter Designation :");
        String Designation=sc.next();
        t1.setDesignation(Designation);
        System.out.println("Enter Salary :");
        int Salary=sc.nextInt();
        t1.setSalary(Salary);
        System.out.println("The records are as follows");
        t1.printp();
        t1.printT();
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Person {
    private String name;
    private int age;
    private String gender;

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }
    public void printp(){
        System.out.println(this.name +" " +this.age+" "+this.gender+" ");
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Teacher extends Person{
    private String designation;
    private int salary;
    public Teacher(){
        System.out.println("Hello Teacher");

    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public void setSalary(int salary) {
        this.salary = salary;
    }
    public void printT(){
        System.out.println(designation+" "+salary);
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: import java.util.*;
public class Main {
    public static void main(String args[]) {
//        Teacher t1=new Teacher();
//
//
//        Scanner sc=new Scanner(System.in);
//        System.out.println("Enter name:");
//        String name=sc.next();
//        t1.setName(name);
//        System.out.println("Enter age:");
//        int age=sc.nextInt();
//        t1.setAge(age);
//        System.out.println("Enter gender:");
//        String gender=sc.next();
//        t1.setGender(gender);
//        System.out.println("Enter Designation :");
//        String Designation=sc.next();
//        t1.setDesignation(Designation);
//        System.out.println("Enter Salary :");
//        int Salary=sc.nextInt();
//        t1.setSalary(Salary);
//        System.out.println("The records are as follows");
//        t1.printp();
//        t1.printT();
//        ABC obj=new Test();
//        ABC obj1=new ABC();
//        Test obj2=new Test();
////        obj.xyz();
//        obj.disp();
//        obj.abc();
//        obj1.disp();
//        obj2.disp();
//        obj2.xyz();
        Bike o =new over();//upcasting
        over obj =(over) new Bike();//downcasting
        over o1=new over();
        Bike b1=new Bike();

        o.print();
        System.out.println(o1 instanceof over);
        System.out.println(o1 instanceof Bike);
        System.out.println(b1 instanceof Bike);
        System.out.println(b1 instanceof over);
        System.out.println(o.s);
        System.out.println(Bike.a());
        System.out.println(over.a());
        o1.b();
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Bike {
    int s=1;
    static int a(){
        System.out.println("hi");
        return 10;
    }
    public void print(){
        System.out.println(s);

    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class over extends  Bike {
    int s=2;
    void b(){
        System.out.println(super.s);
    }
    static int a(){
        System.out.println("hi");
        return 20;
    }
    public void print(){
        System.out.println(s);
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Student {
    private int id;
    private String name;
    private int age;
    private int marks;
    public Student(){
        System.out.println("Hello Student");
    }
    public Student(int id,String name,int age){
        this();
        this.id=id;
        this.name=name;
        this.age=age;
    }
    public void setMarks(int marks) {
        this.marks = marks;
    }

    public void print(){
        System.out.println(this.id+" "+this.name+" "+this.age+" "+this.marks);
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Person {
    public String name;
    private int age;
    private String gender;

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }
    public void printp(){
        System.out.println(this.name +" " +this.age+" "+this.gender+" ");
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class ABC {
    protected void disp() {
        System.out.println("disp() method of parent class");
    }
    public void abc() {
        System.out.println("abc() method of parent class");
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Test extends ABC{
    public void disp(){
        System.out.println("disp() method of child class");
    }
    public void xyz(){
        System.out.println("xyz() method of child class");
    }
    public static void main(String[] args){
        ABC obj=new Test();
//        obj.xyz();
        obj.disp();
        obj.abc();
    }
}
07/12/22, 18:33 - Sooorrrr 🎓: public class Teacher extends Person{
    private String designation;
    private int salary;

    public Teacher(){
        System.out.println("Hello Teacher");

    }
    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public void setSalary(int salary) {
        this.salary = salary;
    }
    public void setName(String name) {
        this.name = name;
        System.out.println("Hello Teacher " + name);
    }
    public void printT(){
        System.out.println(designation+" "+salary);
    }
}
07/12/22, 19:15 - Sooorrrr 🎓: public abstract class Shape1 {


    public abstract double area();
    public abstract double perimeter();

}
07/12/22, 19:15 - Sooorrrr 🎓: import java.util.Scanner;
public class circle1 extends Shape1 {

    private int radius;

    public void setRadius(int radius) {
        this.radius = radius;
    }
    public int getRadius() {
        return radius;
    }
    @Override
    public double area() {

        return 3.14*radius*radius;

    }

    @Override
    public double perimeter() {
        return 3.14*2*radius;
    }
    public static void main(String args[]){
        int radius;
        System.out.println("Enter radius");
        Scanner sc = new Scanner(System.in);
        radius = sc.nextInt();
        circle1 c1=new circle1();
        c1.setRadius(radius);
        System.out.println(c1.getRadius());
        System.out.println(c1.area());
        System.out.println(c1.perimeter());
    }

}
07/12/22, 19:15 - Sooorrrr 🎓: public class rectangle1 extends Shape1 {


    @Override
    public double area() {
        return 0;
    }

    @Override
    public double perimeter() {
        return 0;
    }
}
07/12/22, 19:16 - Sooorrrr 🎓: <Media omitted>
07/12/22, 19:20 - Sanjuuu 🎓: bro what am I supposed to ask mam???
07/12/22, 19:20 - Sanjuuu 🎓: shrey bro
07/12/22, 19:20 - Shesadriii 🎓: Java Ready Reference
07/12/22, 19:20 - Shesadriii 🎓: Is it there or not ?
07/12/22, 19:20 - Harecharan CSE E Amrita CBE: illa da
07/12/22, 19:20 - Shesadriii 🎓: <Media omitted>
07/12/22, 19:21 - Harecharan CSE E Amrita CBE: ok da ill wait
07/12/22, 19:21 - Harecharan CSE E Amrita CBE: chanjay u ask and tell us
07/12/22, 19:22 - Sanjuuu 🎓: <Media omitted>
07/12/22, 22:39 - Gannu: <Media omitted>
07/12/22, 23:13 - Sanjuuu 🎓: <Media omitted>
07/12/22, 23:14 - Sanjuuu 🎓: <Media omitted>
07/12/22, 23:16 - Sanjuuu 🎓: <Media omitted>
08/12/22, 09:17 - Sanjuuu 🎓: <Media omitted>
08/12/22, 09:17 - Sanjuuu 🎓: answer is s=2^i
08/12/22, 09:18 - Sanjuuu 🎓: invariant that is
08/12/22, 09:19 - Sanjuuu 🎓: <Media omitted>
08/12/22, 09:38 - Sanjuuu 🎓: final class cammot be inherited right?
08/12/22, 09:39 - Sanjuuu 🎓: can a final class inherit another class?
08/12/22, 10:15 - Harecharan CSE E Amrita CBE: final class cannot be inherited
08/12/22, 10:15 - Harecharan CSE E Amrita CBE: bt it can extend some other classes
08/12/22, 10:31 - Sanjuuu 🎓: 👍
08/12/22, 12:11 - Sooorrrr 🎓: package Newpack;

public class THREADS extends Thread{

    public void print(){
        for(int i=6; i<10;i++){
            System.out.println("A thread started"+i);
        }
    }
    public void read(){

        for(int i=0; i<4;i++){
            System.out.println(currentThread().getId()+" "+i+"  "+currentThread().getPriority());
//            currentThread().setPriority(MIN_PRIORITY);
//            currentThread().setName("Tiger"+i);
//            System.out.println(currentThread().getName());
        }
    }
    public void run(){

        read();
        super.run();
    }
    public static  void main(String[] args){
//        THREADS t1= new THREADS();
//        THREADS t2= new THREADS();
//        t1.start();
//        t1.print();
//        t1.read();
//        t1.print();
//        t2.read();
        for(int i=0;i<4;i++){
            THREADS t1=new THREADS();
            if(i==3){
                t1.setPriority(MAX_PRIORITY);
                t1.start();
            }else if(i==2) {
                t1.setPriority(MIN_PRIORITY);
                t1.start();
            }
            else{
                t1.start();
            }

        }


    }
}
08/12/22, 12:35 - Harecharan CSE E Amrita CBE: <Media omitted>
08/12/22, 12:53 - Sooorrrr 🎓: package Pack;

public class Multithreading extends Thread{
    private int n;
    public Multithreading(int n){
        this.n=n;
    }
    @Override
    public void run() {
        for(int i = 1; i <4; i++) {
            System.out.println(i+" from thread"+n);
            if(n==3){
                throw  new RuntimeException();
            }
            try {
                Thread.sleep(500);
            }
            catch(InterruptedException e){
            }
        }
    }
    public static void main(String[] args) {
        for(int i = 0; i <5;i++){

            Multithreading mt = new Multithreading(i);
            mt.start();
        }
    }

}
08/12/22, 12:56 - Sooorrrr 🎓: package Pack;

public class Multithreading implements Runnable{
    private int n;
    public Multithreading(int n){
        this.n=n;
    }
    @Override
    public void run() {
        for(int i = 1; i <4; i++) {
            System.out.println(i+" from thread"+n);
       
            try {
                Thread.sleep(500);
            }
            catch(InterruptedException e){
            }
        }
    }
    public static void main(String[] args) {
        for(int i = 0; i <5;i++){

            Multithreading mt = new Multithreading(i);
            Thread mythread = new Thread(mt);
            mythread.start();
        }
    }

}
08/12/22, 13:18 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:19 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:20 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:21 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:23 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:24 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:24 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:35 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:40 - Sooorrrr 🎓: <Media omitted>
08/12/22, 13:44 - Harecharan CSE E Amrita CBE: Method overloading: - Compiletime poly
change in:
Number/ Type/ Order of Arguments


Inheritance - "IS-A" Relationship
-Overriding - runtime poly
-Code reusability 

Generalization
Generalization is the process of extracting shared characteristics from two or more classes, and combining them into a generalized superclass. Shared characteristics can be attributes, associations, or methods.

Specialization
Find an existing class that already implements some of the desired chars.
- Inherit it to a new class and add unique properties

Subtyping (Extensions)
-derived class is behaviourally compatible with the base class
-Behaviourally compatible means that base class can be replaced by the derived class

class sub-name extends sup-name
{

}

Rules for inherited method:
-> Methods declared public in a superclass also must be public in sub
-> Methods declared protected in a superclass must be protected/ public in sub. NOT PRIVATE
-> Methods declared in private ain't inherited at all.

TYPES of Inheritance:
->Single - single baseclass <= single derived class
->Mutilevel - single base class+ single derived class + multiple intermediate base classes
->Hierarchical - one base class + multiple subclass

->Multiple
->Hybrid

*In java multiple and hybrid can be achieved only via INTERFACE

for every class in java there exist super class: java.lang.Object

Dynamic Method Dispatch
->assign the base class reference to a child class obj
eg: <parentclass_name> OBJ =  new <childclass_name>();

Visibility

public> protected> default> private

Polymorphism:
we can create functions or reference variables which behaves differently

Types of POLY:
-Coercion :- Implicit type conversion
-Overloading :- a single identifier denotes several abstractions

- Subtype:-
-> a type can serve as another type's subtype
->Widening
  -aka upcasting
  -The conversion of a subtype to one of its supertypes is called widening. 
->Narrowing
  -aka downcasting
  -The conversioning of a supertype to one of its subtypes is called narrowing
  -Narrowing requires a proper explicit cast

Upcasting:

REFERENCE <parentclass> and OBJECT <childclass>
eg:
  class A{}
  class B extends A{}
  A a=new B();//upcasting
-> ACCESS: Parents own method and childs overridden methods

BINDING
• Connecting a method call to the method body is known as binding.
• There are two types of binding
  – Static Binding (also known as Early Binding):Object type resolved by compiler - private, final or static method
  – Dynamic Binding (also known as Late Binding):Object type resolved at runtime  -

DOWNCASTING:
eg:
Parent p = new Child(); //first upcast
Child c =(Child) p;     // use the upcasted obj to downcast


------------------------------------------------------------------------------------------------------------------

Process is a Code, data, and stack
– Usually (but not always) has its own address space (An address space is a range of valid addresses in memory that are available for a program or process.)

Process creation:
->Parent process creates children processes, which, in turn create other processes, forming a tree of processes
->process identified and managed via a process identifier (pid)

Resource sharing options
– Parent and children share all resources
– Children share subset of parent’s resources
– Parent and child share no resources

Execution options
– Parent and children execute concurrently
– Parent waits until children terminate

• Conditions that terminate processes can be
– Voluntary : Normal exit, Error exit
– Involuntary : Fatal error, Killed by another process

Processes in the OS
- 2 layers
- Lowest layer: handles interrupts/scheduling
- Above layer: sequential processes
		-> Processes tracked in the process table (Process Control Block)
		-> Each process has a process table entry

Thread:
-Independent stream of instructions
-Basic unit of CPU Utilization
-DS used is Thread Control Block

-Contains:
 ->Thread ID
 ->A register set (inc. Program Counter PC)
 ->An execution Stack 
 
-A thread shares :
		->Code, data and heap section
		-> OS resourcse (open files and signals)
 with its sibling threads

-no memory protection

USES:
- Allow a single application to do many things at once: multitasking
– Simpler programming model
– Less waiting

-faster to create or destroy

Types:
User level:
+ No need for kernel support
- May be slower than kernel threads
- Harder to do non-blocking I/O

Kernel-level :
+ More flexible scheduling
+ Non-blocking I/O
- Not portable

Thread Scheduling 
-Allows to:
-> assign priorities to processes
->CPU to select processes with higher priority

– Policy set by what priorities are assigned to processes

Userlevel:

-Kernel picks a process to run next
-Run-time system (at user level) schedules threads
  –> Run each thread for less than process quantum
  –> Example: processes get 40ms each, threads get 10ms each

Kernel level:

-Kernel schedules each thread
  –> No restrictions on ordering
  –> May be more difficult for each process to specify priorities

Thread Scheduler in JAVA:
-A part of the JVM
-no guarantee that which runnable thread will be chosen to run by the thread scheduler.
-Only one thread at a time can run in a single process.

Preemptive scheduling vs time slicing
– Preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence.
– Time slicing, a task executes for a predefined slice of time and then re-enters the pool of ready tasks. The scheduler then determines which task should execute next, based on priority and other factors.


•Each thread have a priority
• Priorities are represented by a number between 1 and 10

• 3 constants defined in Thread class:
– public static int MIN_PRIORITY - 1
– public static int NORM_PRIORITY - 5
– public static int MAX_PRIORITY - 10

States of thread in java

– new: just created but not started
– runnable: created, started, and able to run
– blocked: created and started but unable to run because it is waiting for some event to occur
– dead: thread has finished or been stopped

Portability issues (JVM)
in Linux:
– A thread runs to completion or until a higher priority thread
becomes ready
– Preemption occurs (processor is given to the higher-priority
thread)

On Win32:
– Threads are timesliced
  -> Thread given quantum of time to execute
  -> Processor then switched to any threads of equal priority
– Preemption occurs with higher and equal priority threads

Challenges in programming for multi-core chips:
• Identifying tasks - Examining applications to find activities that can be performed concurrently.
• Balance - Finding tasks to run concurrently that provide equal value. I.e. don't waste a thread on trivial tasks.
• Data splitting - To prevent the threads from interfering with one another.
• Data dependency - If one task is dependent upon the results of another, then the tasks need to be synchronized to assure access in the proper order.
• Testing and debugging - Inherently more difficult in parallel processing situations, as the race conditions become much more complex and difficult to identify.


Creating threads in java:
-user-level threads which connects to JVM kernel-level threads 
(pthreads in UNIX or Win32 threads in windows.)

-2 Ways:
– Option 1: Extend the Thread class and override the public run method
– Option 2: Implement a runnable interface with a public run method


OPTION 1: EXTEND
```
package practice;

class PrintNumbers1 extends Thread {
	public void printNumbers() {
		for (int i = 0; i < 9; i++) {
			System.out.println(Thread.currentThread().getId() + ": " + i);
		}
	}

	@Override
	public void run() {
		printNumbers();
// the super doesn't anything,
// but just for the courtesy and good practice
		super.run();
	}

public class Thread2 {
	public static void main(String[] args) {
		System.out.println("Main ThreadId: " +
		Thread.currentThread().getId());
		for(int i=0; i<3; i++) {
		new PrintNumbers1().start(); // don't call run! (if you want a separate thread)
		}
		}

}

```


OPTION 2: RUNNABLE

```
package practice;

import java.io.*;

class PrintNumbers implements Runnable {
	public void printNumbers() {
		for (int i = 0; i < 9; i++) {
			System.out.println(Thread.currentThread().getId() + ": " + i);
		}
	}

	@Override
	public void run() {
		printNumbers();
	}
}

public class Inheritance1 {

	public static void main(String[] args) {
		//

		System.out.println("Main ThreadId: " + Thread.currentThread().getId());
		for (int i = 0; i < 3; i++) {
			Thread t1=new Thread(new PrintNumbers());
			t1.start(); // don't call run!
	}

	}
}
```




Thread related methods:
– Constructors
	• Thread() - Creates a thread with an auto-numbered name of format Thread-1, Thread-2...
	• Thread( threadName ) - Creates a thread with name

– run
	• Does “work” of a thread – What does this mean?
	• Can be overridden in subclass of Thread or in Runnable object (more on interface Runnable elsewhere)

– start
	• Launches thread, then returns to caller
	• Calls run
	• Error to call start twice for same thread

The Thread Class:

+Thread() -> Creates a default thread
+Thread(task: Runnable) -> Creates thread for a specified task 
+start(): void -> Starts the thread that causes the run() method to be invoked by the JVM
+isAlive(): boolean ->Tests whether the thread is currently running.
+setPriority(p: int): void ->Sets priority p (ranging from 1 to 10) for this thread
+join(): void -> Waits for this thread to finish
+sleep(millis: long): void ->Puts the runnable object to sleep for a specified time in milliseconds
+yield(): void ->Causes this thread to temporarily pause and allow other threads to execute.
+interrupt(): void ->Interrupts this thread

Advantage of Using Runnable
• remember - can only extend one class
• implementing runnable allows class to extend something else

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Abstract Classes
• An Abstract class is a conceptual
class.
• An Abstract class cannot be
instantiated – objects cannot be
created.
• Abstract classes provides a common
root for a group of classes, nicely tied
together in a package:

Syntax
public abstract class <ClassName>

• A class with one or more abstract methods is
automatically abstract and it cannot be
instantiated.
• A class declared abstract, even with no abstract
methods in it.
• A subclass of an abstract class can be
instantiated if it overrides all abstract methods and
implements them.
• A subclass that does not implement all of the
superclass abstract methods in it, then the
subclass cannot be instantiated.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Packages
• Packages are containers for classes that are used to keep the class namespace compartmentalized.

• simply include a package command as the first statement in a Java source file.
• Any classes declared within that file will belong to the specified package.
• The package statement defines a name space in which classes are stored.
• If you omit the package statement, the class names are put into the default package, which has no name.
• While the default package is fine for short, sample programs, it is inadequate for real applications. 

• You can create a hierarchy of
packages.
Syntax
package pkg1[.pkg2[.pkg3]];

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Interface: - public/ static/ final
->conceptual entity similar to a Abstract class.
–> But can contain only constants (final variables) and abstract method (no implementation)

• One class can implement many interfaces
• One interface can be implemented by many
classes – But can contain only constants (final variables) and
abstract method (no implementation) - Different from
Abstract classes


*Normally, in order for a method to be called from one class to another, both classes need to be present at compile time
functionality gets pushed up higher and higher in the class hierarchy so that the mechanisms will be available to more and more subclasses. 
Can be avoided by interface.
INTERFACES designed to support dynamic method resolution at run time. 

– They disconnect the definition of a method or set of methods from the inheritance hierarchy.
– Since interfaces are in a different hierarchy from classes, it is possible for classes that are unrelated in terms of the class hierarchy to implement the same interface. 


final variable

Modifier static final dataType variableName = value; //initialized final variable
Or
modifier static final dataType variableName; //blank final variable

*We must initialize the blank final variable in constructor or in a a block of the class otherwise it will throw a compilation error

Drawbacks of Constants in Java
• Constants holding primitive types do not change value once initialized.
• Constants holding derived data types (array, object references) do not allow change in the memory reference.
– However the data values in the memory can be changed.
– So, the state of the object can be changed but not the reference
=>final Variable in Java ≠ Const in C/C++

• When a class implements an interface that inherits
another interface, it must provide implementations
for all methods defined within the interface
inheritance chain. 

Marker interface:
-• An empty interface is called a “Marker Interface” or “TaggingInterface”
– java.lang.Cloneable and java.io.Seria lizable are examples of marker interfaces.
08/12/22, 17:13 - Viswaa Ramasubramanian: @916383425519  tea cake da
08/12/22, 19:43 - Phoool Gobiiii  🎓: <Media omitted>
08/12/22, 21:33 - Gannu: <Media omitted>
08/12/22, 21:34 - Gannu: <Media omitted>
08/12/22, 21:35 - Gannu: <Media omitted>
08/12/22, 21:36 - Gannu: <Media omitted>
08/12/22, 22:18 - Viswaa Ramasubramanian: <Media omitted>
08/12/22, 22:18 - Viswaa Ramasubramanian: pg 258
08/12/22, 23:09 - Viswaa Ramasubramanian: https://www.amazon.in/Mini-Rechargeable-Fan-USB-Portable/dp/B0BN9D2F6Q/ref=sr_1_15?keywords=mini+cooler&qid=1670520919&sr=8-15
09/12/22, 00:26 - Harecharan CSE E Amrita CBE: https://docs.google.com/forms/u/0/d/e/1FAIpQLSf99mqqiofmIOFbEgPIYpy3u8BrWZZKyi85wtsA96s6fZwMcg/formResponse
09/12/22, 09:19 - Sooorrrr 🎓: https://www.youtube.com/watch?v=ldFofOqKcPs&list=PPSV
09/12/22, 09:31 - Sanjuuu 🎓: <Media omitted>
09/12/22, 09:31 - Sanjuuu 🎓: answer therinja anupunga
09/12/22, 09:31 - Harecharan CSE E Amrita CBE: k
09/12/22, 11:34 - Sanjuuu 🎓: <Media omitted>
09/12/22, 12:02 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=ss9FpyRgIjw
09/12/22, 12:07 - Sanjuuu 🎓: This message was deleted
09/12/22, 12:12 - Sanjuuu 🎓: <Media omitted>
09/12/22, 12:28 - Viswaa Ramasubramanian: <Media omitted>
09/12/22, 12:39 - Araviiii 🎓: <Media omitted>
09/12/22, 16:55 - Araviiii 🎓: <Media omitted>
09/12/22, 17:14 - Viswaa Ramasubramanian: Cutlet
09/12/22, 20:22 - Harecharan CSE E Amrita CBE: <Media omitted>
09/12/22, 21:38 - Harecharan CSE E Amrita CBE: <Media omitted>
09/12/22, 21:39 - Harecharan CSE E Amrita CBE: <Media omitted>
10/12/22, 08:55 - Harecharan CSE E Amrita CBE: your equal in honor and prowess, none
else," he said. "Come with me to
Rishyamuka and give him words of
comfort in his grief."
10/12/22, 08:58 - Harecharan CSE E Amrita CBE: Satabali and his army proceeded
northwards. Vinata went east, Sushena
westwards, Hanuman, Angada and
General Tara travelled southwards.
10/12/22, 11:02 - Viswaa Ramasubramanian: Come to mba boiss
10/12/22, 11:02 - Viswaa Ramasubramanian: After exam
10/12/22, 11:12 - Araviiii 🎓: Coming da Gotha
10/12/22, 11:12 - Phoool Gobiiii  🎓: Coming da, gotha
10/12/22, 11:27 - Viswaa Ramasubramanian: Sutha muditu gans potha
10/12/22, 11:28 - Shesadriii 🎓: Goppa mavne 🤏
10/12/22, 11:29 - Viswaa Ramasubramanian: Unaku chirisu 🤏🏻nae
10/12/22, 11:30 - Shesadriii 🎓: S bro...this is my concern size for you
10/12/22, 11:30 - Viswaa Ramasubramanian: Unaku thhokadhu
10/12/22, 11:30 - Shesadriii 🎓: Unna paatha yarukum thookadhu 🤣
10/12/22, 11:31 - Harecharan CSE E Amrita CBE: If you get a option where u get 1 mill but ur dck is only 2cm, u get a million and a 1cm dck length extra
10/12/22, 11:31 - Viswaa Ramasubramanian: Ramayana padistu enna na pesra ABISTU
10/12/22, 11:34 - Viswaa Ramasubramanian: Vayula poduda
10/12/22, 16:56 - Harecharan CSE E Amrita CBE: <Media omitted>
10/12/22, 16:57 - Harecharan CSE E Amrita CBE: <Media omitted>
10/12/22, 17:11 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:11 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:12 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:15 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:15 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:15 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:15 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:26 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:28 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:30 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:30 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:30 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:30 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:30 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:31 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:31 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:31 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:33 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:34 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:50 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:50 - Sooorrrr 🎓: <Media omitted>
10/12/22, 17:50 - Sooorrrr 🎓: <Media omitted>
10/12/22, 20:21 - Sooorrrr 🎓: <Media omitted>
10/12/22, 20:22 - Sooorrrr 🎓: The book which sir sent
10/12/22, 20:42 - Sooorrrr 🎓: Python
10/12/22, 20:42 - Sooorrrr 🎓: PR
10/12/22, 20:42 - Sooorrrr 🎓: ECE
10/12/22, 20:42 - Sooorrrr 🎓: DBMS
10/12/22, 20:42 - Sooorrrr 🎓: QUIZ
10/12/22, 20:43 - Sooorrrr 🎓: Python eval ,PR lab eval,ECE lab,Java viva
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:27 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:28 - Sooorrrr 🎓: <Media omitted>
10/12/22, 22:28 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:38 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:44 - Sooorrrr 🎓: <Media omitted>
10/12/22, 23:51 - Sooorrrr 🎓: The notes have been sent in the reverse order
10/12/22, 23:51 - Sooorrrr 🎓: Read from  the back
10/12/22, 23:51 - Sooorrrr 🎓: That's from the last page
10/12/22, 23:52 - Sanjuuu 🎓: 👍
10/12/22, 23:53 - Sanjuuu 🎓: This message was deleted
10/12/22, 23:53 - Sanjuuu 🎓: sorry wrong chat
11/12/22, 09:25 - Sanjuuu 🎓: we dont have this one right
11/12/22, 09:25 - Sanjuuu 🎓: ?
11/12/22, 09:26 - Sooorrrr 🎓: Nope
11/12/22, 09:26 - Sooorrrr 🎓: That's multivariable
11/12/22, 10:14 - Araviiii 🎓: send this image again
11/12/22, 10:15 - Sooorrrr 🎓: Well it's there  in lungi boys
11/12/22, 10:15 - Sooorrrr 🎓: I just forwarded those messages
12/12/22, 10:28 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/wgCVUO_Um7U?feature=share
12/12/22, 11:25 - Viswaa Ramasubramanian: <Media omitted>
12/12/22, 12:20 - Sooorrrr 🎓: <Media omitted>
12/12/22, 12:43 - Gannu: <Media omitted>
12/12/22, 12:45 - Viswaa Ramasubramanian: <Media omitted>
12/12/22, 22:05 - Sooorrrr 🎓: <Media omitted>
12/12/22, 23:30 - Harecharan CSE E Amrita CBE: <Media omitted>
13/12/22, 07:36 - Harecharan CSE E Amrita CBE: <Media omitted>
13/12/22, 07:37 - Harecharan CSE E Amrita CBE: Password: Harethegreat
13/12/22, 07:59 - Viswaa Ramasubramanian: Vada boisss
13/12/22, 07:59 - Viswaa Ramasubramanian: Pongal vada masla bread
13/12/22, 10:44 - Shesadriii 🎓: <Media omitted>
13/12/22, 10:44 - Shesadriii 🎓: Javs
13/12/22, 10:45 - Harecharan CSE E Amrita CBE: Yennanthu I th u
13/12/22, 10:46 - Shesadriii 🎓: Weightage
13/12/22, 15:44 - Sooorrrr 🎓: <Media omitted>
13/12/22, 15:54 - Sooorrrr 🎓: <Media omitted>
13/12/22, 15:55 - Sooorrrr 🎓: <Media omitted>
13/12/22, 15:58 - Sooorrrr 🎓: <Media omitted>
13/12/22, 17:12 - Viswaa Ramasubramanian: Muruku boisss
13/12/22, 23:21 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:22 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:22 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:23 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:23 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:23 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:24 - Viswaa Ramasubramanian: <Media omitted>
13/12/22, 23:25 - Viswaa Ramasubramanian: Add result at the end
14/12/22, 00:13 - Harecharan CSE E Amrita CBE: https://www.jagranjosh.com/general-knowledge/fact-or-fiction-hockey-is-the-national-game-of-india-1669204446-1#:~:text=The%20official%20reply%20of%20the,promote%20all%20popular%20sports%20disciplines.%22
14/12/22, 15:53 - Araviiii 🎓: Guys for python grp assignment
14/12/22, 15:53 - Araviiii 🎓: I have a vacancy for one members
14/12/22, 15:53 - Araviiii 🎓: Interested member can join my team
14/12/22, 15:54 - Araviiii 🎓: Currently my team members are :
Me
Bhargavi
Thanuja
Archana
14/12/22, 15:54 - Araviiii 🎓: We need one more member
14/12/22, 16:46 - Harecharan CSE E Amrita CBE: We gans me viswa surya also need one more da
15/12/22, 07:58 - Sooorrrr 🎓: <Media omitted>
15/12/22, 12:32 - Phoool Gobiiii  🎓: lt = [0, 0, 5, 7, 8, 1, 2, 3, 4, 6, 1, 3, 0, 4, 5]
countZero = lt.count(0)
for i in range(countZero):
    lt.remove(0)
    lt.append(0)
lt2 = []
countOne = lt.count(1)
for i in range(countOne):
    lt.remove(1)
    lt2.append(1)

lt = lt2 + lt
print(lt)
15/12/22, 12:43 - Gannu: c0,c1=0,0
l=list(map(int,input().split()))
print(l)  
for i in l:
    if i==0:
        c0+=1
    elif i==1:
        c1+=1    
print(c0,c1)
for j in range (c0):
    l.remove(0)
    l.append(0)   

for j in range (c1):
    l.remove(1)
for j in range (c1):
    l.insert(0,1)    
print(l)
15/12/22, 13:05 - Sooorrrr 🎓: l=len(str)
print(str[7:l-1])
L=str[7:l-1].split(",")
print(L)
A=[]
for i in L:
   A.append(int(i))
print(A)
d={}
for i in range(len(A)-1):
   d[i]=A[i+1]
print(d)
Array=[]
for k in d.keys():
    Array.insert(k,d[k])
print(Array)
15/12/22, 13:17 - Harecharan CSE E Amrita CBE: n=int(input())
list1=[]
for i in range(n):
    str=input()
    listtemp=list(str.split())
    x=listtemp.pop(0)

    if x=="insert":
        list1.insert(int(listtemp[0]),int(listtemp[1]))
    if str[0]=="p" and str[1]=="r":
        print(list1)
    if x=="pop":
        list1.pop(listtemp[0])
    if x=="append":
        list.append(int(listtemp[0]))
    if x == "sort":
        list.sort()
    if x=="reverse":
        list1.reverse()
15/12/22, 13:34 - Shesadriii 🎓: def triangle(n):
     
    # number of spaces
    k = n - 1
 
    # outer loop to handle number of rows
    for i in range(0, n):
     
        # inner loop to handle number spaces
        # values changing acc. to requirement
        for j in range(0, k):
            print(end=" ")
     
        # decrementing k after each loop
        k = k - 1
     
        # inner loop to handle number of columns
        # values changing acc. to outer loop
        for j in range(0, i+1):
         
            # printing stars
            print("* ", end="")
     
        # ending line after each row
        print("\r")
 
# Driver Code
n = 5
triangle(n)
15/12/22, 13:38 - Sooorrrr 🎓: def printRoman(number):
    num = [1, 4, 5, 9, 10, 40, 50, 90,
        100, 400, 500, 900, 1000]
    sym = ["I", "IV", "V", "IX", "X", "XL",
        "L", "XC", "C", "CD", "D", "CM", "M"]
    i = 12
      
    while number:
        div = number // num[i]
        number %= num[i]
  
        while div:
            print(sym[i], end = "")
            div -= 1
        i -= 1
  
# Driver code
if __name__ == "__main__":
    number = 3549
    print("Roman value is:", end = " ")
    printRoman(number)
15/12/22, 13:44 - Sooorrrr 🎓: def validation(str1):
    stack = []
    parenDict = {'(': ')', '{': '}', '[': ']'}
    for p in str1:
        if p in parenDict:
            stack.append(p)
        elif p.isalnum():
            continue
        elif p in "!@#$%^&*_-=+:;><,./?|":
            continue
        elif len(stack) == 0 or parenDict[stack.pop()] != p:
            return False
    return len(stack) == 0
15/12/22, 13:59 - Phoool Gobiiii  🎓: class point:
15/12/22, 13:59 - Phoool Gobiiii  🎓: def __init__(self,a):
        self.a = a
    
    def __str__(self):
        str1=str(self.a)
        return str1
    def __add__(self,other):
        op=point(self)
        op.a=self.a+other.a
        return op
    def __mul__(self,other):
        op=point(self)
        op.a=self.a*other.a
        return op
    def __sub__(self,other):
    def __neg__(self):
        self.a=-a
        # return self.a * other.a
a=int(input("enter the value of a:"))                
b=int(input("enter the value of b:"))
c=int(input("enter the value of c:"))
o1=point(a)
o2=point(b)
o3=point(c)
o4=o1+o2
o5=o4*o3
-o1
print(o5.a)





import random
class TicTacToe:
    def _init_(self):
        self.board = []
    def create_board(self):
        for i in range(3):
            row = []
            for j in range(3):
                row.append('-')
            self.board.append(row)
    def get_random_first_player(self):
        return random.randint(0, 1)
    def fix_spot(self, row, col, player):
        self.board[row][col] = player
    def is_player_win(self, player):
        win = None
        n = len(self.board)
        # checking rows
        for i in range(n):
            win = True
            for j in range(n):
                if self.board[i][j] != player:
                    win = False
                    break
            if win:
                return win
        # checking columns
        for i in range(n):
            win = True
            for j in range(n):
                if self.board[j][i] != player:
                    win = False
                    break
            if win:
                return win
        # checking diagonals
        win = True
        for i in range(n):
            if self.board[i][i] != player:
                win = False
                break
        if win:
            return win
        win = True
        for i in range(n):
            if self.board[i][n - 1 - i] != player:
                win = False
                break
        if win:
            return win
        return False
        for row in self.board:
            for item in row:
                if item == '-':
                    return False
        return True
    def is_board_filled(self):
        for row in self.board:
            for item in row:
                if item == '-':
                    return False
        return True
    def swap_player_turn(self, player):
        return 'X' if player == 'O' else 'O'
    def show_board(self):
        for row in self.board:
            for item in row:
                print(item, end=" ")
            print()
    def start(self):
        self.create_board()
        player = 'X' if self.get_random_first_player() == 1 else 'O'
        while True:
            print(f"Player {player} turn")
            self.show_board()
            # taking user input
            row, col = list(map(int, input("Enter row and column numbers to fix spot: ").split()))
            print()
            # fixing the spot
            self.fix_spot(row - 1, col - 1, player)
            # checking whether current player is won or not
            if self.is_player_win(player):
                print(f"Player {player} wins the game!")
                break
            # checking whether the game is draw or not
            if self.is_board_filled():
                print("Match Draw!")
                break
            # swapping the turn
            player = self.swap_player_turn(player)
        # showing the final view of board
        print()
        self.show_board()
# starting the game
tic_tac_toe = TicTacToe()
tic_tac_toe.start()





def get_divisors(N):
    a=[]
    b=[]
    count=0
    for i in N:
        divisors=[]
        for j in range(1,i+1):
            if i%j==0:
                divisors.append(j)
            else:
                continue
        a.append([i,divisors,len(divisors)])
    print(a)
    max=-1
    for i in a:
        if i[2]>max:
            max=i[2]
            b=i
    return b
def ma():
    N=[]
    for i in range(int(input())):
        N.append(int(input()))
    d=get_divisors👎
    print(d)
ma()


open=['[','{','(']
close=[']','}',')']
def check(s):
    l=[]
    for i in s:
        if i in open:
            l.append(i)
        elif i in close:
            p=close.index(i)
            if len(l)>0 and open[p]==l[-1]:
                l.pop()
            else:
                return 'unbalanced'
    if len(l)==0:
        return 'balanced'
    else:
        return 'unbalanced'
        
s=input()
t=input()
u=input()
v=input()
print(check(s))
print(check(t))
print(check(u))
print(check(v))




def sum(l,num):
    x=[]
    for i in range(len(l)):
        for j in range(i+1,len(l)):
            if l[i]+l[j]==num:
                x.append([l[i],l[j]])
    return x           
        
l=[1,2,3,4,5,6,7,8,9]
print(sum(l,10))





def triangle(n):
     
    
    k = n - 1
 
    
    for i in range(0, n):
     
        
        for j in range(0, k):
            print(end=" ")
     
       
        k = k - 1
     
    
        for j in range(0, i+1):
         
            
            print("* ", end="")
     
        
        print("\r")
 
n = 5
triangle👎






def validation(str1):
    stack = []
    parenDict = {'(': ')', '{': '}', '[': ']'}
    for p in str1:
        if p in parenDict:
            stack.append(p)
        elif p.isalnum():
            continue
        elif p in "!@#$%^&*_-=+:;><,./?|":
            continue
        elif len(stack) == 0 or parenDict[stack.pop()] != p:
            return False
    return len(stack) == 0
    
    
    
    
    
    
    
    
    
    
num = [1,4,5,9,10,40,50,90,100,400,500,900,1000]
sym = ['I' , 'IV' , 'V' , 'IX' , 'X' , 'XL' , 'L' , 'XC' , 'C' , 'CD' , 'D' , 'CM' ,'M']
n = int(input())
i=12
while(n):
    d = n//num[i]
    n = n%num[i]
    while(d):
        print(sym[i],end="")
        d=d-1
    i=i-1
16/12/22, 21:35 - Phoool Gobiiii  🎓: Bois.. reached bus station
16/12/22, 21:35 - Harecharan CSE E Amrita CBE: Okay
16/12/22, 22:06 - Phoool Gobiiii  🎓: @919043141090 Send those pictures bruv
16/12/22, 22:10 - Araviiii 🎓: <Media omitted>
16/12/22, 22:10 - Araviiii 🎓: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
16/12/22, 22:59 - Shesadriii 🎓: <Media omitted>
17/12/22, 04:43 - Phoool Gobiiii  🎓: Reached home, bois 🏡
17/12/22, 04:45 - Viswaa Ramasubramanian: Reached trichy boisss
2 hrs to 3 hrs la reached home nu msg poduran boisss
17/12/22, 04:52 - Viswaa Ramasubramanian: <Media omitted>
17/12/22, 04:53 - Viswaa Ramasubramanian: <Media omitted>
17/12/22, 05:01 - Sanjuuu 🎓: Reached bois
17/12/22, 06:57 - Viswaa Ramasubramanian: Reached 🏠 Home Boisss
17/12/22, 07:42 - Gannu: Reached home boizz
17/12/22, 07:42 - Araviiii 🎓: Reached home boiz   🏡
17/12/22, 07:45 - Sooorrrr 🎓: Reached home 🏠🏠
18/12/22, 17:42 - Araviiii 🎓: <Media omitted>
18/12/22, 17:42 - Araviiii 🎓: account*
18/12/22, 17:43 - Shesadriii 🎓: nope
18/12/22, 18:33 - Harecharan CSE E Amrita CBE: how to implement synchronizing in java without using synchronizing keyword in java
18/12/22, 18:33 - Harecharan CSE E Amrita CBE: answer venumuna all hail lord harecharan
18/12/22, 23:27 - Sooorrrr 🎓: Argentinaaaa
18/12/22, 23:28 - Sooorrrr 🎓: Terrific game
18/12/22, 23:29 - Shesadriii 🎓: 🥰🥰🥰🥰🥰
18/12/22, 23:29 - Shesadriii 🎓: Messssiiiii
18/12/22, 23:29 - Shesadriii 🎓: Wooowwww
18/12/22, 23:30 - Sooorrrr 🎓: 36 years
18/12/22, 23:30 - Shesadriii 🎓: What a send off
18/12/22, 23:30 - Sooorrrr 🎓: Kind of like when india won 2011
18/12/22, 23:30 - Sooorrrr 🎓: Terrific game
18/12/22, 23:30 - Shesadriii 🎓: Mbappe was insane!!!
18/12/22, 23:36 - Shesadriii 🎓: Emiliano Martinez lol.....that save
18/12/22, 23:37 - Sooorrrr 🎓: Yeah
19/12/22, 06:55 - Shesadriii 🎓: <Media omitted>
19/12/22, 06:57 - Gannu: Welcome to hell
19/12/22, 13:23 - Harecharan CSE E Amrita CBE: Guys can someone take my black sweater form room to ab3?
19/12/22, 13:34 - Sooorrrr 🎓: <Media omitted>
19/12/22, 13:34 - Sooorrrr 🎓: <Media omitted>
19/12/22, 13:42 - Shesadriii 🎓: package p1;


abstract class AbstractClassExample{
    abstract void test();

    void displayer(){}
}


interface p1{
    public int x=5;
    public int y=45;
    public int display(int a);
}
interface p2 {
    public int a=1;
    public int b=3;
    public int display();
}
public class Main extends AbstractClassExample implements p1,p2{

    @Override
    public int display() {
        return a+b;
    }

    @Override
    public int display(int b) {
        return x*y;
    }

    public static void main(String[] args){
        Main o1 = new Main();
        System.out.println(o1.display());
        System.out.println(o1.display(1));
        o1.test();
    }


    @Override
    void test() {
        System.out.println("Tested successfully");
//        return 0;
    }
}
19/12/22, 13:56 - Gannu: package inherit;

import org.w3c.dom.ls.LSOutput;

class sup{
    int i=0;
    void display(){
        System.out.println("hey");
    }
}
class sub extends sup{
    int i=10;
    void display() {
        System.out.println("hello");

    }
}

public class prac1 {
    public static void main(String[] args){
        sup[] obj=new sub[3];
        for (int i=0; i<3; i++){
            obj[i]=new sub();
            System.out.println(obj[i].i);
            obj[i].display();

        }
        
        sub obj1;
        obj1=(sub)new sup();
    }
}
19/12/22, 21:10 - Sanjuuu 🎓: <Media omitted>
19/12/22, 22:27 - Viswaa Ramasubramanian: <Media omitted>
20/12/22, 09:52 - Sooorrrr 🎓: <Media omitted>
20/12/22, 10:20 - Viswaa Ramasubramanian: https://frama-c.com/html/installations/calcium.html#:~:text=Type%20make%20uninstall%20to%20remove,this%20may%20require%20superuser%20privileges.)
20/12/22, 12:19 - Sanjuuu 🎓: https://app.diagrams.net/?splash=0
20/12/22, 12:19 - Sanjuuu 🎓: for dependency diagram
22/12/22, 10:33 - Sooorrrr 🎓: <Media omitted>
22/12/22, 10:33 - Sooorrrr 🎓: <Media omitted>
22/12/22, 10:33 - Sooorrrr 🎓: <Media omitted>
22/12/22, 19:42 - Viswaa Ramasubramanian: Enna sapadhu da
22/12/22, 19:42 - Viswaa Ramasubramanian: Aravindh msg podra
22/12/22, 19:43 - Viswaa Ramasubramanian: Poori and channa guys harecharan and shreyas come to mess
23/12/22, 12:58 - Sooorrrr 🎓: <Media omitted>
23/12/22, 13:12 - Sanjuuu 🎓: /*@ 
	requires a>0 && b>0;
	behavior c:
		assumes a<b;
		ensures \result == a;
	behavior d:
		assumes a>=b;
		ensures \result == b;
	complete behaviors c, d;

*/


int min(int a,int b){
	if(a<b){
		return a;
	}
	else{
		return b;
	}
}
23/12/22, 20:04 - Gannu: <Media omitted>
23/12/22, 20:05 - Gannu: <Media omitted>
23/12/22, 20:05 - Gannu: <Media omitted>
23/12/22, 20:05 - Gannu: <Media omitted>
23/12/22, 20:05 - Gannu: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:09 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:11 - Viswaa Ramasubramanian: @916383425519  Five difference kandupidikavum
23/12/22, 20:33 - Harecharan CSE E Amrita CBE: <Media omitted>
23/12/22, 20:33 - Shesadriii 🎓: <Media omitted>
23/12/22, 20:34 - Harecharan CSE E Amrita CBE: <Media omitted>
23/12/22, 20:41 - Phoool Gobiiii  🎓: <Media omitted>
23/12/22, 22:18 - Sooorrrr 🎓: https://amritavishwavidyapeetham-my.sharepoint.com/:f:/g/personal/c_raghavachari_cb_amrita_edu/EgKd6pqQnP1HjnhaNk--qtwBdsAeLu1VIBPFrZUZepGncQ?e=MuuPaE
23/12/22, 22:24 - Sooorrrr 🎓: DBMS Course materials:  https://bit.ly/3OScFmJ
23/12/22, 22:25 - Sooorrrr 🎓: <Media omitted>
23/12/22, 22:26 - Sooorrrr 🎓: <Media omitted>
23/12/22, 22:26 - Sooorrrr 🎓: <Media omitted>
23/12/22, 22:26 - Sooorrrr 🎓: <Media omitted>
24/12/22, 09:45 - Sanjuuu 🎓: /*@
	requires n>=2;
	ensures \result==n*(n+1);
*/




int sum(int n){
	int s=0;
	int i=0;
	/*@
		loop invariant s==i*(i+1);
		loop invariant 0<=i<=(2*n)+1;
		loop assigns s,i;
		loop variant (2*n)-i;
	*/
	while(i<=(2*n)){
		i+=2;
		s+=i;		
	}
	return s;
}
24/12/22, 09:53 - Viswaa Ramasubramanian: /*@
    requires n>=1;
    ensures \result==n*(n+1);
*/

int sum(int n){
    int i=0,s=0;
    /*@
        loop invariant s==i*(i+1);
        loop invariant 0<=i && i<=n+1;
        loop assigns s,i;
        loop variant 2*n-i;
    */
    while(i<=2*n){
        s=s+i;
        i=i+2;
    }
    return s;
}
24/12/22, 20:22 - Sooorrrr 🎓: DECLARE
a integer := 10;
b integer := 20;
c integer;
f real;
BEGIN
c := a + b;
dbms_output.put_line
('Value of c: ' || c);
f := 70.0/3.0;
dbms_output.put_line
('Value of f: ' ||f);
END;
DECLARE 
  num1 integer :=9;
  num2 integer :=12;
  sum NUMBER;
BEGIN
  sum := num1 + num2;
  DBMS_OUTPUT.PUT_LINE('The sum is: ' || sum);
END;
24/12/22, 20:23 - Sooorrrr 🎓: DECLARE
  num1 NUMBER;
  num2 NUMBER;
  sum NUMBER;
BEGIN
  -- prompt the user for the first number
  DBMS_OUTPUT.PUT_LINE('Enter the first number:');
  -- read the first number from the user
  num1 := &num1;

  -- prompt the user for the second number
  DBMS_OUTPUT.PUT_LINE('Enter the second number:');
  -- read the second number from the user
  num2 := &num2;

  -- add the two numbers together and store the result in the "sum" variable
  sum := num1 + num2;

  -- print the result to the screen
  DBMS_OUTPUT.PUT_LINE('The sum is: ' || sum);
END;
24/12/22, 20:27 - Sooorrrr 🎓: https://onecompiler.com/mysql/3ysub8epd
26/12/22, 07:54 - Sooorrrr 🎓: <Media omitted>
26/12/22, 17:28 - Sanjuuu 🎓: https://youtu.be/YykJGqvpFnU
26/12/22, 19:26 - Sooorrrr 🎓: <Media omitted>
26/12/22, 19:27 - Sooorrrr 🎓: <Media omitted>
26/12/22, 19:52 - Viswaa Ramasubramanian: <Media omitted>
26/12/22, 20:36 - Sooorrrr 🎓: <Media omitted>
26/12/22, 20:37 - Sooorrrr 🎓: <Media omitted>
26/12/22, 21:57 - Sooorrrr 🎓: declare 
type namesarray is varray(5) of varchar2(10);
names namesarray;
total integer;
begin
names:=namesarray('Kavita','Pritam','Ayan', 'Rishav ', 'Aziz');
total:=names.count;
for i in 1..total loop
dbms_output.put_line(names(i));
end loop;
end;
26/12/22, 22:01 - Sooorrrr 🎓: <Media omitted>
26/12/22, 22:04 - Sooorrrr 🎓: <Media omitted>
26/12/22, 22:49 - Sooorrrr 🎓: <Media omitted>
27/12/22, 09:26 - Sooorrrr 🎓: <Media omitted>
27/12/22, 09:28 - Viswaa Ramasubramanian: <Media omitted>
27/12/22, 09:28 - Viswaa Ramasubramanian: <Media omitted>
27/12/22, 09:29 - Viswaa Ramasubramanian: <Media omitted>
27/12/22, 10:20 - Araviiii 🎓: hey in INTELL-IDJ wat version of jdk is it using?
27/12/22, 10:21 - Araviiii 🎓: <Media omitted>
27/12/22, 11:50 - Sanjuuu 🎓: bro....after typing the code in plsql how to run it?
27/12/22, 11:51 - Sanjuuu 🎓: hello?
27/12/22, 11:51 - Sanjuuu 🎓: hello
27/12/22, 11:51 - Viswaa Ramasubramanian: /
27/12/22, 11:52 - Viswaa Ramasubramanian: use / after end;
27/12/22, 12:10 - Sooorrrr 🎓: <Media omitted>
27/12/22, 12:10 - Sooorrrr 🎓: <Media omitted>
27/12/22, 23:33 - Sooorrrr 🎓: <Media omitted>
27/12/22, 23:33 - Sooorrrr 🎓: <Media omitted>
27/12/22, 23:33 - Sooorrrr 🎓: <Media omitted>
27/12/22, 23:33 - Sooorrrr 🎓: Counters
29/12/22, 11:38 - Araviiii 🎓: we bunked two period for PPT 
kadasila sir atha kekavala
29/12/22, 11:39 - Araviiii 🎓: 😂😂😂😂😂
29/12/22, 11:40 - Araviiii 🎓: versus matum than kepaganu therinja , nainiku kala prepare panirupein.
29/12/22, 11:40 - Gannu: 😣
29/12/22, 15:28 - Viswaa Ramasubramanian: #include <stdio.h>
int s=0;

/*@ requires n > 0;
   requires \valid_read(a + (0..n-1));
   
   assigns s;
   ensures \forall integer i;  0 <= i < n ==> (a[i] > 0 || a[i]<=0);
 */

int check(int a[], int n) {
    
    /*@ loop invariant 0 <= i <= n && (s>0 || s<=0);
        loop assigns s;
        loop variant n - i;
    */
    
    for (int i = 0; i < n; i++) {
        s=s+a[i];        
    }
    return s;
}
29/12/22, 15:30 - Viswaa Ramasubramanian: #include <stdio.h>
int s=0;

/*@ requires n > 0;
   requires \valid_read(a + (0..n-1));
   
   assigns s;
   ensures \forall integer i;  0 <= i <= n ==> (a[i] > 0 || a[i]<=0);
 */

int check(int a[], int n) {
    
    /*@ loop invariant 0 <= i <= n && (s>0 || s<=0);
        loop assigns s;
        loop variant n - i;
    */
    
    for (int i = 0; i < n; i++) {
        s=s+a[i];        
    }
    return s;
}
29/12/22, 15:45 - Sanjuuu 🎓: <Media omitted>
29/12/22, 15:59 - Sanjuuu 🎓: /*@ 
requires units>=0;
ensures \result>=0;
assigns \nothing;
behavior a:
	assumes units<=50;
	ensures \result == units * 0.50;
behavior b:
	assumes units<=150;
	ensures \result == 25 + (units - 50) * 0.75;
behavior c:
	assumes units<=250;
	ensures \result == 100 + (units - 150) * 1.20;
behavior d:
	assumes units>250;
	ensures \result == 220 + (units - 250) * 1.50;
complete behaviors a,b,c,d;
	
*/

float eb(int units)
{
	float amount=0;

	
    if (units <= 50)
    {
        amount = units * 0.50;
    }
    else if (units <= 150)
    {
        amount = 25 + (units - 50) * 0.75;
    }
    else if (units <= 250)
    {
        amount = 100 + (units - 150) * 1.20;
    }
    else
    {
        amount = 220 + (units - 250) * 1.50;
    }

    return amount;
    
}
int main(){

 printf("%f",eb(154));
}
29/12/22, 15:59 - Sanjuuu 🎓: ass 1st one
29/12/22, 15:59 - Harecharan CSE E Amrita CBE: <Media omitted>
29/12/22, 19:01 - Araviiii 🎓: <Media omitted>
29/12/22, 19:01 - Araviiii 🎓: <Media omitted>
29/12/22, 19:30 - Harecharan CSE E Amrita CBE: Thalaivar enna hood and shorts combo la irukiraar🤣🤣🤣
29/12/22, 19:49 - Viswaa Ramasubramanian: Semma thookam da
29/12/22, 19:54 - Viswaa Ramasubramanian: <Media omitted>
29/12/22, 19:54 - Viswaa Ramasubramanian: <Media omitted>
29/12/22, 21:13 - Viswaa Ramasubramanian: <Media omitted>
29/12/22, 21:30 - Viswaa Ramasubramanian: <Media omitted>
29/12/22, 23:09 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=0tE1cXA0GLo
30/12/22, 01:11 - Viswaa Ramasubramanian: Hi boisss
30/12/22, 01:11 - Viswaa Ramasubramanian: At karur dhaba for susu time 😂
30/12/22, 03:21 - Viswaa Ramasubramanian: <Media omitted>
30/12/22, 05:36 - Viswaa Ramasubramanian: Reached Home Boisss 🫶🏻
30/12/22, 08:16 - Gannu: Reached home boiz
30/12/22, 08:23 - Araviiii 🎓: Reached home bois
30/12/22, 09:25 - Harecharan CSE E Amrita CBE: Ganesh me election vittu veliya varliya
30/12/22, 09:25 - Harecharan CSE E Amrita CBE: *ne
30/12/22, 09:26 - Viswaa Ramasubramanian: Unofficial ah vantan
30/12/22, 09:26 - Viswaa Ramasubramanian: Official ah vara mudiyathu
30/12/22, 09:26 - Araviiii 🎓: How to vote
30/12/22, 09:26 - Harecharan CSE E Amrita CBE: I'll vote for u or what
30/12/22, 09:26 - Harecharan CSE E Amrita CBE: Link in official
30/12/22, 09:26 - Viswaa Ramasubramanian: Eniyan Or jeff
30/12/22, 09:26 - Araviiii 🎓: K
30/12/22, 09:26 - Harecharan CSE E Amrita CBE: I think I vote for jeff
30/12/22, 09:26 - Harecharan CSE E Amrita CBE: Already has many on his plate
30/12/22, 09:27 - Harecharan CSE E Amrita CBE: Eniyan
30/12/22, 09:30 - Gannu: Yesss
30/12/22, 09:30 - Shesadriii 🎓: Jeff
30/12/22, 09:31 - Shesadriii 🎓: Go for Jeff....Vote pirinjirum bros
31/12/22, 05:18 - Sanjuuu 🎓: Reached home bois
31/12/22, 05:49 - Shesadriii 🎓: Reached home boiz
31/12/22, 08:11 - Sooorrrr 🎓: Reached home bois🏚️🏚️
01/01/23, 00:11 - Sooorrrr 🎓: happy new year guys
01/01/23, 00:14 - Gannu: <Media omitted>
01/01/23, 00:17 - Sanjuuu 🎓: Happy new year bois
01/01/23, 00:23 - Viswaa Ramasubramanian: Happy New Year Boisss
01/01/23, 00:26 - Phoool Gobiiii  🎓: Happy new year ✨
01/01/23, 08:46 - Araviiii 🎓: Happy New Year, nanbargala
01/01/23, 08:53 - Araviiii 🎓: Dei
01/01/23, 08:54 - Araviiii 🎓: Hare Charan oda nagini 🐍 dance video enga da
01/01/23, 08:54 - Gannu: Enta iruku
01/01/23, 08:54 - Gannu: Venuma??
01/01/23, 08:54 - Gannu: 😂
01/01/23, 08:54 - Araviiii 🎓: Grp la potu 🤣🤣 boys abhiram ku competition kudu po
01/01/23, 08:54 - Araviiii 🎓: 🤣🤣🤣🤣
01/01/23, 08:55 - Araviiii 🎓: S
01/01/23, 08:57 - Shesadriii 🎓: <Media omitted>
01/01/23, 08:57 - Gannu: <Media omitted>
01/01/23, 08:58 - Viswaa Ramasubramanian: Pothurava
01/01/23, 08:58 - Araviiii 🎓: Grp la poduva
01/01/23, 08:58 - Araviiii 🎓: Podu da
01/01/23, 08:58 - Shesadriii 🎓: Lol 😂 I'm not in it
01/01/23, 08:58 - Araviiii 🎓: This will be hare Charan 's reply...
01/01/23, 08:59 - Viswaa Ramasubramanian: 🤣🤣
01/01/23, 08:59 - Shesadriii 🎓: 🤣
01/01/23, 08:59 - Gannu: Podu kaasa panama
01/01/23, 08:59 - Shesadriii 🎓: 🫡Lets do it lol
01/01/23, 08:59 - Araviiii 🎓: Life da (read it in tamil)
01/01/23, 08:59 - Viswaa Ramasubramanian: Edhuva irundhalum chinna guru ganesh tah kethukonga nu periya guru sanju solirka
01/01/23, 09:00 - Viswaa Ramasubramanian: Avan valla dhana
01/01/23, 09:00 - Viswaa Ramasubramanian: Pona poitu pogudhu
01/01/23, 09:03 - Araviiii 🎓: Send this as a sticker
01/01/23, 09:17 - Shesadriii 🎓: <Media omitted>
01/01/23, 09:54 - Harecharan CSE E Amrita CBE: Happy new year da guys
01/01/23, 10:09 - Harecharan CSE E Amrita CBE: <Media omitted>
02/01/23, 22:22 - Harecharan CSE E Amrita CBE: <Media omitted>
02/01/23, 22:23 - Harecharan CSE E Amrita CBE: Ece smaple doc
03/01/23, 09:20 - Araviiii 🎓: guys can u share the pdf wat mam is teaching ryt now
03/01/23, 09:20 - Harecharan CSE E Amrita CBE: kk
03/01/23, 09:22 - Sanjuuu 🎓: #include <stdio.h>
/*@ requires \valid(a+(0..n-1));
	requires n>0;
	ensures \forall integer i,j; 0<=i<=j<=n-1 ==> a[i]<=a[j];
*/

void BubbleSort(int *a, int n){
	int i,j,temp;
	/*@ 
		loop invariant \forall integer p,q; i<=p<=q<=n-1 ==> a[p]<=a[q];
		loop invariant \forall integer p,q; 0<=p<i+1==q<=n-1 ==> a[p]<=a[q];
		loop invariant 0<=i<n;
		loop assigns i, j, temp, a[0..n-1];
		loop variant i;
	*/
	for(i=n-1;i>0;i--){
		/*@ loop invariant 0<=j<=i<n;
			 loop invariant \forall integer k; 0<=k<=j ==> a[k] <= a[j];
			 loop invariant \forall integer p, q; 0<=p<i+1==q<=n-1 ==> a[p]<=a[q];
			 loop assigns j,temp,a[0..i];
			 loop variant i-j;
		 */
		 for(j=0; j<i; j++) {
			 if (a[j] > a[j+1]) {
				 temp = a[j];
				 a[j] = a[j+1];
				 a[j+1] = temp;
			 }
		 }
		
	}

}
03/01/23, 09:25 - Harecharan CSE E Amrita CBE: <Media omitted>
03/01/23, 12:37 - Viswaa Ramasubramanian: <Media omitted>
03/01/23, 12:38 - Viswaa Ramasubramanian: Got a sample ece project report tdy
03/01/23, 12:38 - Viswaa Ramasubramanian: Might be useful
03/01/23, 22:26 - Phoool Gobiiii  🎓: <Media omitted>
03/01/23, 22:26 - Phoool Gobiiii  🎓: <Media omitted>
03/01/23, 23:20 - Sooorrrr 🎓: <Media omitted>
04/01/23, 01:10 - Phoool Gobiiii  🎓: <Media omitted>
04/01/23, 14:45 - Araviiii 🎓: <Media omitted>
04/01/23, 18:32 - Viswaa Ramasubramanian: Good evening ma'am sorry to disturb you
04/01/23, 18:32 - Viswaa Ramasubramanian: We would like you to postpone the quiz  to next week as we have an extremely tight and jam packed schedule
04/01/23, 18:32 - Viswaa Ramasubramanian: Can you kindly please consider ma'am
04/01/23, 18:33 - Viswaa Ramasubramanian: Idha ECE mam kanla padum varai share seiyavum
05/01/23, 01:12 - Sooorrrr 🎓: Tomorrow's ece tutorial portion:
Conversion of flip flops
Synchronous counters(including ring and johnson) 
Asynchronous counters
05/01/23, 11:10 - Harecharan CSE E Amrita CBE: ½⅓¼⅕⅙⅔⅖¾⅗⅜⅘⅚⅝⁶⁷⅞⁸⁹ⁿ =?
05/01/23, 12:49 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
int main(){
    queue <int> q1;
    q1.push(1);
    q1.push(2);
    q1.push(3);
    queue <int> q2;
    int a=q1.size();
    cout<<a<<endl;
    while(q1.size()!=1){
        q2.push(q1.front());
        q1.pop();
    }
    cout<<endl;
    while(!q2.empty()){
        cout<<q2.front()<<" ";
        q2.pop();
    }

}
05/01/23, 12:58 - Shesadriii 🎓: queue<int> reverse(queue<int> q){
    stack<int> s;
    while (!q.empty()) {
        s.push(q.front());
        q.pop();
    }
    while (!s.empty()) {
        q.push(s.top());
        s.pop();
    }

    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    return q;
}
05/01/23, 13:00 - Shesadriii 🎓: int main(){
    queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);
    q.push(4);
    q=reverse(q);
}
05/01/23, 13:34 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void explainlist(){
    list <int> ls;
    ls.push_back(2);
    ls.emplace_back(4);
    ls.push_front(5);
    ls.emplace_front(10);
    // ls.pop_front();
    // ls.pop_back();
    //rest functions same as vector
    //begin,end,rbegin,clear,insert,size,swap
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }

    list <int> :: iterator it = ls.begin();
    advance(it, 2);
    ls.insert(it,100);
    // cout<<endl<<endl;
    // for(auto it=ls.rbegin();it!=ls.rend();it++){
    //     cout<<*it<<endl;
    // }
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }
}
int main(){
    explainlist();
}
05/01/23, 13:35 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
stack <int> rev(stack <int> s){
    stack <int> s3;
    while(!s.empty()){
        s3.push(s.top());
        s.pop();
    }
    return s3;
}
int main(){
    stack <int> s1;
    s1.push(5);
    s1.push(4);
    s1.push(3);
    stack <int> s2;
    s2=rev(s1);
    s2.pop();
    s1=rev(s2);
    cout<<endl;
    while(!s1.empty()){
        cout<<s1.top()<<" ";
        s1.pop();
    }
}
05/01/23, 13:55 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void explainlist(){
    list <int> ls;
    ls.push_back(2);
    ls.emplace_back(4);
    ls.push_front(5);
    ls.emplace_front(10);
    // ls.pop_front();
    // ls.pop_back();
    //rest functions same as vector
    //begin,end,rbegin,clear,insert,size,swap
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }

    list <int> :: iterator it = ls.begin();
    advance(it, 2);
    ls.insert(it,100);
    // cout<<endl<<endl;
    // for(auto it=ls.rbegin();it!=ls.rend();it++){
    //     cout<<*it<<endl;
    // }
    cout<<endl;
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }
    cout<<endl;
    cout<<ls.front();
}
int main(){
    explainlist();
}
05/01/23, 14:01 - Viswaa Ramasubramanian: #include <unordered_set>
#include <vector>

void removeDuplicates(std::vector<int>& vec) {
  std::unordered_set<int> seen;
  std::vector<int> result;

  for (int x : vec) {
    if (seen.count(x) == 0) {
      // Element has not been seen before, add it to the result vector
      result.push_back(x);
      seen.insert(x);
    }
  }

  vec = result;  // Overwrite the original vector with the result vector
}
05/01/23, 14:04 - Viswaa Ramasubramanian: #include <list>

void removeDuplicates(std::list<int>& lst) {
  std::list<int> seen;

  for (auto it = lst.begin(); it != lst.end(); ) {
    if (std::find(seen.begin(), seen.end(), *it) != seen.end()) {
      // Element has been seen before, remove it from the list
      it = lst.erase(it);
    } else {
      // Element is new, add it to the seen list
      seen.push_back(*it);
      ++it;
    }
  }
}
05/01/23, 17:04 - Viswaa Ramasubramanian: <Media omitted>
05/01/23, 17:04 - Viswaa Ramasubramanian: <Media omitted>
05/01/23, 17:21 - Harecharan CSE E Amrita CBE: <Media omitted>
05/01/23, 17:21 - Harecharan CSE E Amrita CBE: .
05/01/23, 17:33 - Viswaa Ramasubramanian: <Media omitted>
05/01/23, 18:03 - Sooorrrr 🎓: <Media omitted>
05/01/23, 18:03 - Sooorrrr 🎓: <Media omitted>
05/01/23, 18:04 - Sooorrrr 🎓: <Media omitted>
05/01/23, 22:05 - Gannu: /*@
requires x>0;
ensures \result==1 || \result==-1;
ensures \result==1 <==> x%2==0;
ensures \result==-1 <==> x%2!=0;
*/

int oddeven(int x){
    if(x%2==0){
        return 1;
    }
    else{
        return -1;
    }
}

int main(){
    oddeven(2);
}
05/01/23, 22:06 - Gannu: <Media omitted>
05/01/23, 22:19 - Araviiii 🎓: This message was deleted
05/01/23, 22:27 - Araviiii 🎓: /*@
	ensures \result==x || \result==-x || \result==0;
	ensures x>0 <==> \result==x;
	ensures x==0 <==> \result==0;
	ensures x<0 <==> \result==-x;
	
*/

int abs(int x)
{
	if(x>0)
	{
		return x;
	}
	else if(x==0){
		return 0;
	}
	else
	{
		return -x;
	}
}

int main()
{
	abs(5);
}
05/01/23, 22:32 - Sooorrrr 🎓: /*@
requires x>0||x<=0;
ensures \result>=0;
	
*/

int abs(int x)
{
	if(x>=0)
	{
		return x;
	}
	else
	{
		return -x;
	}
}

int main()
{
	abs(5);
}
05/01/23, 23:30 - Araviiii 🎓: *@
	requires (x>=0 || x<0) && (y>=0 || y<0);
	ensures (\result==x)||(\result==y);
	assigns \nothing;
*/

int max(int x,int y)
{
	if(x>y)
	{
		return x;
	}
	else
	{
		return y;
	}
}
int main()
{
	int x=5;
	int y=6;
	max(x,y);
}
05/01/23, 23:30 - Araviiii 🎓: TO FIND THE MAX BETWEEN TWO NUMBERS
06/01/23, 00:34 - Shesadriii 🎓: /*@ 
    behavior Sunday:
      assumes n==1;
      ensures \result == 1;
    behavior Monday:
      assumes n==2;
      ensures \result == 2;
    behavior Tuesday:
      assumes n==3;
      ensures \result == 3;
    behavior Wednesday:
      assumes n==4;
      ensures \result == 4;
    behavior Thursday:
      assumes n==5;
      ensures \result == 5;
    behavior Friday:
      assumes n==6;
      ensures \result == 6;
    behavior Saturday:
      assumes n==7;
      ensures \result == 7;
    behavior nothingWeek:
      assumes n!=1;
      assumes n!=2;
      assumes n!=3;
      assumes n!=4;
      assumes n!=5;
      assumes n!=6;
      assumes n!=7;
      ensures \result==0;
    complete behaviors;
  
*/
int week(int n) {
  if(n==1){
  	printf("Sunday");
    return 1;
  }else if(n==2){
  	printf("Monday");
    return 2;
  }
  else if(n==3){
  	printf("Tuesday");
    return 3;
  }
  else if(n==4){
  	printf("Wednesday");
    return 4;
  }
  else if(n==5){
  	printf("Thursday");
    return 5;
  }
  else if(n==6){
  	printf("Friday");
    return 6;
  }else if(n==7){
  	printf("Saturday");
    return 7;
  }else{
    return 0;
  }
}

int main(){
	int a;
	a=week(5);
}
06/01/23, 01:10 - Gannu: /*@ 
    behavior Sunday:
      assumes n==1;
      ensures \result == 1;
    behavior Monday:
      assumes n==2;
      ensures \result == 2;
    behavior Tuesday:
      assumes n==3;
      ensures \result == 3;
    behavior Wednesday:
      assumes n==4;
      ensures \result == 4;
    behavior Thursday:
      assumes n==5;
      ensures \result == 5;
    behavior Friday:
      assumes n==6;
      ensures \result == 6;
    behavior Saturday:
      assumes n==7;
      ensures \result == 7;
    disjoint behaviors;  
  
*/
int week(int n) {
  if(n==1){
    return 1;
  }else if(n==2){
    return 2;
  }
  else if(n==3){
    return 3;
  }
  else if(n==4){
    return 4;
  }
  else if(n==5){
    return 5;
  }
  else if(n==6){
    return 6;
  }else if(n==7){
    return 7;
  }
  else{
    return 0;
  }
}

int main(){
	int n;
	week(n);
}
06/01/23, 05:17 - Araviiii 🎓: WEEK DAYS


/*@
	requires x>0;
	behavior a:
		assumes x==1;
		ensures \result==1;
	behavior b:
		assumes x==2;
		ensures \result==2;
	behavior c:
		assumes x==3;
		ensures \result==3;
	behavior d:
		assumes x==4;
		ensures \result==4;
	behavior e:
		assumes x==5;
		ensures \result==5;
	behavior f:
		assumes x==6;
		ensures \result==6;
	behavior g:
		assumes x==7;
		ensures \result==7;

	disjoint behaviors;
*/

int check(int x)
{
	if(x==1)
	{
		printf("sunday");
		return 1;
	}
	else if(x==2)
	{
		printf("monday");
		return 2;
	}
	else if(x==3)
	{
		printf("tuesday");
		return 3;
	}
	else if(x==4)
	{
		printf("wednesday");
		return 4;
	}
	else if(x==5)
	{
		printf("thrusday");
		return 5;
	}
	else if(x==6)
	{
		printf("friday");
		return 6;
	}
	else if(x==7)
	{
		printf("saturday");
		return 7;
	}else{
		return 0;
	}
}

int main()
{
	int a=5;
	check(a);
}
06/01/23, 08:40 - Viswaa Ramasubramanian: /*@ requires base_salary > 0;
   ensures \result == base_salary * 1.2 + base_salary * 0.8 || \result == base_salary * 1.25 + base_salary * 0.9 || \result == base_salary * 1.3 + base_salary * 0.95;
   behavior low:
     assumes base_salary <= 10000 && base_salary>0;
     ensures \result == base_salary * 1.2 + base_salary * 0.8;
   behavior medium:
     assumes base_salary > 10000 && base_salary <= 20000;
     ensures \result == base_salary * 1.25 + base_salary * 0.9;
   behavior high:
     assumes base_salary > 20000;
     ensures \result == base_salary * 1.3 + base_salary * 0.95;
  */
float calc_gross_salary(float base_salary) {
  float hra, da;
  if (base_salary <= 10000 && base_salary>0) {
    hra = base_salary * 0.2;
    da = base_salary * 0.8;
    return base_salary + hra + da;
  } else if (base_salary <= 20000 && base_salary>10000) {
    hra = base_salary * 0.25;
    da = base_salary * 0.9;
    return base_salary + hra + da;
  } else if(base_salary >20000) {
    hra = base_salary * 0.3;
    da = base_salary * 0.95;
    return base_salary + hra + da;
  }
  else{
    return false;
  }
  
}
void main(){
    float base_salary=15000;
    calc_gross_salary(base_salary);


}
06/01/23, 08:44 - Sanjuuu 🎓: https://www.instagram.com/p/CnADhRVBoee/?igshid=MDJmNzVkMjY=
06/01/23, 08:45 - Sooorrrr 🎓: Great
06/01/23, 08:45 - Sooorrrr 🎓: When is season 5
06/01/23, 08:45 - Sooorrrr 🎓: Waiting for it
06/01/23, 08:55 - Sanjuuu 🎓: Not yet confirmed
06/01/23, 08:55 - Sooorrrr 🎓: Ohh
06/01/23, 12:55 - Araviiii 🎓: /*@
	requires n>0;
	ensures \result==(n*n);

*/

int sum(int n)
{
	int s=0;
	int i=0;
	/*@
		loop invariant s==(i*i);
		loop invariant 0<=i<=(n);
		loop assigns s,i;
		loop variant (n)-i;
	*/
	
	while(i<n)
	{
		i=i+1;
		s=s+(2*i)-1;
	}
	return s;
}

int main()
{
	int a=4;
	sum(a);
}
06/01/23, 12:55 - Araviiii 🎓: SUM OF ODD NUMBERS
06/01/23, 13:20 - Phoool Gobiiii  🎓: <Media omitted>
06/01/23, 15:46 - Harecharan CSE E Amrita CBE: /*@
	requires n>0;
	ensures \result==(n*(n+1)/2);

*/

int sum(int n)
{
	int s=0;
	int i=0;
	/*@
		loop invariant s==(i*(i+1)/2);
		loop invariant 0<=i<=(n);
		loop assigns s,i;
		loop variant (n)-i;
	*/
	
	while(i<n)
	{
		i=i+1;
		s=s+(i);
	}
	return s;
}

int main()
{
	int a=4;
	sum(a);
}
06/01/23, 15:47 - Harecharan CSE E Amrita CBE: guys 1st one in set 1 pls
07/01/23, 10:06 - Harecharan CSE E Amrita CBE: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div style="display:flex;">
    <div id="wrap"  style="border:0px ;padding:0px;width:33%;height:920px;">
        <iframe  id="scaled-frame"  src="history.html" frameborder="0"  style="width:100%;height:920px;"></iframe>
    </div>
    <div style="border:0px ;padding:0px;width:33%; ">
        <iframe src="penancePage.html" frameborder="0" style="width:100%;height:920px"></iframe>        
    </div>
    <div style="border:0px ;padding:0px;width:33%;height:920px;">
        <iframe src="vehiclePage.html" frameborder="0" style="width:100%; height:920px"></iframe>
    </div>
    </div>
    
    <script>
        var div = document.getElementById("target");
        div.onload = function() {
            div.style.height =
              div.contentWindow.document.body.scrollHeight + 'px';
        }
    </script>
    <style>
        #wrap {
            width: 750px;
            height: 2500px;            
            overflow: hidden;
          }
          #scaled-frame {
            width: 400px;
            height: 2000px;
            border: 0px;
          }
          #scaled-frame {
            zoom: 0.70;
            -moz-transform: scale(0.90);
            -moz-transform-origin: 0 0;
            -o-transform: scale(0.90);
            -o-transform-origin: 0 0;
            -webkit-transform: scale(0.90);
            -webkit-transform-origin: 0 0;
          }
          @media screen and (-webkit-min-device-pixel-ratio:0) {
            #scaled-frame {
              zoom: 0.9;
            }
          }
      </style>
    
</body>
</html>
07/01/23, 10:06 - Harecharan CSE E Amrita CBE: for ganesh
07/01/23, 10:06 - Harecharan CSE E Amrita CBE: https://www.w3docs.com/tools/code-editor/9031
07/01/23, 10:35 - Harecharan CSE E Amrita CBE: <Media omitted>
07/01/23, 12:23 - Araviiii 🎓: Guys I am in it canteen
07/01/23, 12:23 - Araviiii 🎓: IT*
07/01/23, 12:34 - Sanjuuu 🎓: Ok
07/01/23, 15:22 - Araviiii 🎓: Guys for me proj eval over
07/01/23, 15:22 - Araviiii 🎓: I am going to room
07/01/23, 17:40 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/JfbnpYLe3Ms?feature=share
08/01/23, 12:57 - Harecharan CSE E Amrita CBE: https://www.amazon.com/gp/product/B0BF5LKP5Q?maas=maas_adg_581864362267DF0EE2DE56A2F1551EF5_afap_abs&ref_=aa_maas&tag=maas
08/01/23, 16:13 - Shesadriii 🎓: <Media omitted>
09/01/23, 14:42 - Sooorrrr 🎓: <Media omitted>
09/01/23, 14:42 - Sooorrrr 🎓: AVP schedule
09/01/23, 16:58 - Araviiii 🎓: Guys send the ece portions
09/01/23, 21:21 - Sooorrrr 🎓: <Media omitted>
09/01/23, 21:21 - Gannu: OK
09/01/23, 21:21 - Gannu: Thanks
09/01/23, 21:23 - Viswaa Ramasubramanian: 😞
09/01/23, 21:23 - Gannu: Sorry, I'm busy
09/01/23, 21:23 - Viswaa Ramasubramanian: <Media omitted>
10/01/23, 17:20 - Phoool Gobiiii  🎓: Bois, got pass approved by both Adv and Warden
10/01/23, 17:20 - Phoool Gobiiii  🎓: 😚😚
10/01/23, 19:26 - Araviiii 🎓: Call me when u guys go for dinner
10/01/23, 19:38 - Harecharan CSE E Amrita CBE: kk
10/01/23, 19:55 - Phoool Gobiiii  🎓: <Media omitted>
11/01/23, 05:04 - Phoool Gobiiii  🎓: Reached home bois by around 4:15
11/01/23, 14:24 - Phoool Gobiiii  🎓: Bois
11/01/23, 14:25 - Phoool Gobiiii  🎓: Can somebody collect my admit card?
11/01/23, 14:25 - Araviiii 🎓: Done
11/01/23, 14:26 - Phoool Gobiiii  🎓: <Media omitted>
11/01/23, 14:26 - Araviiii 🎓: I mean it will be done
11/01/23, 14:26 - Phoool Gobiiii  🎓: Thankshhh
11/01/23, 14:26 - Viswaa Ramasubramanian: un sign yaru poduva nae
11/01/23, 14:27 - Phoool Gobiiii  🎓: Sir ta kettu paru
11/01/23, 14:29 - Araviiii 🎓: Yea yea
11/01/23, 14:29 - Araviiii 🎓: Will try
11/01/23, 14:30 - Phoool Gobiiii  🎓: Shreyas has already got it it seems
11/01/23, 14:30 - Phoool Gobiiii  🎓: Don’t worry
11/01/23, 14:30 - Shesadriii 🎓: Yep
11/01/23, 14:32 - Araviiii 🎓: 👍🏻
11/01/23, 14:33 - Viswaa Ramasubramanian: nice
11/01/23, 14:42 - Araviiii 🎓: Did sir took attendance?
11/01/23, 16:44 - Harecharan CSE E Amrita CBE: https://uploadhaven.com/download/89503024a0279ec58b37ca655f6dec7a
11/01/23, 19:32 - Sooorrrr 🎓: Always, after pressing a button the machine will serve coffee and then tea immediately afterward.
A. (press_Button ⇒[] (serve_Coffee ∧O serve_Tea))
B. [](press_Button ⇒ (serve_Coffee ∧ serve_Tea))
C. <>(press_Button ⇒ (serve_Coffee ∧O serve_Tea))
D. (press_Button ⇒<> (serve_Coffee ∧ serve_Tea))
E. [](press_Button ⇒ (serve_Coffee ∧O serve_Tea))
11/01/23, 19:33 - Sooorrrr 🎓: Which of the following not an example of a safety condition?
A. A missile is never launched unless the launch button is pressed
B. If the light is orange then it will become red next
C. A satellite is never launched in a location which is 15 miles within the nearest settlement
D. A train will not cross a train crossing with the gates in the up position
11/01/23, 19:34 - Sooorrrr 🎓: The Fuel level of a car changes from 0 to 2 as follows: a.Level 0, 10 litres, color = orange b.Level 1, 20 litres, color = green c.Level 2, 30 litres, color = blue The fuel tank is empty and is filled to a maximum level of 30 litres. The color changes in the tank is filled to the maximum level.The states for FSM are
A. orange, green, blue
B. orange, blue, green
C. blue, green, orange
D. 10, 20, 30
11/01/23, 19:38 - Sooorrrr 🎓: Which formulas are equal to the formula p AND G(p IMPLIES Xp) ?
 A. p AND GXp	
 B. p AND XGp	
 C. Gp	
 D. p U p
11/01/23, 19:41 - Sooorrrr 🎓: Specify the following as LTL properties. p, q, r are atomic propositions. `   “p is false until r occurs, but r may not occur at all. “
A. G ¬r /\ (¬pUr) 
B. G¬r /\ (pUr) 
C. G ¬r \/ (¬pUr)  
D. G¬r \/ (pUr)
11/01/23, 19:43 - Sooorrrr 🎓: Which is the LTL statement for: Getting a rank in studies and excelling in sports is not always possible. If P: Getting University Rank, Q: Excelling in Sports
A. NOT(P => NOT Q)
B. NOT [] (P ^ Q)
C. [] (P => NOT Q)
D. NOT P => Q
11/01/23, 19:44 - Sooorrrr 🎓: Which is the LTL statement for: Getting a rank in studies and excelling in sports is not always possible. If P: Getting University Rank, Q: Excelling in Sports
A. NOT(P => NOT Q)
B. NOT [] (P ^ Q)
C. [] (P => NOT Q)
D. NOT P => Q
11/01/23, 19:44 - Sooorrrr 🎓: In a uni-processor single core system concurrent processes cannot have overlapped
A. Execution
B. Completion
C. Access
D. Termination
11/01/23, 19:50 - Shesadriii 🎓: [CO3][BTL3] A car can be operated in either Auto mode(A) or manual mode (M) but not both at the same time. This property expressed in LTL as
A. [] (A && M)
B. [] ! (A && M)
C. [] (!A && !M)
D. <> (!A && !M)
E. <> ! (A && M)
11/01/23, 19:50 - Sooorrrr 🎓: Which of the following is not a characteristic of risky concurrency? i.Read-only data ii.At least one modifies the resource iii.No shared data or communication iv.Two threads access shared resource without synchronisation
A. ii, iv
B. i,iii
C. i,ii
D. i,iv
11/01/23, 19:51 - Shesadriii 🎓: Which of the following is FALSE?
C) A P is infinitely often TRUE
(D B. P V XQ <=> Either P holds in a state or Q holds in the next state
C) C. (P A (Q U R)) P holds in a state and R holds until Q holds
(D D. XP V XXP P is TRUE in the next state or the next but one.
11/01/23, 19:53 - Gannu: <Media omitted>
11/01/23, 19:54 - Gannu: <Media omitted>
11/01/23, 19:55 - Gannu: <Media omitted>
11/01/23, 19:56 - Gannu: <Media omitted>
12/01/23, 11:48 - Phoool Gobiiii  🎓: Bois when did y’all apply for tmrw’s pass?
12/01/23, 11:48 - Phoool Gobiiii  🎓: Which time?
12/01/23, 11:49 - Araviiii 🎓: afternoon 3pm
12/01/23, 11:49 - Phoool Gobiiii  🎓: Okayy
12/01/23, 11:49 - Gannu: 5 pm
12/01/23, 11:49 - Sooorrrr 🎓: 5  not 3
12/01/23, 11:49 - Araviiii 🎓: yea pom
12/01/23, 11:49 - Araviiii 🎓: 5pm
12/01/23, 11:49 - Sooorrrr 🎓: We can leave at 3
12/01/23, 11:49 - Araviiii 🎓: not 3
12/01/23, 11:49 - Araviiii 🎓: my bad da
12/01/23, 11:49 - Phoool Gobiiii  🎓: So 5?
12/01/23, 11:49 - Phoool Gobiiii  🎓: Okayy
12/01/23, 11:50 - Araviiii 🎓: ss then only we can leave by 3pm
12/01/23, 11:50 - Phoool Gobiiii  🎓: Yeah yeah
12/01/23, 11:50 - Araviiii 🎓: that's was the pla
12/01/23, 11:50 - Araviiii 🎓: plan
12/01/23, 13:41 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/iB30gafRUVM?feature=share
12/01/23, 20:39 - Sanjuuu 🎓: <Media omitted>
13/01/23, 09:36 - Harecharan CSE E Amrita CBE: <Media omitted>
13/01/23, 19:25 - Araviiii 🎓: <Media omitted>
13/01/23, 20:02 - Sanjuuu 🎓: <Media omitted>
13/01/23, 20:09 - Viswaa Ramasubramanian: Semmaya irundhichu
13/01/23, 20:14 - Sanjuuu 🎓: It was really good
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:54 - Araviiii 🎓: <Media omitted>
13/01/23, 20:57 - Araviiii 🎓: null
13/01/23, 20:59 - Shesadriii 🎓: <Media omitted>
14/01/23, 08:19 - Sooorrrr 🎓: Reached home🏠
14/01/23, 08:19 - Araviiii 🎓: Reached home 🏡 bois
14/01/23, 08:19 - Gannu: Reached home 🏠
14/01/23, 09:05 - Araviiii 🎓: Guys don't book tickets for me on Feb 19
15/01/23, 09:53 - Araviiii 🎓: Happy thai pongal booiiss
15/01/23, 10:07 - Viswaa Ramasubramanian: Happy thala pongal nae 😂
15/01/23, 10:07 - Viswaa Ramasubramanian: <Media omitted>
15/01/23, 10:46 - Harecharan CSE E Amrita CBE: Happy pongal🥳🥳
15/01/23, 10:46 - Gannu: Happy pongal ✨
15/01/23, 10:50 - Sooorrrr 🎓: Happy pongal
15/01/23, 13:44 - Viswaa Ramasubramanian: <Media omitted>
15/01/23, 13:44 - Viswaa Ramasubramanian: <Media omitted>
15/01/23, 13:49 - Viswaa Ramasubramanian: <Media omitted>
15/01/23, 23:02 - Sanjuuu 🎓: bois
15/01/23, 23:02 - Sanjuuu 🎓: do we have dll in adt
15/01/23, 23:02 - Sanjuuu 🎓: ?
15/01/23, 23:02 - Harecharan CSE E Amrita CBE: u r studying!!!
15/01/23, 23:03 - Sanjuuu 🎓: 😑
15/01/23, 23:03 - Harecharan CSE E Amrita CBE: I still didn't touch a damn thing
15/01/23, 23:03 - Sanjuuu 🎓: i already regret not doing anything yesterday
15/01/23, 23:03 - Gannu: Same here
15/01/23, 23:03 - Harecharan CSE E Amrita CBE: same, but still watching movies
15/01/23, 23:03 - Araviiii 🎓: nanum than
15/01/23, 23:03 - Harecharan CSE E Amrita CBE: we have
15/01/23, 23:03 - Gannu: What about today??
15/01/23, 23:04 - Sanjuuu 🎓: bruh….that was not the question
15/01/23, 23:04 - Araviiii 🎓: lol
15/01/23, 23:04 - Araviiii 🎓: 😂😂
15/01/23, 23:04 - Sanjuuu 🎓: started with adt
15/01/23, 23:04 - Sanjuuu 🎓: stack queue deque done
15/01/23, 23:04 - Gannu: Good 🙂
15/01/23, 23:04 - Sanjuuu 🎓: seeing linked list
15/01/23, 23:04 - Sanjuuu 🎓: do we have dll?
15/01/23, 23:05 - Harecharan CSE E Amrita CBE: i think s da
15/01/23, 23:05 - Araviiii 🎓: I think s
15/01/23, 23:05 - Harecharan CSE E Amrita CBE: we have dll
15/01/23, 23:05 - Gannu: Ss
15/01/23, 23:05 - Sanjuuu 🎓: its not there in ppts that's why
15/01/23, 23:05 - Araviiii 🎓: mudicha padi illana vittudu ….
15/01/23, 23:06 - Harecharan CSE E Amrita CBE: applies for anything and everything
15/01/23, 23:07 - Harecharan CSE E Amrita CBE: guys from tmrw we also become studying beasts, ok va !!
15/01/23, 23:07 - Sanjuuu 🎓: <Media omitted>
15/01/23, 23:07 - Sanjuuu 🎓: 🫡
15/01/23, 23:08 - Sanjuuu 🎓: No beasts here...we are getting so bored....
15/01/23, 23:08 - Sanjuuu 🎓: Literally nothing to do
15/01/23, 23:08 - Sanjuuu 🎓: Viswa....parle g irukka?
15/01/23, 23:09 - Sanjuuu 🎓: <Media omitted>
15/01/23, 23:09 - Harecharan CSE E Amrita CBE: viswa and u r in hostel only no da
15/01/23, 23:09 - Sanjuuu 🎓: Raj Krishna and eniyan there
15/01/23, 23:09 - Harecharan CSE E Amrita CBE: ok ok
15/01/23, 23:10 - Harecharan CSE E Amrita CBE: go tell raj "chai" from hare
15/01/23, 23:10 - Sanjuuu 🎓: oh u mean both are in hostel then why text
15/01/23, 23:10 - Sanjuuu 🎓: viswa studying in your room
15/01/23, 23:10 - Sanjuuu 🎓: im in mine
15/01/23, 23:10 - Harecharan CSE E Amrita CBE: s
15/01/23, 23:10 - Harecharan CSE E Amrita CBE: nadaka somberithanam
15/01/23, 23:12 - Sanjuuu 🎓: Yea
15/01/23, 23:12 - Sanjuuu 🎓: <Media omitted>
15/01/23, 23:12 - Sanjuuu 🎓: And...u guys...
15/01/23, 23:13 - Sanjuuu 🎓: I'm so hungry...I can't even make oats
15/01/23, 23:13 - Viswaa Ramasubramanian: ece assignment vera
15/01/23, 23:13 - Viswaa Ramasubramanian: varayanuma da hare q1
15/01/23, 23:13 - Sanjuuu 🎓: Everyone locked everything u0
15/01/23, 23:13 - Sanjuuu 🎓: Up*
15/01/23, 23:13 - Sanjuuu 🎓: 😒
15/01/23, 23:13 - Viswaa Ramasubramanian: onnoda stimulation ah thooki kuppaila poda soltanga @916383425519
15/01/23, 23:14 - Gannu: There is nothin in my cupboard
15/01/23, 23:14 - Sanjuuu 🎓: Kettle
15/01/23, 23:14 - Viswaa Ramasubramanian: also in ur brain bro marandhuradha adha
15/01/23, 23:14 - Gannu: Oh shit…. My bad 😞
15/01/23, 23:14 - Harecharan CSE E Amrita CBE: oh yeah i totally 4 got ece assignment
15/01/23, 23:14 - Harecharan CSE E Amrita CBE: q1 simulation venam na
15/01/23, 23:14 - Viswaa Ramasubramanian: anga ganesh okandhu padikiran pola veetla
15/01/23, 23:15 - Harecharan CSE E Amrita CBE: ill send  the text ans tmrw mrng first thing
15/01/23, 23:15 - Gannu: Takkunu mudi appo dhaan na start panna mudiyum
15/01/23, 23:15 - Harecharan CSE E Amrita CBE: submission deadline?
15/01/23, 23:15 - Viswaa Ramasubramanian: <Media omitted>
15/01/23, 23:16 - Gannu: <Media omitted>
15/01/23, 23:16 - Viswaa Ramasubramanian: Dei hall ku poi oru photo potah nambirivoma
15/01/23, 23:16 - Harecharan CSE E Amrita CBE: <Media omitted>
15/01/23, 23:16 - Viswaa Ramasubramanian: Poi sollu ADK evicted nu
15/01/23, 23:16 - Sanjuuu 🎓: how is the iphone
15/01/23, 23:17 - Harecharan CSE E Amrita CBE: im more excited to see m2 powered suryas mac
15/01/23, 23:17 - Gannu: One more day to go
15/01/23, 23:17 - Gannu: Awesome
15/01/23, 23:19 - Viswaa Ramasubramanian: Adhan terinja visyamachae always apple >>> other products
15/01/23, 23:19 - Harecharan CSE E Amrita CBE: dei ingayum intha argument aa aaramikaatha da
15/01/23, 23:19 - Araviiii 🎓: its wrong bro
15/01/23, 23:20 - Araviiii 🎓: k
15/01/23, 23:20 - Harecharan CSE E Amrita CBE: veetlayaavathu nimmathiyaa irukirenee
15/01/23, 23:20 - Viswaa Ramasubramanian: 😅😅😅
15/01/23, 23:20 - Viswaa Ramasubramanian: summa koluthi poduvom
15/01/23, 23:20 - Harecharan CSE E Amrita CBE: inthannale rendu peru adichikuvaanga neeya poi samaali
15/01/23, 23:21 - Harecharan CSE E Amrita CBE: ok da guys gdnt
15/01/23, 23:21 - Viswaa Ramasubramanian: You deleted this message
15/01/23, 23:21 - Viswaa Ramasubramanian: yaara solra nu terilayae
15/01/23, 23:21 - Sanjuuu 🎓: u going to sleep?
15/01/23, 23:21 - Sanjuuu 🎓: class Node:
    def _init_(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def _init_(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
            new_node.prev = current

    def prepend(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def delete(self, data):
        current = self.head
        if current is not None:
            if current.data == data:
                self.head = current.next
                current.next.prev = None
            else:
                while current.next is not None:
                    if current.data == data:
                        break
                    current = current.next
                if current.next is not None:
                    current.prev.next = current.next
                    current.next.prev = current.prev
                else:
                    if current.data == data:
                        current.prev.next = None

    def print_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next
15/01/23, 23:21 - Viswaa Ramasubramanian: naalam edhuvum sollala boiss ivan dhan edho solran
15/01/23, 23:22 - Viswaa Ramasubramanian: podhu innaiki hare thoonguna mari dhan
15/01/23, 23:22 - Sanjuuu 🎓: sleep after u take a look at this
15/01/23, 23:31 - Sanjuuu 🎓: class Stack():
    def __init__(self):
        self.items = []

    def isempty(self):
        if len(self.items) == 0:
            return True
        else:
            return False

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.isempty():
            return self.items.pop()
        else:
            return None

    def peek(self):
        if not self.isempty:
            return self.items[-1]
        else:
            return None

    def size(self):
        return len(self.items)


class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if len(self.queue) < 1:
            return None
        return self.queue.pop(0)

    def size(self):
        return len(self.queue)

    def reverse(self):
        temp = Stack()
        temp2 = self
        while temp2.size != 0:
            temp.push(temp2.dequeue())
        while not temp.isempty():
            temp2.enqueue(temp.pop())
        return temp2
15/01/23, 23:31 - Sanjuuu 🎓: This message was deleted
15/01/23, 23:31 - Sanjuuu 🎓: This message was deleted
15/01/23, 23:32 - Sanjuuu 🎓: This message was deleted
15/01/23, 23:32 - Sanjuuu 🎓: This message was deleted
15/01/23, 23:32 - Sanjuuu 🎓: wrong grp
15/01/23, 23:32 - Sanjuuu 🎓: sorry
16/01/23, 00:05 - Viswaa Ramasubramanian: <Media omitted>
16/01/23, 00:06 - Viswaa Ramasubramanian: podra vediya 💥
16/01/23, 07:01 - Phoool Gobiiii  🎓: Seeing this makes me sleep more
16/01/23, 10:32 - Harecharan CSE E Amrita CBE: The task is to design a logic circuit that allows data coming through a 4-bit line (b1, b2, b3, b4) to be sent to a display through an output (y1, y2, y3, y4) only if the user enters the right 5-bit password. The password is set through another input (p1, p2, p3, p4, p5) and the user entered value is input through the line (u1, u2, u3, u4, u5).

One way to implement this logic circuit is by using XOR gates and an AND gate. XOR gates are used to compare each bit of the password to the corresponding bit of the user input. If all the bits of the user input match the corresponding bits of the password, the XOR gates will output 0, indicating that the user input matches the password. The output of these XOR gates will be connected to an AND gate, which will determine whether the user input matches the password. If the user input matches the password, the AND gate will output a 1, indicating that the data (b1, b2, b3, b4) can be sent to the display (y1, y2, y3, y4).

To determine whether an 8-bit ASCII input corresponds to the letters ‘a’, ‘b’ or ‘c’, where we only compare the last two digits, we can use a combination of logic gates and comparators.

First, we need to establish the ASCII codes for the letters ‘a’, ‘b’, and ‘c’ for the last 2 bits. These are 01, 10, and 11 respectively in binary.

To compare the last two bits of the 8-bit input to the ASCII codes of ‘a’, ‘b’, and ‘c’, we can use a 2:1 multiplexer (MUX) to select the last two bits of the 8-bit input.
Then we can use a series of 2 comparators, one for each bit of the selected two bits of the input.
Each comparator compares one bit of the input to the corresponding bit of the ASCII code for ‘a’, ‘b’, or ‘c’.
If both comparators output a 1, it means that the input matches the ASCII code for that letter.

The outputs of the comparators for ‘a’, ‘b’, and ‘c’ can be connected to AND gates.
If the input matches the ASCII code for ‘a’, the output of the AND gate for ‘a’ will be 1, which can be used to assert the output a_recd.
Similarly, if the input matches the ASCII code for ‘b’, the output of the AND gate for ‘b’ will be 1, which can be used to assert the output b_recd.
And if the input matches the ASCII code for ‘c’, the output of the AND gate for ‘c’ will be 1, which can be used to assert the output c_recd.
16/01/23, 10:32 - Harecharan CSE E Amrita CBE: ans for 1st one in text (chatgpt help but I modified some to adapt to our question)
16/01/23, 10:33 - Harecharan CSE E Amrita CBE: can someone send me their answers pdf?
16/01/23, 11:53 - Harecharan CSE E Amrita CBE: <Media omitted>
16/01/23, 11:53 - Harecharan CSE E Amrita CBE: <Media omitted>
16/01/23, 12:47 - Harecharan CSE E Amrita CBE: <Media omitted>
17/01/23, 10:32 - Phoool Gobiiii  🎓: <Media omitted>
17/01/23, 12:47 - Viswaa Ramasubramanian: class node:
    def __init__(self, data):
        self.data = data
        self.next = None


class sll:
    def __init__(self):
        self.head = None

    def printl(self):
        n = self.head

        if n is None:
            print("the linked list is empty")
        else:
            while n is not None:
                print(n.data)
                n = n.next

    #size of sll
    def size(self):
        n=self.head
        size=0
        if n is None:
            return size
        else:
            while n is not None:
                size=size+1
                n=n.next
            return size



    def adde(self, data):#add end
        new = node(data)
        if self.head is None:
            self.head = new
        else:
            n = self.head
            while n.next is not None:
                n = n.next
            n.next = new

    def addb(self, data):#add beginning
        newn = node(data)
        newn.next = self.head
        self.head = newn

    def addat(self,data,p):#add after element p
        new = node(data)
        if self.head is None:
            self.head = new
        else:
            n = self.head
            while n.data is not p:
                n = n.next
            new.next = n.next
            n.next = new

    # insert at a particular position or replace
    def rep(self, p, e):
        new = node(e)
        n = self.head
        prev = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
            while prev.next is not n:
                prev = prev.next
        prev.next = new
        new.next = n.next

    def rep2(self, p, e):
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
            n.data=e

    # insert after a node
    def addaftnode(self, p, e):
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
        new.next = n.next
        n.next = new

    #insert before the node
    def addbefnode(self, p, e):
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p-1):
                n = n.next
                i = i + 1
        new.next = n.next
        n.next = new

    def delb(self):#delete beginning
        if self.head is None:
            print("empty")
        else:
            self.head = self.head.next


    def dele(self): #delete end
        n=self.head
        prev=self.head
        while n.next is not None:
                n=n.next
        while prev.next is not n:
            prev=prev.next
        prev.next=None

    def delele(self,p):#delete element
        if self.head is None:
            print("empty")
        else:
            n = self.head
            while n.data is not p:
                n = n.next
            prev = self.head
            while prev.next is not n:
                prev = prev.next
            prev.next=n.next

    def delat(self,p):#delete element at that particular node
        if self.head is None:
            print("empty")
        else:
            n = self.head
            prev = self.head
            i=0
            while(i<p):
                n=n.next
                i+=1
            while prev.next is not n:
                prev = prev.next
            prev.next=n.next

    #delete before a node
    def delbef(self,p):
        n=self.head
        prev = self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            if(p==0):
                print("There is no element before to get delete")
            if(p==1):
                self.head=self.head.next
            else:
                while(i<p):
                    n=n.next
                    i=i+1
                while(j<p-2):
                    prev = prev.next
                    j=j+1
                prev.next=n

    #delete after a node
    def delafter(self,p):
        if self.head is None:
            print("empty")
        else:
            if(p==self.size()):
                print("There is no element after to delete")
            else:
                if(p==self.size()-1):
                    n=self.head
                    i=0
                    while (i<p):
                        n=n.next
                        i+=1
                    n.next=None
                else:
                    i=0
                    p1=self.head
                    p2=self.head
                    while(i<p):
                        p1=p1.next
                        i+=1
                    while(i<p+1):
                        p2=p2.next
                        i+=1
                    p1.next=p2.next

    #swap elements of two nodes using replace
    def swap(self,p,q):
        p1=self.head
        p2=self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            while(i<p):
                p1=p1.next
                i=i+1
            while(j<q):
                p2=p2.next
                j=j+1
            t1=p1.data
            t2=p2.data
            self.rep(p,t2)
            self.rep(q,t1)

    def swap2(self,p,q):#direct swapping
        p1=self.head
        p2=self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            while(i<p):
                p1=p1.next
                i=i+1
            while(j<q):
                p2=p2.next
                j=j+1
            p1.data,p2.data=p2.data,p1.data


l1 = sll()
l1.adde(10)
l1.adde(20)
l1.addb(30)
l1.addb(40)
l1.delb()
l1.dele()
l1.addat(20,30)
# l1.delele(20)
# l1.delat(1)
l1.rep(1,40)
l1.addaftnode(1,50)
l1.addbefnode(3,60)
l1.swap(4,2)
# l1.delbef(0)
print(l1.size())
l1.delafter(0)
l1.rep2(1,20)
l1.printl()
17/01/23, 13:44 - Viswaa Ramasubramanian: class node:
    def __init__(self, data):
        self.data = data
        self.next = None


class sll:
    def __init__(self):
        self.head = None

    def printl(self):
        n = self.head

        if n is None:
            print("the linked list is empty")
        else:
            while n is not None:
                print(n.data)
                n = n.next

    #size of sll
    def size(self):
        n=self.head
        size=0
        if n is None:
            return size
        else:
            while n is not None:
                size=size+1
                n=n.next
            return size

    #first element
    def first(self):
        if self.head is None:
            print("the list is empty")
        else:
            return self.head.data

    #last element
    def last(self):
        if self.head is None:
            print("the list is empty")
        else:
            n=self.head
            while n.next is not None:
                n=n.next
            return n.data

    def isfirst(self,p):
        if self.head is None:
            print("the list is empty")
        else:
            return self.head.data==p;

    def islast(self,p):
        if self.head is None:
            print("the list is empty")
        else:
            n=self.head
            while n.next is not None:
                n=n.next
            return n.data==p

    def getnode(self,p):
        if self.head is None:
            print("the list is empty")
        else:
            n=self.head
            count=0
            while n.data is not p and n.next is not None:
                n=n.next
                count=count+1
            if count==self.size()-1:
                return -1
            else:
                return count


    def adde(self, data):#add end
        new = node(data)
        if self.head is None:
            self.head = new
        else:
            n = self.head
            while n.next is not None:
                n = n.next
            n.next = new

    def addb(self, data):#add beginning
        newn = node(data)
        newn.next = self.head
        self.head = newn

    def addat(self,data,p):#add after element p
        new = node(data)
        if self.head is None:
            self.head = new
        else:
            n = self.head
            while n.data is not p:
                n = n.next
            new.next = n.next
            n.next = new

    # insert at a particular position or replace
    def rep(self, p, e):
        new = node(e)
        n = self.head
        prev = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
            while prev.next is not n:
                prev = prev.next
        prev.next = new
        new.next = n.next

    def rep2(self, p, e):#replace using data
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
            n.data=e

    # insert after a node
    def addaftnode(self, p, e):
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p):
                n = n.next
                i = i + 1
        new.next = n.next
        n.next = new

    #insert before the node
    def addbefnode(self, p, e):
        new = node(e)
        n = self.head
        if self.head is None:
            self.head = new
        else:
            i = 0
            while (i < p-1):
                n = n.next
                i = i + 1
        new.next = n.next
        n.next = new


    def insertBefore(self, e, l):#element based
        if self.head is None:
            print("List Empty")
        elif self.head.data == l:
            self.insertFront(e)
        else:
            newNode = node(e)
            currentNode = self.head
            while currentNode.next.data != l:
                currentNode = currentNode.next
            newNode.next = currentNode.next
            currentNode.next = newNode


    def insertAfter(self, e, l):#element based
        newNode = node(e)
        currentNode = self.head
        while currentNode.data != l:
            currentNode = currentNode.next
        newNode.next = currentNode.next
        currentNode.next = newNode

    def delb(self):#delete beginning
        if self.head is None:
            print("empty")
        else:
            self.head = self.head.next


    def dele(self): #delete end
        n=self.head
        prev=self.head
        while n.next is not None:
                n=n.next
        while prev.next is not n:
            prev=prev.next
        prev.next=None

    def delele(self,p):#delete element(element based)
        if self.head is None:
            print("empty")
        else:
            n = self.head
            while n.data is not p:
                n = n.next
            prev = self.head
            while prev.next is not n:
                prev = prev.next
            prev.next=n.next

    def delat(self,p):#delete element at that particular node(node based)
        if self.head is None:
            print("empty")
        else:
            n = self.head
            prev = self.head
            i=0
            while(i<p):
                n=n.next
                i+=1
            while prev.next is not n:
                prev = prev.next
            prev.next=n.next

    #delete before a node
    def delbef(self,p):
        n=self.head
        prev = self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            if(p==0):
                print("There is no element before to get delete")
            if(p==1):
                self.head=self.head.next
            else:
                while(i<p):
                    n=n.next
                    i=i+1
                while(j<p-2):
                    prev = prev.next
                    j=j+1
                prev.next=n

    #delete after a node
    def delafter(self,p):
        if self.head is None:
            print("empty")
        else:
            if(p==self.size()):
                print("There is no element after to delete")
            else:
                if(p==self.size()-1):
                    n=self.head
                    i=0
                    while (i<p):
                        n=n.next
                        i+=1
                    n.next=None
                else:
                    i=0
                    p1=self.head
                    p2=self.head
                    while(i<p):
                        p1=p1.next
                        i+=1
                    while(i<p+1):
                        p2=p2.next
                        i+=1
                    p1.next=p2.next


    def deleteAfter(self, l):#(based on element)
        currentNode = self.head
        while currentNode.data != l:
            currentNode = currentNode.next
        if (not currentNode.next is None):
            currentNode.next = currentNode.next.next
        else:
            print("No element found!")


    def deleteBefore(self, l):#based on element
        currentNode = self.head
        if (currentNode.data == l):
            print("No element found!")
        else:
            while currentNode.next.next.data != l:
                currentNode = currentNode.next
            currentNode.next = currentNode.next.next

    #swap elements of two nodes using replace
    def swap(self,p,q):
        p1=self.head
        p2=self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            while(i<p):
                p1=p1.next
                i=i+1
            while(j<q):
                p2=p2.next
                j=j+1
            t1=p1.data
            t2=p2.data
            self.rep(p,t2)
            self.rep(q,t1)

    def swap2(self,p,q):#direct swapping
        p1=self.head
        p2=self.head
        if self.head is None:
            print("empty")
        else:
            i,j=0,0
            while(i<p):
                p1=p1.next
                i=i+1
            while(j<q):
                p2=p2.next
                j=j+1
            p1.data,p2.data=p2.data,p1.data


l1 = sll()
l1.adde(10)
l1.adde(20)
l1.addb(30)
l1.addb(40)
l1.delb()
l1.dele()
l1.addat(20,30)
# l1.delele(20)
# l1.delat(1)
l1.rep(1,40)
l1.addaftnode(1,50)
l1.addbefnode(3,60)
l1.swap(4,2)
# l1.delbef(0)
print(l1.size())
l1.delafter(0)
l1.rep2(1,20)
l1.insertAfter(45,60)
l1.insertBefore(63,50)
l1.deleteAfter(45)
l1.deleteBefore(30)
l1.printl()
print(l1.first())
print(l1.last())
print(l1.isfirst(30))
print(l1.getnode(35))
17/01/23, 13:48 - Sooorrrr 🎓: class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        if len(self.items) == 0:
            return True
        else:
            return False

    def printstack(self):
        for i in range(-1, -len(self.items)-1,-1):
            print(self.items[i])

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.isEmpty():
            return self.items.pop()
        else:
            return None

    def top(self):
        if not self.isEmpty():
            return self.items[-1]
        else:
            return None

    def size(self):
        return len(self.items)


st = Stack()
st.push(1)
st.push(2)
# print(st.top())
st.printstack()
# st.pop()
# print(st.top())
17/01/23, 13:48 - Sooorrrr 🎓: from PyPrac6 import Stack


class Queue:
    def __init__(self):
        self.queue = []

    def printqueue(self):
        print(self.queue)

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if len(self.queue) < 1:
            return None
        return self.queue.pop(0)

    def size(self):
        return len(self.queue)

    def reverse(self):
        temp = Stack()
        temp2 = self
        while temp2.size != 0:
            temp.push(temp2.dequeue())
        while not temp.isEmpty():
            temp2.enqueue(temp.pop())
        return temp2

q=Queue()
q.enqueue(1)
q.enqueue(2)
q.printqueue()
17/01/23, 14:23 - Sooorrrr 🎓: def reverse(self):
        temp = Stack()
        temp2 = self.queue
        while len(temp2) != 0:
            temp.push(temp2.pop(0))
        while not temp.isEmpty():
            temp2.append(temp.pop())
        return temp2
17/01/23, 14:32 - Viswaa Ramasubramanian: def reverse2(self):
        temp = Stack()
        temp2 = Queue()
        for item in self.queue:
            temp2.queue.append(item)
        while temp2.size() != 0:
            temp.push(temp2.dequeue())
        while not temp.isEmpty():
            temp2.enqueue(temp.pop())
        temp2.printqueue()
        return temp2
17/01/23, 17:06 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void explainlist(){
    list <int> ls;
    ls.push_back(2);
    ls.emplace_back(4);
    ls.push_front(5);
    ls.emplace_front(10);
    // ls.pop_front();
    // ls.pop_back();
    //rest functions same as vector
    //begin,end,rbegin,clear,insert,size,swap
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }

    list <int> :: iterator it = ls.begin();
    advance(it, 2);
    ls.insert(it,100);
    // cout<<endl<<endl;
    // for(auto it=ls.rbegin();it!=ls.rend();it++){
    //     cout<<*it<<endl;
    // }
    cout<<endl;
    for(auto it=ls.begin(); it!=ls.end();it++){
        cout<<*it<<endl;
    }
    cout<<endl;
    cout<<ls.front();
}
int main(){
    explainlist();
}
17/01/23, 17:07 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void expvec(){
    vector <int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.pop_back();
    cout<< vec.size()<<endl;
    cout<< vec.capacity()<<endl;
    cout<<"The vector is :"<<endl;
    for(auto i=vec.begin(); i!=vec.end();i++){
        cout<<*i<<" ";
    }
}
int main(){
    expvec();
}
17/01/23, 17:08 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void explainstack(){
    stack<vector<int>> st;

    stack<int> st2;
    vector <int> v1;
    v1.emplace_back(1);
    v1.push_back(2);
    st.push(v1);
    vector <int> v2;
    v2.emplace_back(3);
    v2.push_back(4);
    st.push(v2);
    // stack<int> st3;
    // st.pop();
    // st2=st;
    cout<<st.top()[1]<<endl;
    while(!st.empty()){
        // cout<<st.top()<<endl;
        for(auto it=st.top().begin();it!=st.top().end();it++){
            cout<<*it<<" ";
        }
        cout<<endl;
        st.pop();
    }
    // cout<<st.top();
}
int main(){
    explainstack();
}
17/01/23, 17:08 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
void explorequeue(){
    queue <int> q1;
    q1.push(1);
    q1.push(2);
    cout<<q1.front();
    cout<<" ";
    cout<<q1.back();  
    cout<<endl;
    q1.pop();
    cout<<q1.front();----------------------------------------------------------
}

void explorevectors(){
    vector <int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.insert(vec.begin()+4,8);
    for(auto it=vec.begin(); it!=vec.end();it++){
        cout<<*it<<" ";

    }
}
int main(){
    explorequeue();
}
17/01/23, 17:09 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
int main(){
    // queue <int> q1;
    // stack <int> s1;
    // q1.push(1);
    // q1.push(2);
    // q1.push(3);
    // queue <int> q2;
    // while(!q1.empty()){
    //     s1.push(q1.front());
    //     q1.pop();
    // }
    // while(!s1.empty()){
    //     q1.push(s1.top());
    //     s1.pop();
    // }
    // while(!q1.empty()){
    //     cout<<q1.front();
    //     q1.pop();
    //     cout<<" ";
    // }
    // cout<<endl;
    // // while(q1.size()!=1){
    // //     q2.push(q1.front());
    // //     q1.pop();
    // // }
    // cout<<endl;
    // while(!q2.empty()){
    //     cout<<q2.front()<<" ";
    //     q2.pop();
    // }
    queue<int> q1;
    q1.push(1);
    q1.push(2);
    q1.push(3);
    stack <int> s1;
    queue<int> q2=q1;
    while(!q2.empty()){
        cout<<q2.front()<<" ";
        q2.pop();
    }

    while(!q1.empty()){
        s1.push(q1.front());
        q1.pop();
    }
    while(!s1.empty()){
        q1.push(s1.top());
        s1.pop();
    }
    cout<<endl;
    while(!q1.empty()){
        cout<<q1.front()<<" ";
        q1.pop();
    }

}
17/01/23, 17:09 - Sooorrrr 🎓: #include <iostream>
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
stack <int> rev(stack <int> s){
    stack <int> s3;
    while(!s.empty()){
        s3.push(s.top());
        s.pop();
    }
    return s3;
}
int main(){
    stack <int> s1;
    s1.push(5);
    s1.push(4);
    s1.push(3);
    stack <int> s2;
    s2=rev(s1);
    s2.pop();
    s1=rev(s2);
    cout<<endl;
    while(!s1.empty()){
        cout<<s1.top()<<" ";
        s1.pop();
    }
}
17/01/23, 17:10 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class Matrix{
    private:
    int n;
    int m;
    int arr[100][100]={};
    public:
    Matrix(){}
    Matrix(int n,int m){
        this->n=n;
        this->m=m;
    }
    void getmat(){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout<<"Enter an element";
                cin>>arr[i][j];
            }
        }
    }
    void print(){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout<<arr[i][j]<<endl;
            }
        }
    }
    Matrix operator +(Matrix obj){
        Matrix temp;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                temp.arr[i][j]=arr[i][j]+obj.arr[i][j];
            }
        }
        temp.n=n;
        temp.m=m;
        return temp;
    }
    Matrix operator *(Matrix obj){
        Matrix t;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                for(int k=0;k<m;k++){
                    t.arr[i][j]+=arr[i][k]*obj.arr[k][j];
                }
            }
        }
        t.n=n;
        t.m=m;
        return t;
    }
};
int main(){
    int n,m;
    cout<<"Enter the value of n"<<endl;
    cin>>n;
    cout<<"Enter the value of m"<<endl;
    cin>>m;
    Matrix mat1(n,m);
    mat1.getmat();
    mat1.print();
    cout<<"Enter the values of next matrix : "<<endl;
    Matrix mat2(n,m);
    mat2.getmat();
    mat2.print();
    cout<<"Values of sum matrix : "<<endl;
    Matrix mat3;
    mat3=mat1+mat2;
    mat3.print();
    cout<<"Values of multi matrix : "<<endl;
    Matrix mat4;
    mat4=mat1*mat2;
    mat4.print();
}
17/01/23, 18:54 - Shesadriii 🎓: template<class T>
class myPair{
    T a,b;
    public:
        myPair(T a,T b){
            this->a = a;
            this->b = b;
        }
        T getMax();
};

template<class T>
T myPair<T>::getMax(){
    T returnVal;
    returnVal=a>b?a:b;
    return returnVal;
}

int main(){
    myPair<int> obj(100,75);
    cout<<obj.getMax();
}
17/01/23, 20:55 - Sooorrrr 🎓: #include <iostream>
#include <list>
#include <math.h>
using namespace std;
class Hash{
    int Bucket;
    list<int> *container;
    public :
    Hash(int Bucket){
        this->Bucket = Bucket;
        list <int> container[Bucket];
    }
    int hashFunction(int x) {
        return (x % Bucket);
    }
    void insertitem(int key){
        int index=hashFunction(key);
        container[index].push_back(key);
    }
    void removeitem(int key){
        int index=hashFunction(key);
        list <int>:: iterator it;
        for(it=container[index].begin(); it!=container[index].end();it++){
            if(*it==key){
                break;
            }
        }
        if(it!=container[index].end()){
            container[index].erase(it);
        }
    }
    void display(){
        for(int i=0; i<Bucket;i++){
            cout << i <<" ";
            for(auto items:container[i]){
                cout<<"----->"<<items;

            }
            cout<<endl;
        }
    }
};

int main(){
    int a[]={15,11,27,8,12};
    int n=sizeof(a)/sizeof(a[0]);
    Hash h(7);
    for(int i=0;i<n;i++){
        h.insertitem(a[i]);
    }
    h.removeitem(12);
    h.display();
    return 0;
}
17/01/23, 21:05 - Sooorrrr 🎓: #include <iostream>
#include <list>

using namespace std;

class Hash{

    private:
    int Bucket;
    list<int> *container;
    
    public :
    Hash(int Bucket){
        this->Bucket = Bucket;
        container=new list<int> [Bucket];
    }

    int hashFunction(int x) {
        return (x % Bucket);
    }

    void insertitem(int key){
        int index=hashFunction(key);
        container[index].push_back(key);
    }

    void removeitem(int key){
        int index=hashFunction(key);
        list <int>:: iterator it;
        for(it=container[index].begin(); it!=container[index].end();it++){
            if(*it==key){
                break;
            }
        }
        if(it!=container[index].end()){
            container[index].erase(it);
        }
    }

    void display(){
        for(int i=0; i<Bucket;i++){
            cout << i <<" ";
            for(auto items:container[i]){
                cout<<"----->"<<items;

            }
            cout<<endl;
        }
    }
};

int main(){
    int a[]={15,11,27,8,12};
    int n=sizeof(a)/sizeof(a[0]);
    Hash h(5);
    for(int i=0;i<n;i++){
        h.insertitem(a[i]);
    }
    h.removeitem(12);
    h.display();
    return 0;
}
17/01/23, 21:19 - Sooorrrr 🎓: #include <iostream>
#include <vector>
#include <math.h>
using namespace std;
void expvec(){
    vector <int> vec;
    vec.emplace_back(1);
    vec.emplace_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.pop_back();
    cout<< vec.size()<<endl;
    cout<< vec.capacity()<<endl;
    cout<<"The vector is :"<<endl;
    for(auto i=vec.begin(); i!=vec.end();i++){
        cout<<*i<<" ";
    }
}
int main(){
    expvec();
}
17/01/23, 21:32 - Sooorrrr 🎓: #include <iostream>
#include <vector>
#include <math.h>
using namespace std;
void expvec(){
    vector <int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.pop_back();
    cout<< vec.size()<<endl;
    cout<< vec.capacity()<<endl;
    vec.insert(vec.begin()+1, 4);
    cout<<"The vector is :"<<endl;
    for(auto i=vec.begin(); i!=vec.end();i++){
        cout<<*i<<" ";
    }
}
int main(){
    expvec();
}
17/01/23, 21:40 - Harecharan CSE E Amrita CBE: class MyNumber:
    def __init__(self, value):
        self.value = value

    def __add__(self, other):
        return MyNumber(self.value + other.value)

    def __sub__(self, other):
        return MyNumber(self.value - other.value)

    def __mul__(self, other):
        return MyNumber(self.value * other.value)
    
    def __truediv__(self, other):
        return MyNumber(self.value / other.value)

    def __floordiv__(self, other):
        return MyNumber(self.value // other.value)

    def __mod__(self, other):
        return MyNumber(self.value % other.value)

    def __pow__(self, power, modulo=None):
        return MyNumber(self.value ** power)

    def __lt__(self, other):
        return self.value < other.value
    
    def __le__(self, other):
        return self.value <= other.value
    
    def __eq__(self, other):
        return self.value == other.value
    
    def __ne__(self, other):
        return self.value != other.value
    
    def __gt__(self, other):
        return self.value > other.value
    
    def __ge__(self, other):
        return self.value >= other.value
num1 = MyNumber(5)
num2 = MyNumber(10)
result = num1 + num2
print(result.value)  # 15

result = num1 - num2
print(result.value)  # -5

result = num1 * num2
print(result.value)  # 50

result = num1 / num2
print(result.value)  # 0.5

result = num1 // num2
print(result.value)  # 0

result = num1 % num2
print(result.value)  # 5

result = num1 ** num2
print(result.value)  # 9765625

result = num1 < num2
print(result) # True

result = num1 <= num2
print(result) # True

result = num1 == num2
print(result) # False

result = num1 != num2
print(result) # True

result = num1 > num2
print(result) # False

result =num1 >= num2
print(result) # False
17/01/23, 21:47 - Gannu: #include <iostream>
#include <stack>
using namespace std;
void dis(stack <int> s){
    while(!s.empty()){
        cout<<s.top()<<" ";
        s.pop();
    }
    cout<<endl; 
}
void rev(stack <int> s){
    stack <int> sn;
    while(!s.empty()){
        sn.push(s.top());
        s.pop();
    }
    while(!sn.empty()){
        cout<<sn.top()<<" ";
        sn.pop();
    }
}
int main()
{
    stack <int> s1;
    s1.push(1);
    s1.push(2);
    s1.push(3);
    dis(s1);
    stack <int> s2;
    while(!(s1.size()==1)){
        s2.push(s1.top());
        s1.pop();
    }
    rev(s2);

}
17/01/23, 22:02 - Viswaa Ramasubramanian: stack <int> rev_stack(stack <int> s){
    stack <int> r;
    while (!s.empty()){
        r.push(s.top());
        s.pop();

    }
    
    return r;
}

stack <int> queue_del(stack <int> s){
    s = rev_stack(s);
    s.pop();
    s = rev_stack(s);
    return s;
}

void display_queue(stack <int> s){
    s = rev_stack(s);
    while(!s.empty()){
        cout << s.top()<< " ";
        s.pop();
    }

}

int main(){
    stack <int> s;
    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4);
    s.push(5);
    s.push(6);

    s = queue_del(s);
    display_queue(s);
    cout << endl;
    s = queue_del(s);
    display_queue(s);

    s.push(7);
     cout << endl;
    s = queue_del(s);
    display_queue(s);
}
17/01/23, 22:14 - Harecharan CSE E Amrita CBE: .
17/01/23, 22:17 - Sooorrrr 🎓: import math
class Point:
    def __init__(self,a=None,b=None):
        self.a=a
        self.b=b
    def __add__(self, other):
        p=Point()
        p.a=self.a+other.a
        p.b=self.b+other.b
        return p
    def __sub__(self, other):
        p=Point()
        p.a=self.a-other.a
        p.b=self.b-other.b
        return p
    def __mul__(self, other):
        p=Point()
        p.a=self.a*other.a
        p.b=self.b*other.b
        return p
    def __floordiv__(self, other):
        p=Point()
        p.a=self.a//other.a
        p.b=self.a//other.b
        return p
    def __truediv__(self, other):
        p=Point()
        p.a=self.a/other.a
        p.b=self.a/other.b
        return p
p1=Point(1,3)
p2=Point(2,4)
p3=p1+p2
print(p3.a," ",p3.b)
p4=p1-p2
print(p4.a," ",p4.b)
p5=p1*p2
print(p5.a," ",p5.b)
p6=p1//p2
print(p6.a," ",p6.b)
p7=p1/p2
print(p7.a," ",p7.b)
print(math.gcd(2,4))
print(math.lcm(2,4))
17/01/23, 22:18 - Gannu: #include <iostream>
using namespace std;
class addmul{
    private:
    int a;
    public:
    addmul(){
        a=0;
    }
    addmul(int a){
        this->a=a;
    }
    addmul operator +(addmul obj){
        addmul tmp;
        tmp.a=a+obj.a;
        return tmp;

    }
    addmul operator *(addmul obj){
        addmul tmp;
        tmp.a=a*obj.a;
        return tmp;
    }
    void disp(){
        cout<<"(a*b)+c : "<<a;
    }

};
int main()
{
    cout<<"enter a,b,c: ";
    int a,b,c;cin>>a>>b>>c;
    addmul obj1(a),obj2(b),obj3(c);
    addmul obj4=(obj1 * obj2) + obj3;
    obj4.disp();
}
17/01/23, 22:18 - Gannu: #include <iostream>
using namespace std;
class mul{
    private:
    int x=0;
    public:
    mul(){
        x=0;
    };
    mul(int x){
        this->x = x;
    }
    mul operator*(mul m){
        mul t;
        t.x = x * m.x;
        return t;
    }
    mul operator/(mul m){
        mul t;
        t.x = x / m.x;
    }
    void operator++(){
        x++;
    }
    void operator*(int y){
        x*=y;
    }
    void dis(){
        cout<<x;
    }
};
int main()
{
    mul o1(10);
    o1*2;
    o1.dis();

}
17/01/23, 22:19 - Sanjuuu 🎓: <Media omitted>
17/01/23, 22:19 - Sooorrrr 🎓: class Person:
    """Hi this is a class for person"""

    def __init__(self, a, b, c=None):
        print("Hello world")
        self.a = a
        self.b = b
        self.c = c

    def calc(self):
        if (self.c == None):
            print(self.a + self.b, " ", self.a - self.b)
        else:
            print(self.a + self.b + self.c, " ", self.a - self.b - self.c)


p1 = Person(2, 3)
p2 = Person(2, 3, 4)
p1.calc()
p2.calc()
get = getattr(p1, "a")
get2 = getattr(p1, "b")
print(get, " ", get2)
print(hasattr(p1, "a"))
setattr(p1, "a", 4)
print(p1.a)
print(Person.__dict__)
print(Person.__doc__)
print(Person.__module__)
print(Person.__bases__)
17/01/23, 22:28 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class counting{
    private:static int c;
    public:
    counting(){
        c++;
    }
    void display(){
        cout<<c;
    }
};
int counting::c=0;
int main(){
    counting c1[4];
    c1[0].display();
    return 0;
}
17/01/23, 22:28 - Sooorrrr 🎓: #include <iostream>
#include <algorithm>
#include <string>
using namespace std;

int main() {
	int t;
	cin>>t;
	for(int i=0;i<t;i++){
	    int N;
	    int f=0;
	    string S;
	    cin>>N>>S;
	    for(int j=97;j<=122;j++){
	        int c=std::count(S.begin(),S.end(),char(j));
	        if(c%2!=0){
	            f=f+1;
	        }
	    }
	    if(f!=0){
	        cout<<"NO"<<endl;;
	    }
	    else{
	        cout<<"YES"<<endl;;
	    }
	}
	
	return 0;
}
17/01/23, 22:29 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class adder{
    private:
    int x;
    int y;
    public:
    adder(){
        x=0;
        y=0;
    }
    adder(int u, int v){
        x=u;
        y=v;
    }
    adder operator + (adder obj){
        adder c;
        c.x=x+obj.x;
        c.y=y+obj.y;
        return c;
    }
    adder operator - (adder obj){
        adder c;
        c.x=x-obj.x;
        c.y=y-obj.y;
        return c;
    }
    void operator +=(adder obj){
        x=x+2*obj.x;
        y=y+2*obj.y;
    }
    void operator -=(adder obj){
        x=x-2*obj.x;
        y=y-2*obj.y;
    }
    void display(){
        cout<<x<<" ";
        cout<<y<<endl;
    }
    void operator -(){
        x=x-2;
        y=y-2;
    }
    void operator +(){
        x=x+2;
        y=y+2;

    }
};
int main(){
    adder A(1,2);
    adder B(5,4);
    adder C;
    adder D;
    C=A+B;
    D=A-B;
    A+=B;
    A.display();
    B-=A;
    B.display();
    C.display();
    D.display();
    -D;
    D.display();
    +D;
    D.display();
}
17/01/23, 22:30 - Sooorrrr 🎓: #include <iostream>
#include <queue>
using namespace std;
 
// driver code
int main()
{
    int arr[6] = { 10, 2, 4, 8, 6, 9 };
 
    // defining priority queue
    priority_queue<int> pq;
 
    // printing array
    cout << "Array: ";
    for (auto i : arr) {
        cout << i << ' ';
    }
    cout << endl;
    // pushing array sequentially one by one
    for (int i = 0; i < 6; i++) {
        pq.push(arr[i]);
    }
 
    // printing priority queue
    cout << "Priority Queue: ";
    while (!pq.empty()) {
        cout << pq.top() << ' ';
        pq.pop();
    }
 
    return 0;
}
17/01/23, 22:33 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class sailboat{
    private:
    string mname;
    int length;
    int width;
    int draught;
    public:
    void setinfo(string name,int l,int w,int d){
        mname=name;
        length=l;
        width=w;
        draught=d;
    }
    void writeinfo(){
        cout<<mname<<" "<<length<<" "<<width<<" "<<" "<<draught<<endl;
    }
    int operator >(sailboat m){
        int f=0;
        if(length>m.length){
            f=1;
        }
        else if(length==m.length && width>m.width){
            f=1;
        }
        return f;

    }

};
int main(){
    sailboat s[3];
    int length,width,draught;
    string name;
    for(int i=0;i<3;i++){
        cout<<"Enter values: "<<endl;
        cin>>name>>length>>width>>draught;
        s[i].setinfo(name,length,width,draught);
    }
    int i, j;
	int n=3;
	sailboat key;
    for (i = 1; i < n; i++)
    {
        key = s[i];
        j = i - 1;
        while (j >= 0 && s[j] > key)
        {
            s[j + 1] = s[j];
            j = j - 1;
        }
        s[j + 1] = key;
    }
    for(int i=0;i<2;i++){
        for(int j=0;j<2-i;j++){

        }
    }
}
17/01/23, 22:33 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class sailboat
{
private:
    string mname;
    int length;
    int width;
    int draught;

public:
    void setinfo(string name, int l, int w, int d)
    {
        mname = name;
        length = l;
        width = w;
        draught = d;
    }
    void writeinfo()
    {
        cout << mname << " " << length << " " << width << " " << draught << endl;
    }
    int operator>(sailboat m)
    {
        int v = 0;
        if (length > m.length)
        {
            v = 1;
        }
        else if (length == m.length && width > m.width)
        {
            v = 1;
        }
        return v;
    }
};
int main()
{
    sailboat s[3], t;
    int length, width, draught;
    string name;
    for (int i = 0; i < 3; i++)
    {
        cout << "Enter values: " << endl;
        cin >> name >> length >> width >> draught;
        s[i].setinfo(name, length, width, draught);
    }
    int i, j;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 2 - i; j++)
        {
            if (s[j] > s[j + 1])
            {
                t = s[j];
                s[j] = s[j + 1];
                s[j + 1] = t;
            }
        }
    }
    for (int i = 0; i < 3; i++)
    {
        s[i].writeinfo();
    }
}
17/01/23, 22:33 - Sooorrrr 🎓: #include <iostream>
#include <cctype>
using namespace std;
class number{
    protected:
    int n;
    public:
    int f=0;
    void setnumber(int x){
        n=x;
    }
    void setnumber(char x){
        n=x;
    }
    void check(){
        if(isalpha(n)){
            cout<<"It is a character please enter a number"<<endl;
            f=0;
        }
        else{
            cout<<"It is a number"<<endl;
            f=1;
        }
    } 
};
class armstrong:public number{
    protected:
    int rem=0,m=0;
    public:
    void fun(){
        int t=n;
        while(n!=0){
        rem=n%10;
        n=n/10;
        m+=rem*rem*rem;
        }
        if(m==t){
            cout<<"It is an armstrong number"<<endl;
        }
        else{
            cout<<"It is not an armstrong number"<<endl;
        }
    }
};
class perfect:public number{
    public:
    void per(){
        int sum=0;
        for(int i=1;i<n;i++){
            if(n%i==0){
                sum+=i;
            }
        }
        if(sum==n){
            cout<<"It is a perfect number"<<endl;
        }
        else{
            cout<<"It is not a perfect number"<<endl;
        }
    }
};
int main(){
    int x;
    cout<<"Enter a value:"<<endl;
    cin>>x;
    armstrong num;
    num.setnumber(x);
    num.check();
    num.fun();
    perfect num1;
    num1.setnumber(x);
    num1.check();
    num1.per();

}
17/01/23, 22:34 - Gannu: // C++ program to demonstrate the use of priority_queue
#include <iostream>
#include <queue>
using namespace std;

// driver code
int main()
{
	int arr[6] = { 10, 2, 4, 8, 6, 9 };

	// defining priority queue
	priority_queue<int> pq;

	// printing array
	cout << "Array: ";
	for (auto i : arr) {
		cout << i << ' ';
	}
	cout << endl;
	// pushing array sequentially one by one
	for (int i = 0; i < 6; i++) {
		pq.push(arr[i]);
	}

	// printing priority queue
	cout << "Priority Queue: ";
	while (!pq.empty()) {
		cout << pq.top() << ' ';
		pq.pop();
	}

	return 0;
}
17/01/23, 22:34 - Shesadriii 🎓: #include <iostream>
#include <queue>
using namespace std;
 
// driver code
int main()
{
    int arr[6] = { 10, 2, 4, 8, 6, 9 };
 
    // defining priority queue
    priority_queue<int, vector<int>, greater<int>> pq;
 
    // printing array
    cout << "Array: ";
    for (auto i : arr) {
        cout << i << ' ';
    }
    cout << endl;
    // pushing array sequentially one by one
    for (int i = 0; i < 6; i++) {
        pq.push(arr[i]);
    }
 
    // printing priority queue
    cout << "Priority Queue: ";
    while (!pq.empty()) {
        cout << pq.top() << ' ';
        pq.pop();
    }
 
    return 0;
}
17/01/23, 22:34 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class Matrix{
    private:
    int n;
    int m;
    int arr[100][100]={};
    public:
    Matrix(){}
    Matrix(int n,int m){
        this->n=n;
        this->m=m;
    }
    void getmat(){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout<<"Enter an element";
                cin>>arr[i][j];
            }
        }
    }
    void print(){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout<<arr[i][j]<<endl;
            }
        }
    }
    Matrix operator +(Matrix obj){
        Matrix temp;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                temp.arr[i][j]=arr[i][j]+obj.arr[i][j];
            }
        }
        temp.n=n;
        temp.m=m;
        return temp;
    }
    Matrix operator *(Matrix obj){
        Matrix t;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                for(int k=0;k<m;k++){
                    t.arr[i][j]+=arr[i][k]*obj.arr[k][j];
                }
            }
        }
        t.n=n;
        t.m=m;
        return t;
    }
};
int main(){
    int n,m;
    cout<<"Enter the value of n"<<endl;
    cin>>n;
    cout<<"Enter the value of m"<<endl;
    cin>>m;
    Matrix mat1(n,m);
    mat1.getmat();
    mat1.print();
    cout<<"Enter the values of next matrix : "<<endl;
    Matrix mat2(n,m);
    mat2.getmat();
    mat2.print();
    cout<<"Values of sum matrix : "<<endl;
    Matrix mat3;
    mat3=mat1+mat2;
    mat3.print();
    cout<<"Values of multi matrix : "<<endl;
    Matrix mat4;
    mat4=mat1*mat2;
    mat4.print();
}
17/01/23, 22:35 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class binaryadd{
    private:
    int a;
    public:
    void setvalues(int x){
        a=x;
    }
    binaryadd(){
        a=0;
    }
    binaryadd operator +(binaryadd x){
        binaryadd t;
        t.a=x.a+a;
        return t;
    }
    void geta(){
        cout<<a;
    }
};

int main(){
    binaryadd A,B,C;
    A.setvalues(10);
    B.setvalues(20);
    C=A+B;
    C.geta();
}
17/01/23, 22:35 - Sooorrrr 🎓: class number:
    def __init__(self,a):
        self.a = a
    def __neg__(self):
        self.a=-self.a
    def display(self):
        print(self.a)
    def __str__(self):
        return str(self.a)
n1=number(6)
n1.display()
-n1
n1.display()
print(n1)
17/01/23, 22:35 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class binarymulti{
    private:
    int a;
    public:
    void setvalues(int x){
        a=x;
    }
    binarymulti(){
        a=1;
    }
    binarymulti operator *(binarymulti x){
        binarymulti t;
        t.a=x.a*a;
        return t;
    }
    void geta(){
        cout<<a;
    }
};

int main(){
    binarymulti A,B,C;
    A.setvalues(10);
    B.setvalues(20);
    C=A*B;
    C.geta();
}
17/01/23, 22:36 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class binarycalc{
    private:
    int a;
    public:
    void setvalues(int x){
        a=x;
    }
    binarycalc(){
        a=1;
    }
    binarycalc operator +(binarycalc x){
        binarycalc t;
        t.a=x.a+a;
        return t;
    }
    binarycalc operator *(binarycalc x){
        binarycalc t;
        t.a=x.a*a;
        return t;
    }
    void geta(){
        cout<<a;
    }
};

int main(){
    binarycalc A,B,C,D;
    A.setvalues(10);
    B.setvalues(20);
    C.setvalues(30);
    D=A+B*C;
    D.geta();
}
17/01/23, 22:36 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class polynomial{
    private:
    int n;
    int arr[50]={};
    int brr[50]={};
    public:
    polynomial(){};
    polynomial(int n){
        this->n=n;
    }
    void set(int x, int y[10],int z[10]){
        n=x;
        for(int i=0; i<n; i++){
            arr[i]=y[i];
            brr[i]=z[i];
        }
    }
    polynomial operator *(polynomial m){
        polynomial temp;
        int k;
        k=0;

        for(int i=0; i<n; i++){
            for(int j=0;j<m.n; j++){
                temp.arr[k]=arr[i]*m.arr[j];
                temp.brr[k]=brr[i]+m.brr[j];
                k++;
            }
        }
        temp.n=this->n * m.n;
        return temp;
    }
    void display(){
        cout<<n<<endl;
        cout<<arr[0]<<"x^"<<brr[0];
        for(int i=1; i<n;i++){
            cout<<" + ";
            cout<<arr[i]<<"x^"<<brr[i];
        }
        cout<<endl;
    }
};
int main(){
    int n;
    cout<<"Enter the value of int"<<endl;
    cin>>n;
    int A[n];
    int B[n];
    for(int i=0; i<n; i++){
        cout<<"Enter the value of the coefficient : ";
        cin>>A[i];
        cout<<"Enter the value of the power : ";
        cin>>B[i];
    }
    polynomial p;
    int C[n];
    int D[n];
    for(int i=0; i<n; i++){
        cout<<"Enter the value of the coefficient : ";
        cin>>C[i];
        cout<<"Enter the value of the power : ";
        cin>>D[i];
    }
    polynomial q;
    polynomial r(n);
    p.set(n,A,B);
    q.set(n,C,D);
    p.display();
    q.display();
    r=p*q;
    r.display();
}
17/01/23, 22:36 - Sooorrrr 🎓: //using parameterized constructors
#include <iostream>
using namespace std;
class circle{
    private:
    int r;
    public:
    circle(int radius){
        r=radius;
    }
    void getdiameter(){
        cout<<2*r;
    }
    void getcircumference(){
        cout<<2*3.14*r;
    }
    void getarea(){
        cout<<3.14*r*r;
    }
};
int main(){
    circle c1(2);
    c1.getdiameter();
    c1.getcircumference();
    c1.getarea();
}
17/01/23, 22:36 - Sooorrrr 🎓: #include <iostream>
using namespace std;
class palindrome{
    private:
    int n;
    public:
    palindrome(int n){
        this->n=n;
    }
    void check(){
        int t=n;
        int rem,res;
        while(n!=0){
            rem=n%10;
            res=res*10 + rem;
            n=n/10;
        }
        if(res==t){
            cout<<"It is a palindrome "<<endl;
        }
        else{
            cout<<"It is not a palindrome "<<endl;
        }
    }
};
int main(){
    int n;
    cout<<"Enter a number to be checked :"<<endl;
    cin>>n;
    palindrome p(n);
    p.check();

}
17/01/23, 22:37 - Sooorrrr 🎓: //default constructor
#include <iostream>
using namespace std;
class build{
    private:
    int a,b;
    public:
    build(){
        a=10;
        b=20;
        display();
    }
    void display(){
        cout<<a<<endl;
        cout<<b<<endl;
    }
};
int main(){
    build b1;
}
17/01/23, 22:38 - Gannu: <Media omitted>
17/01/23, 22:39 - Harecharan CSE E Amrita CBE: #include <iostream>
#include <queue>
using namespace std;

int main() {
    //priority_queue<int> pq;
    priority_queue<int, vector<int>, greater<int> > pq;
    //Insert elements
    pq.push(5);
    pq.push(1);
    pq.push(10);
    pq.push(3);

    //Print the top element (highest priority)
    cout << pq.top() << endl; //Output: 10

    //Remove the top element
    pq.pop();

    //Print the new top element
    cout << pq.top() << endl; //Output: 5
    pq.pop();
    cout << pq.top() << endl;
    pq.pop();

     cout << pq.top() << endl;
    pq.pop();


    return 0;
}
17/01/23, 22:40 - Shesadriii 🎓: .
17/01/23, 22:40 - Gannu: // C++ program to demonstrate the use of priority_queue
#include <iostream>
#include <queue>
using namespace std;

// driver code
int main()
{
	int arr[6] = { 10, 2, 4, 8, 6, 9 };

	// defining priority queue
	priority_queue<int,vector<int>,greater <int>> pq;

	// printing array
	cout << "Array: ";
	for (auto i : arr) {
		cout << i << ' ';
	}
	cout << endl;
	// pushing array sequentially one by one
	for (int i = 0; i < 6; i++) {
		pq.push(arr[i]);
	}

	// printing priority queue
	cout << "Priority Queue: ";
	while (!pq.empty()) {
		cout << pq.top() << ' ';
		pq.pop();
	}

	return 0;
}
17/01/23, 22:43 - Harecharan CSE E Amrita CBE: #include <iostream>
using namespace std;
class add{
    int a ;
    public:
    add(){
        a=0;
    }
    friend add operator ++(add &obj);
    friend add operator ++(add &obj,int);
    friend add operator --(add &obj);
    friend add operator --(add &obj ,int);
    void display(){
        cout<<"A = "<<a<<endl;
    }
};

add operator ++(add &obj){
    obj.a+=1;
    return obj;
}
add operator ++(add &obj,int){
    add temp;
    temp.a=obj.a++;
    return temp;
}
add operator --(add &obj){
    obj.a-=1;
    return obj;
}
add operator --(add &obj,int){ 
    add temp ;
    temp.a = obj.a --;
    return temp;
}

int main(){
    add a1, a2 , a3;
    for(int i=0;i<3;i++){
        cout<<"Post increment:"<<endl;
        a1++.display();(++a2).display();a3++.display();
    }
    for (int i=0;i<3;i++){
        cout<<"preincrement:"<<endl;
        a1--.display();(--a2).display();a3--.display();
    }
}
17/01/23, 23:02 - Harecharan CSE E Amrita CBE: <Media omitted>
17/01/23, 23:04 - Harecharan CSE E Amrita CBE: <Media omitted>
17/01/23, 23:08 - Sanjuuu 🎓: class Shape {
public:
    virtual double getArea() = 0; // pure virtual function
};

class Rectangle: public Shape {
private:
    double width, height;
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    double getArea() { return width * height; }
};

class Circle: public Shape {
private:
    double radius;
public:
    Circle(double r) : radius(r) {}
    double getArea() { return 3.14159 * radius * radius; }
};
17/01/23, 23:08 - Sanjuuu 🎓: int main() {
    Shape* shapes[2];
    shapes[0] = new Rectangle(3, 4);
    shapes[1] = new Circle(5);

    for (int i = 0; i < 2; i++) {
        cout << "Area of shape " << i+1 << ": " << shapes[i]->getArea() << endl;
    }
    return 0;
}
17/01/23, 23:15 - Gannu: #include <iostream>
using namespace std;

class parent{
    public:
        int l=4,b=5;
        virtual void area(){
            cout<<l*b<<endl;
        }
};

class child:public parent{
    public:
        int l=5,b=6;
        void area(){
            cout<<l*b<<endl;
        }
};
int main()
{
    parent* p=new child();
    p->area();
    parent p1;
    p1.area();

}
17/01/23, 23:18 - Viswaa Ramasubramanian: Rectangle rects[3];
rects[0] = Rectangle(3,4);
rects[1] = Rectangle(5,6);
rects[2] = Rectangle(7,8);
17/01/23, 23:25 - Harecharan CSE E Amrita CBE: <Media omitted>
17/01/23, 23:43 - Viswaa Ramasubramanian: FRACTION USING OPERATOR OVERLOADING C++ AND PYTHON
17/01/23, 23:45 - Viswaa Ramasubramanian: using namespace std;
class Shape {
public :
//np virtual
void draw() {
cout "Drawing a shape."
class Circle : public Shape {
endl;
public :
void draw()
"Drawing
cout <<
class Rectangle •
public
public :
void draw()
"Drawing
cout <<
int
a circle."
<<endl;
Shape {
a rectangle. "
<< endl;
cout<<"no virtual functions"<<endl;
Shape *s = new Circle();
s->draw();
17/01/23, 23:47 - Harecharan CSE E Amrita CBE: // with upcasting
#include<iostream>
using namespace std;

class Shape {
public:
    virtual void draw() { 
    cout << "Drawing a shape." << endl;
    }
};

class Circle : public Shape {
public:
    void draw() override { 
        cout << "Drawing a circle." <<endl;
    }
};

class Rectangle : public Shape {
public:
    void draw() override { 
        cout << "Drawing a rectangle." << endl;
    }
};


int main(){
    Shape *s = new Circle();
s->draw();

}
17/01/23, 23:48 - Harecharan CSE E Amrita CBE: // no virtual function, upcasting useless
#include<iostream>
using namespace std;

class Shape {
public:
//np virtual
     void draw() { 
    cout << "Drawing a shape." << endl;
    }
};

class Circle : public Shape {
public:
    void draw()  { 
        cout << "Drawing a circle." <<endl;
    }
};

class Rectangle : public Shape {
public:
    void draw()  { 
        cout << "Drawing a rectangle." << endl;
    }
};


int main(){
    cout<<"no virtual functions"<<endl;
    Shape *s = new Circle();
s->draw();

}
18/01/23, 00:33 - Sooorrrr 🎓: <Media omitted>
18/01/23, 01:24 - Gannu: <Media omitted>
18/01/23, 07:22 - Harecharan CSE E Amrita CBE: <Media omitted>
18/01/23, 07:43 - Gannu: <Media omitted>
18/01/23, 07:43 - Gannu: <Media omitted>
18/01/23, 07:43 - Gannu: <Media omitted>
18/01/23, 08:43 - Harecharan CSE E Amrita CBE: <Media omitted>
18/01/23, 08:49 - Viswaa Ramasubramanian: class_name::func_name(parameter)
18/01/23, 08:49 - Sanjuuu 🎓: Viswa sent the notepad
18/01/23, 08:49 - Sanjuuu 🎓: File
18/01/23, 08:51 - Harecharan CSE E Amrita CBE: #include<iostream>
class Base1 {
public:
    void base1_method() {
        std::cout << "base1_method called" << std::endl;
    }
};

class Base2 {
public:
    void base1_method() {
        std::cout << "base2_method called" << std::endl;
    }
};

class Child : public Base1, public Base2 {
public:
    void child_method() {
 Base1::base1_method();  
 Base2::base1_method();
    }
};

int main(){
    Child c;
c.child_method();

}
18/01/23, 08:51 - Harecharan CSE E Amrita CBE: <Media omitted>
18/01/23, 09:01 - Sooorrrr 🎓: #include<iostream> 
using namespace std; 
  
class Point 
{ 
private: 
    int x, y; 
public: 
 Point(int x1, int y1)
 { 
x = x1; y = y1;
 } 
  // Copy constructor 
    Point(const Point &b)
 {
x = b.x;
 y = b.y; 
} 
  int getX()            {  return x; } 
  int getY()            {  return y; } 
}; 
  int main() 
{ 
    Point p1(10, 15); // Normal constructor is called here 
    Point p2 = p1; // Copy constructor is called here 
  
cout << "p1.x = " << p1.getX() << ", p1.y = " << p1.getY(); 
    cout << "\np2.x = " << p2.getX() << ", p2.y = " << p2.getY(); 
  
    return 0; 
}

Output:

p1.x = 10, p1.y = 15
p2.x = 10, p2.y = 15
18/01/23, 09:05 - Harecharan CSE E Amrita CBE: // fraction c++
18/01/23, 09:05 - Harecharan CSE E Amrita CBE: #include <iostream>
using namespace std;

class Fraction {
    int num, den;

public:
    Fraction(int n, int d) : num(n), den(d) {}

    // Overloading the + operator
    Fraction operator+(const Fraction &f2) {
        int n = num * f2.den + den * f2.num;
        int d = den * f2.den;
        return Fraction(n, d);
    }

    // Overloading the - operator
    Fraction operator-(const Fraction &f2) {
        int n = num * f2.den - den * f2.num;
        int d = den * f2.den;
        return Fraction(n, d);
    }

    // Overloading the * operator
    Fraction operator*(const Fraction &f2) {
        int n = num * f2.num;
        int d = den * f2.den;
        return Fraction(n, d);
    }

    // Overloading the / operator
    Fraction operator/(const Fraction &f2) {
        int n = num * f2.den;
        int d = den * f2.num;
        return Fraction(n, d);
    }

    // Overloading the < operator
    bool operator<(const Fraction &f2) {
        return (num * f2.den < den * f2.num);
    }

    void print() {
        cout << num << "/" << den << endl;
    }
};

int main() {
    Fraction f1(1, 2), f2(1, 4);
    Fraction f3 = f1 + f2;
    f3.print();
    Fraction f4 = f1 - f2;
    f4.print();
    Fraction f5 = f1 * f2;
    f5.print();
    Fraction f
18/01/23, 09:06 - Gannu: #include <iostream>
using namespace std;
class rational{
    private:
    int numerator,denominator;
    public:
    rational(){
    };
    rational(int n,int d){
        numerator=n;
        denominator=d;
    }
    rational operator*(rational obj){
        rational t;
        t.numerator=numerator*obj.numerator;
        t.denominator=denominator*obj.denominator;
        return t;
    }
    rational operator/(rational obj){
        rational t;
        t.numerator=numerator*obj.denominator;
        t.denominator=denominator*obj.numerator;
        return t;
    }
    rational operator+(rational obj){
        rational t;
        t.numerator=(numerator*obj.denominator)+(obj.numerator*denominator);
        t.denominator=denominator*obj.denominator;
        return t;
    }
    rational operator-(rational obj){
        rational t;
        t.numerator=(numerator*obj.denominator)-(obj.numerator*denominator);
        t.denominator=denominator*obj.denominator;
        return t;
    }
    void display(){
        cout<<"the result is: "<<numerator<<" /"<<denominator<<endl;
    }
};

int main()
{
    int n,d,p,q;
    cout<<"enter the numerator and denominator for the 1st rational number:";
    cin>>n>>d;
    rational r1(n,d);
    cout<<"enter the numerator and denominator for the 2nd rational number:";
    cin>>p>>q;
    rational r2(p,q);
    rational r3=r1*r2;
    cout<<"multiplication:"<<endl;
    r3.display();
    rational r4=r1+r2;
    cout<<"addition:"<<endl;
    r4.display();
    rational r5=r1-r2;
    cout<<"subtraction:"<<endl;
    r5.display();
    rational r6=r1/r2;
    cout<<"division:"<<endl;
    r6.display();

}
18/01/23, 09:09 - Viswaa Ramasubramanian: class Node:
    def __init__(self, datavalue=None):
        self.next = None
        self.datavalue = datavalue
        self.prev = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insertAtHead(self, data):
        newnode = Node(data)
        newnode.next = self.head
        if self.head is not None:
            self.head.prev = newnode
        self.head = newnode
        if self.tail is None:
            self.tail = newnode

    def insertAtEnd(self, data):
        newnode = Node(data)
        if self.tail is not None:
            self.tail.next = newnode
            newnode.prev = self.tail
        self.tail = newnode
        if self.head is None:
            self.head = newnode

    def deleteAtHead(self):
        if self.head is None:
            return
        self.head = self.head.next
        if self.head is not None:
            self.head.prev = None

    def deleteAtEnd(self):
        if self.tail is None:
            return
        self.tail = self.tail.prev
        if self.tail is not None:
            self.tail.next = None

    def printForward(self):
        temp = self.head
        while temp:
            print(temp.datavalue, end=" ")
            temp = temp.next
        print()

    def printBackward(self):
        temp = self.tail
        while temp:
            print(temp.datavalue, end=" ")
            temp = temp.prev
        print()

    def deleteAll(self):
        self.head = None
        self.tail = None
18/01/23, 09:28 - Harecharan CSE E Amrita CBE: // fraction overloading python
18/01/23, 09:28 - Harecharan CSE E Amrita CBE: class Fraction:
    def __init__(self, n, d):
        self.num = n
        self.den = d

    # Overloading the + operator
    def __add__(self, f2):
        n = self.num * f2.den + self.den * f2.num
        d = self.den * f2.den
        return Fraction(n, d)

    # Overloading the - operator
    def __sub__(self, f2):
        n = self.num * f2.den - self.den * f2.num
        d = self.den * f2.den
        return Fraction(n, d)

    # Overloading the * operator
    def __mul__(self, f2):
        n = self.num * f2.num
        d = self.den * f2.den
        return Fraction(n, d)

    # Overloading the / operator
    def __truediv__(self, f2):
        n = self.num * f2.den
        d = self.den * f2.num
        return Fraction(n, d)

    # Overloading the < operator
    def __lt__(self, f2):
        return (self.num * f2.den < self.den * f2.num)

    def __str__(self):
        return str(self.num) + "/" + str(self.den)

f1 = Fraction(1, 2)
f2 = Fraction(1, 4)
f3 = f1 + f2
print(f3)
f4 = f1 - f2
print(f4)
f5 = f1 * f2
print(f5)
f6 = f1 / f2
print(f6)
18/01/23, 09:29 - Viswaa Ramasubramanian: You deleted this message
18/01/23, 09:36 - Shesadriii 🎓: <Media omitted>
18/01/23, 09:40 - Harecharan CSE E Amrita CBE: // I/o overloading c++
#include<iostream>
using namespace std;
class in_out{
    int a;    
public:    
in_out()    { 
       a=100;            }  
friend istream& operator >> (istream& in,in_out  obj);// Extraction operator overloading   
 friend ostream& operator <<(ostream&out,in_out obj);//Insertion operator overloading 
   };
istream& operator >>(istream& in, in_out obj)
{       in>>obj.a;  
         return in;}

ostream& operator <<(ostream& out,in_out obj){ 
   out<<"Value of a:  "<<obj.a;    return out;}

int main(){   
 in_out obj;    
cin>>obj;//operator function call  
  cout<<obj;//operator function call
return 0;
}
18/01/23, 09:41 - Viswaa Ramasubramanian: <Media omitted>
18/01/23, 09:43 - Harecharan CSE E Amrita CBE: /
18/01/23, 10:00 - Shesadriii 🎓: https://forms.office.com/r/sRYhApK7iu
18/01/23, 10:12 - Sooorrrr 🎓: <Media omitted>
18/01/23, 10:37 - Shesadriii 🎓: txt = " {price} rupees!"
print(txt.format(price = 49))
18/01/23, 10:58 - Viswaa Ramasubramanian: <Media omitted>
18/01/23, 11:14 - Gannu: A student will have to engage with many activities in a educational institution like, study, sports, library. Implement a basic student information inheritance class using the following details. Class student have members roll_no, name and member finctions read_studentData, display_studentData. Class test inherits properties from student. Protected variables marks1 and marks2. Member functions read_test and display_test. Class sports have members score, member functions read sportsData, display_sportsData. Class results inherits properties from class test, and class sports. Class result have member total and member functions read_result and display_result. Class book is an independent class with data members author_name, title, publication, price and member functions Accept and Display using C++
18/01/23, 11:22 - Sanjuuu 🎓: #include <iostream>
using namespace std;

class student
{
    public:
        int roll_no;
        string name;

        void read_studentData()
        {
            cout << "Enter roll number: ";
            cin >> roll_no;
            cout << "Enter name: ";
            cin >> name;
        }

        void display_studentData()
        {
            cout << "Roll number: " << roll_no << endl;
            cout << "Name: " << name << endl;
        }
};

class test: protected student
{
    protected:
        int marks1, marks2;

    public:
        void read_test()
        {
            cout << "Enter marks for test 1: ";
            cin >> marks1;
            cout << "Enter marks for test 2: ";
            cin >> marks2;
        }

        void display_test()
        {
            cout << "Marks for test 1: " << marks1 << endl;
            cout << "Marks for test 2: " << marks2 << endl;
        }
};

class sports
{
    public:
        int score;

        void read_sportsData()
        {
            cout << "Enter score: ";
            cin >> score;
        }

        void display_sportsData()
        {
            cout << "Score: " << score << endl;
        }
};

class results: protected test, protected sports
{
    public:
        int total;

        void read_result()
        {
            read_studentData();
            read_test();
            read_sportsData();
            total = marks1 + marks2 + score;
        }

        void display_result()
        {
            display_studentData();
            display_test();
            display_sportsData();
            cout << "Total: " << total << endl;
        }
};

class book
{
    public:
        string author_name, title, publication;
        float price;

        void Accept()
        {
            cout << "Enter author name: ";
            cin >> author_name;
            cout << "Enter title: ";
            cin >> title;
            cout << "Enter publication: ";
            cin >> publication;
            cout << "Enter price: ";
            cin >> price;
        }

        void Display()
        {
            cout << "Author name: " << author_name << endl;
            cout << "Title: " << title << endl;
            cout << "Publication: " << publication << endl;
            cout << "Price: " << price << endl;
        }
};
18/01/23, 11:31 - Viswaa Ramasubramanian: <Media omitted>
18/01/23, 11:32 - Sooorrrr 🎓: <Media omitted>
18/01/23, 11:33 - Sooorrrr 🎓: <Media omitted>
18/01/23, 11:33 - Sooorrrr 🎓: <Media omitted>
18/01/23, 13:08 - Phoool Gobiiii  🎓: #binToGray
st = "100"
lt = list(st)
print(lt)
lt1 = []

for i in range (len(lt)):
    if i == 0:
        lt1.append(int(lt[i]))
    else:
        lt1.append(int(lt[i])^int(lt[i-1]))

print(lt1)

#GrayToBin
st = "100"
lt = list(st)
print(lt)
lt1 = []

for i in range (len(lt)):
    if i == 0:
        lt1.append(int(lt[i]))
    else:
        lt1.append(int(lt[i])^int(lt1[i-1]))

print(lt1)
19/01/23, 01:37 - Phoool Gobiiii  🎓: <Media omitted>
19/01/23, 08:48 - Sooorrrr 🎓: <Media omitted>
19/01/23, 09:09 - Sanjuuu 🎓: This message was deleted
19/01/23, 09:29 - Gannu: Follow P1 and P2 portions and question pattern. 80% will cover.
19/01/23, 09:29 - Gannu: Similar topics similar questions pattern
19/01/23, 12:48 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 12:48 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 12:49 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 12:57 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 15:47 - Harecharan CSE E Amrita CBE: -- Create the sample database
CREATE DATABASE sample_db;

-- Switch to the sample database
USE sample_db;

-- Create a table to hold the data
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  order_total DECIMAL(10, 2)
);

-- Insert 50 rows of sample data into the table
INSERT INTO orders (order_id, customer_id, order_date, order_total)
VALUES (1, 1, '2021-01-01', 100.00),
       (2, 1, '2021-01-02', 200.00),
       (3, 2, '2021-01-03', 150.00),
       ...
       (50, 5, '2021-02-19', 250.00);

-- Use a subquery to find the total amount spent by each customer
SELECT customer_id, SUM(order_total) AS total_spent
FROM orders
GROUP BY customer_id;

-- Use a subquery to find the most recent order date for each customer
SELECT customer_id, (SELECT MAX(order_date) FROM orders WHERE customer_id = o.customer_id) AS last_order_date
FROM orders o;
19/01/23, 15:47 - Harecharan CSE E Amrita CBE: INSERT INTO orders (order_id, customer_id, order_date, order_total)
VALUES (1, 1, '2021-01-01', 100.00),
       (2, 1, '2021-01-02', 200.00),
       (3, 2, '2021-01-03', 150.00),
       (4, 2, '2021-01-04', 75.00),
       (5, 3, '2021-01-05', 50.00),
       (6, 3, '2021-01-06', 125.00),
       (7, 4, '2021-01-07', 200.00),
       (8, 4, '2021-01-08', 100.00),
       (9, 5, '2021-01-09', 50.00),
       (10, 5, '2021-01-10', 25.00),
       (11, 1, '2021-01-11', 75.00),
       (12, 1, '2021-01-12', 125.00),
       (13, 2, '2021-01-13', 175.00),
       (14, 2, '2021-01-14', 225.00),
       (15, 3, '2021-01-15', 50.00),
       (16, 3, '2021-01-16', 75.00),
       (17, 4, '2021-01-17', 100.00),
       (18, 4, '2021-01-18', 200.00),
       (19, 5, '2021-01-19', 300.00),
       (20, 5, '2021-01-20', 400.00),
       (21, 1, '2021-01-21', 500.00),
       (22, 1, '2021-01-22', 600.00),
       (23, 2, '2021-01-23', 700.00),
       (24, 2, '2021-01-24', 800.00),
       (25, 3, '2021-01-25', 900.00),
       (26, 3, '2021-01-26', 1000.00),
       (27, 4, '2021-01-27', 1100.00),
       (28, 4, '2021-01-28', 1200.00),
       (29, 5, '2021-01-29', 1300.00),
       (30, 5, '2021-01-30', 1400.00),
       (31, 1, '2021-01-31', 1500.00),
       (32, 1, '2021-02-01', 1600.00),
       (33, 2, '2021-02-02', 1700.00),
       (34, 2, '2021-02-03', 1800.00),
       (35, 3, '2021-02-04', 1900.00),
       (36, 3, '2021-02-05', 2000.00),
       (37, 4, '2021-02-06', 2100.00),
       (38, 4, '2021-02-07', 2200.00),
       (39,
19/01/23, 15:47 - Harecharan CSE E Amrita CBE: INSERT INTO orders (order_id, customer_id, order_date, order_total)
VALUES (39, 5, '2021-02-08', 2300.00),
       (40, 5, '2021-02-09', 2400.00),
       (41, 1, '2021-02-10', 2500.00),
       (42, 1, '2021-02-11', 2600.00),
       (43, 2, '2021-02-12', 2700.00),
       (44, 2, '2021-02-13', 2800.00),
       (45, 3, '2021-02-14', 2900.00),
       (46, 3, '2021-02-15', 3000.00),
       (47, 4, '2021-02-16', 3100.00),
       (48, 4, '2021-02-17', 3200.00),
       (49, 5, '2021-02-18', 3300.00),
       (50, 5, '2021-02-19', 250.00);
19/01/23, 15:48 - Harecharan CSE E Amrita CBE: Find the names of customers who have not placed any orders:

Copy code
SELECT name
FROM customers
WHERE customer_id NOT IN (SELECT customer_id FROM orders);


Find the customer_ids of customers who have placed orders with total greater than the average order total:

Copy code
SELECT customer_id
FROM orders
WHERE order_total > (SELECT AVG(order_total) FROM orders);



Find the order_id, order_date and order_total of orders placed by customers who have spent more than $1000 in total:

Copy code
SELECT order_id, order_date, order_total
FROM orders o
WHERE (SELECT SUM(order_total) FROM orders WHERE customer_id = o.customer_id) > 1000;
19/01/23, 17:30 - Sooorrrr 🎓: <Media omitted>
19/01/23, 17:30 - Sooorrrr 🎓: BEGIN
--OPEN c_customers;
for item in c_customers 
loop
if(c_customers%isopen) then --%isopen use either in if statement don't use it directly in put_line
    dbms_output.put_line('cursor is open');
    -- use single quotes 
end if;
dbms_output.put_line(item.salary);
end loop;
if(c_customers%isopen) then --%isopen use either in if statement don't use it directly in put_line
    dbms_output.put_line('cursor is open');
    -- use single quotes 
else
    dbms_output.put_line('cursor is closed');
end if;
-- CLOSE c_customers;
END;
19/01/23, 17:30 - Sooorrrr 🎓: DECLARE
c_salary customer.salary%TYPE;
CURSOR c_customers IS SELECT salary FROM customer;--only select statements are allowed in explicit cursors
BEGIN
OPEN c_customers;
LOOP
FETCH c_customers into c_salary;
EXIT WHEN c_customers%notfound;
dbms_output.put_line(c_salary);
END LOOP;
if(c_customers%isopen) then --%isopen use either in if statement don't use it directly in put_line
    dbms_output.put_line('cursor is open');
    -- use single quotes 
end if;
CLOSE c_customers;
END;
19/01/23, 17:30 - Sooorrrr 🎓: DECLARE
c_salary customer.salary%TYPE;
CURSOR c_customers IS SELECT salary FROM customer;--only select statements are allowed in explicit cursors
BEGIN
OPEN c_customers;
FETCH c_customers into c_salary;
while c_customers%found loop
    dbms_output.put_line(c_salary);
    FETCH c_customers into c_salary;    
EXIT WHEN c_customers%notfound;
END LOOP;
if(c_customers%isopen) then --%isopen use either in if statement don't use it directly in put_line
    dbms_output.put_line('cursor is open');
    -- use single quotes 
end if;
CLOSE c_customers;
END;
19/01/23, 17:30 - Sooorrrr 🎓: create table customer (salary integer)
insert into customer values (100)
19/01/23, 17:48 - Sanjuuu 🎓: <Media omitted>
19/01/23, 18:24 - Sooorrrr 🎓: DECLARE
c_id customers.id%type;
c_name customers.name%type; c_addr customers.address%type; CURSOR c_customers is
SELECT id, name, address FROM customers;
BEGIN
OPEN c_customers;
LOOP
FETCH c_customers into c_id, c_name, c_addr;
EXIT WHEN c_customers%notfound;
dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
END LOOP;
CLOSE c_customers; 
END;
19/01/23, 18:40 - Gannu: create table venue(venue_code varchar(10) primary key,venue_description varchar(20));
insert into venue values('B01','Grand ball');
insert into venue values('B02','Perry room');
insert into venue values('C01','Cafe');
insert into venue values('E10','Petit room');
insert into venue values('E40','Gown room');
select * from venue;

declare
cursor c is select * from venue;
begin
if c%isopen then
dbms_output.put_line('cursor is open');
end if;
for i in c loop
dbms_output.put_line(i.venue_code || i.venue_description);
end loop;
end;

declare
v venue%rowtype;
cursor c is select * from venue;
begin
open c;
if c%isopen then
dbms_output.put_line('cursor is open');
end if;
loop
fetch c into v; 
dbms_output.put_line(v.venue_code || v.venue_description);
end loop;
end;
19/01/23, 18:50 - Sooorrrr 🎓: DECLARE
c_id customers.id%type;
c_name customers.name%type; 
c_addr customers.address%type; 
CURSOR c_customers is
SELECT id, name, address FROM customers;
BEGIN
OPEN c_customers;
LOOP
FETCH c_customers into c_id, c_name, c_addr;
EXIT WHEN c_customers%notfound;
dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
END LOOP;
CLOSE c_customers; 
END;

Declare 
Cursor c_customers is Select id,name,address,salary FROM CUSTOMERS;
begin
for item in c_customers
loop
dbms_output.put_line(item.id||' '||item.name||' '||item.address||' '||item.salary);
end loop;
end;

Declare
c_customer customers%rowtype;
Cursor c_customers is Select * FROM CUSTOMERS;
begin
open c_customers;
while c_customers%notFound LOOP
19/01/23, 18:55 - Sooorrrr 🎓: -- CREATE TABLE CUSTOMERS(
-- ID INT NOT NULL,
-- NAME VARCHAR (20) NOT NULL, AGE INT NOT NULL,
-- ADDRESS CHAR (25),
-- SALARY DECIMAL (18, 2), PRIMARY KEY (ID) );
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 ); 
-- INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (6, 'Komal', 22, 'MP', 4500.00 );
19/01/23, 18:59 - Sooorrrr 🎓: --loop
DECLARE
c_id customers.id%type;
c_name customers.name%type; 
c_addr customers.address%type; 
CURSOR c_customers is
SELECT id, name, address FROM customers;
BEGIN
OPEN c_customers;
LOOP
FETCH c_customers into c_id, c_name, c_addr;
EXIT WHEN c_customers%notfound;
dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
END LOOP;
CLOSE c_customers; 
END;

--For Loop
Declare 
Cursor c_customers is Select id,name,address,salary FROM CUSTOMERS;
begin
for item in c_customers
loop
dbms_output.put_line(item.id||' '||item.name||' '||item.address||' '||item.salary);
end loop;
end;

--While loop
Declare
c customers%rowtype;
Cursor c_customers is Select * FROM CUSTOMERS;
begin
open c_customers;
fetch c_customers into c;
while c_customers%Found LOOP
dbms_output.put_line(c.id||' '||c.name);
fetch c_customers into c;
end loop;
close c_customers;
end;
19/01/23, 19:10 - Sooorrrr 🎓: --update cursor
declare
cursor c_update is select * from customers for update;
sal int;
begin
for items in c_update loop
if items.salary>5000 then
sal:=1000;
else 
sal:=500;
end if;
Update customers set SALARY=SALARY+sal where current of c_update;
end loop;
end;
19/01/23, 19:11 - Sooorrrr 🎓: -- Select * from CUSTOMERS;
-- Declare
-- C_name CUSTOMERS.NAME%TYPE;
-- Crow CUSTOMERS%ROWTYPE;
-- begin
-- Select NAME into C_name from CUSTOMERS where ID=1;
-- Select * into Crow from CUSTOMERS where ID=1;
-- -- for items in C_name LOOP
-- -- dbms_output.put_line('Name = '||C_name);
-- dbms_output.put_line(Crow.ID);
-- -- end LOOP;
-- end;
create or replace PROCEDURE max(a in integer,b in integer,c out integer) as
begin
c:=a+b;
end;

declare
a integer:=1;
b integer:=2;
c integer;
begin
max(a,b,c);
dbms_output.put_line(c);
end;

create or replace FUNCTION sum1(a  integer,b  integer) return  integer is
c integer;
begin
if a>b then
c:=a+b;
else 
c:=a-b;
end if;
return c;
end;

--program
declare
a integer:=5;
b integer:=6;
c integer;
begin
c:=sum1(a,b);
dbms_output.put_line(c);
end;
19/01/23, 19:11 - Sooorrrr 🎓: -- Select * from CUSTOMERS;
-- Declare
-- C_name CUSTOMERS.NAME%TYPE;
-- Crow CUSTOMERS%ROWTYPE;
-- begin
-- Select NAME into C_name from CUSTOMERS where ID=1;
-- Select * into Crow from CUSTOMERS where ID=1;
-- -- for items in C_name LOOP
-- -- dbms_output.put_line('Name = '||C_name);
-- dbms_output.put_line(Crow.ID);
-- -- end LOOP;
-- end;

--procedure
create or replace PROCEDURE max(a in integer,b in integer,c out integer) as
begin
c:=a+b;
end;

--program
declare
a integer:=1;
b integer:=2;
c integer;
begin
max(a,b,c);
dbms_output.put_line(c);
end;

--function
create or replace FUNCTION sum1(a  integer,b  integer) return  integer is
c integer;
begin
if a>b then
c:=a+b;
else 
c:=a-b;
end if;
return c;
end;

--program
declare
a integer:=5;
b integer:=6;
c integer;
begin
c:=sum1(a,b);
dbms_output.put_line(c);
end;
19/01/23, 19:36 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 19:36 - Viswaa Ramasubramanian: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 20:20 - Sooorrrr 🎓: <Media omitted>
19/01/23, 23:45 - Gannu: <Media omitted>
20/01/23, 00:39 - Sooorrrr 🎓: <Media omitted>
20/01/23, 01:08 - Harecharan CSE E Amrita CBE: In a database management system (DBMS), a sequence is a tool used to generate unique integers, typically used as a primary key for a table. Sequences are often used to generate unique values for primary keys when new rows are inserted into a table, without having to manually specify a value or use a complex key.

A sequence is created using the SQL statement "CREATE SEQUENCE", and the next value in the sequence can be retrieved using the "NEXT VALUE FOR" statement.

For example, to create a sequence called "employee_id_seq" that starts at 1 and increments by 1:

Copy code
CREATE SEQUENCE employee_id_seq START WITH 1 INCREMENT BY 1;
To use the sequence to generate a unique value when inserting a new row into the "employees" table:

Copy code
INSERT INTO employees (employee_id, first_name, last_name, salary)
VALUES (NEXT VALUE FOR employee_id_seq, 'John', 'Doe', 50000);
The above statement will insert a new row into the "employees" table, with a unique value for the "employee_id" column, generated from the "employee_id_seq" sequence.

Sequences can also have options like MINVALUE and MAXVALUE for the minimum and maximum value of the sequence, CYCLE option for cycling the sequence once it reaches the max value and CACHE option for caching a number of values for better performance.

It is important to note that sequences are not supported by all DBMS and the syntax for creating and using sequences may vary depending on the specific DBMS you are using.
20/01/23, 01:09 - Harecharan CSE E Amrita CBE: sequence //// | ^
20/01/23, 01:20 - Sooorrrr 🎓: <Media omitted>
20/01/23, 01:21 - Sooorrrr 🎓: <Media omitted>
20/01/23, 07:54 - Sooorrrr 🎓: <Media omitted>
20/01/23, 07:55 - Sooorrrr 🎓: <Media omitted>
20/01/23, 07:55 - Sooorrrr 🎓: <Media omitted>
20/01/23, 07:55 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:36 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:37 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:39 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:43 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:45 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:57 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:58 - Sooorrrr 🎓: <Media omitted>
20/01/23, 08:59 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:00 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:03 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:10 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 09:22 - Sooorrrr 🎓: <Media omitted>
20/01/23, 12:58 - Sooorrrr 🎓: <Media omitted>
21/01/23, 12:24 - Gannu: <Media omitted>
21/01/23, 16:13 - Harecharan CSE E Amrita CBE: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:36 - Sooorrrr 🎓: <Media omitted>
21/01/23, 20:44 - Phoool Gobiiii  🎓: This message was deleted
21/01/23, 22:25 - Sooorrrr 🎓: <Media omitted>
21/01/23, 22:26 - Viswaa Ramasubramanian: [CO3][BTL3] The Fuel level of a car changes from 0 to 2 as follows: a.Level 0, 10 litres, color = orange b.Level 1, 20 litres, color = green c.Level 2, 30 litres, color = blue The fuel tank is empty and is filled to a maximum level of 30 litres. The color changes in the tank is filled to the maximum level.The states for FSM are
A. orange, green, blue
B. 10, 20, 30
C. orange, blue, green
D. blue, green, orange
22/01/23, 01:13 - Sooorrrr 🎓: <Media omitted>
22/01/23, 01:30 - Sooorrrr 🎓: <Media omitted>
22/01/23, 01:30 - Sooorrrr 🎓: <Media omitted>
22/01/23, 10:51 - Sooorrrr 🎓: <Media omitted>
22/01/23, 12:27 - Shesadriii 🎓: <Media omitted>
22/01/23, 12:28 - Sanjuuu 🎓: insertion sort


void insertionSort(int arr[], int n)
{
   int i, key, j;
   for (i = 1; i < n; i++)
   {
       key = arr[i];
       j = i-1;
 
       /* Move elements of arr[0..i-1], that are
          greater than key, to one position ahead
          of their current position */
       /*@
       loop invariant -1 <= j <= i-1;
       loop invariant (\forall int k; 0 <= k <= j; arr[k] <= key);
       loop assigns j, arr[0..i];
       loop variant j;
       */
       while (j >= 0 && arr[j] > key)
       {
           arr[j + 1] = arr[j];
           j = j - 1;
       }
       arr[j + 1] = key;
   }
}
22/01/23, 12:30 - Sanjuuu 🎓: binary search

int binarySearch(int arr[], int low, int high, int key)
{
    /*@
    loop invariant low <= high;
    loop assigns low, high;
    loop variant high - low;
    */
    while (low <= high)
    {
        int mid = (high + low) / 2;
        if (arr[mid] == key)
            return mid;
        if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}
22/01/23, 12:32 - Sanjuuu 🎓: Write the code and ACSL contracts using axioms for “counting the
number of positive elements in an array”.


answer:


/*@ axiomatic count_positive {
    logic integer count_positive(int a[], integer n)
        reads a[0..n-1];

    axiom count_positive_empty:
        \forall int a[]; count_positive(a, 0) == 0;

    axiom count_positive_non_empty:
        \forall int a[], integer n; 0 < n ==> 
            count_positive(a, n) == count_positive(a, n-1) + (a[n-1] > 0);
    }
*/

int Count(int a[], int n)
{
    /*@
    requires 0 <= n <= \valid(a + (0..n-1));
    ensures \result == count_positive(a,n);
    */
    int count = 0;
    for (int i = 0; i < n; i++)
    {
        if (a[i] > 0)
        {
            count++;
        }
    }
    return count;
}
22/01/23, 12:35 - Sanjuuu 🎓: /*@ axiomatic sum_negative {
    logic integer sum_negative(int a[], integer n)
        reads a[0..n-1];

    axiom sum_negative_empty:
        \forall int a[]; sum_negative(a, 0) == 0;

    axiom sum_negative_non_empty:
        \forall int a[], integer n; 0 < n ==>
            sum_negative(a, n) == sum_negative(a, n-1) + (a[n-1] < 0 ? a[n-1] : 0);
    }
*/

int sumNegativeElements(int a[], int n)
{
    /*@
    requires 0 <= n <= \valid(a + (0..n-1));
    ensures \result == sum_negative(a,n);
    */
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        if (a[i] < 0)
        {
            sum += a[i];
        }
    }
    return sum;
}
22/01/23, 12:37 - Sanjuuu 🎓: /*@ axiomatic sum_negative {
    logic integer sum_negative(int a[], integer n)
        reads a[0..n-1];

    axiom sum_negative_empty:
        \forall int a[]; sum_negative(a, 0) == 0;

    axiom sum_negative_non_empty:
        \forall int a[], integer n; 0 < n ==>
            sum_negative(a, n) == sum_negative(a, n-1) + (a[n-1] < 0 ? a[n-1] : 0);
    }

    axiomatic sum_positive {
    logic integer sum_positive(int a[], integer n)
        reads a[0..n-1];

    axiom sum_positive_empty:
        \forall int a[]; sum_positive(a, 0) == 0;

    axiom sum_positive_non_empty:
        \forall int a[], integer n; 0 < n ==>
            sum_positive(a, n) == sum_positive(a, n-1) + (a[n-1] > 0 ? a[n-1] : 0);
    }
*/

int maxSum(int a[], int n)
{
    /*@
    requires 0 <= n <= \valid(a + (0..n-1));
    ensures \result == max(sum_negative(a,n), sum_positive(a,n));
    */
    int sumNegative = sumNegativeElements(a, n);
    int sumPositive = sumPositiveElements(a, n);
    return max(sumNegative, sumPositive);
}
22/01/23, 12:48 - Viswaa Ramasubramanian: <Media omitted>
22/01/23, 13:24 - Viswaa Ramasubramanian: <Media omitted>
22/01/23, 16:29 - Harecharan CSE E Amrita CBE: This message was deleted
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 21:19 - Gannu: <Media omitted>
22/01/23, 22:21 - Shesadriii 🎓: <Media omitted>
22/01/23, 22:22 - Phoool Gobiiii  🎓: /*@
axiomatic Power{
  logic integer POW(int b, int e);

  axiom RecCase:
  \forall integer b, e;
  e >= 1 ==> POW(b, e) == b * POW(b, e-1);

  axiom baseCase:
  \forall integer b;
  POW(b, 0) == 1;
}
*/

/*@
requires e >= 0;
ensures \result == POW(base, exp);
*/

int pow(int base, int exp){
  int pow = 1, i = 1;

  /*@
  loop invariant pow == POW(base, \at(i, LoopEntry)));
  loop invariant i <= (exp+1);
  loop assigns pow;
  loop variant exp+1 - i;
  */

  for (i = 1; i <= exp; i++){
    pow = pow * base;
  }
  return pow;
}
22/01/23, 23:25 - Viswaa Ramasubramanian: <Media omitted>
23/01/23, 00:34 - Shesadriii 🎓: This message was deleted
23/01/23, 00:35 - Shesadriii 🎓: /*@ axiomatic factorial {
  @   logic integer factorial(integer n)
  @   reads n;
  @   ensures n >= 0 ==> factorial(n) == (n == 0 ? 1 : n * factorial(n - 1));
  @ }
  @*/

/*@ requires n >= 0;
  @ assigns \nothing;
  @ ensures \result == factorial(n);
  @*/
int factorial(int n) {
  int i, result = 1;
  /*@ loop invariant 0 <= i <= n;
    @ loop invariant result == factorial(i);
    @ loop assigns i, result;
    @ loop variant n - i;
    @*/
  for (i = 1; i <= n; i++) {
    result *= i;
  }
  return result;
}
23/01/23, 01:04 - Shesadriii 🎓: <Media omitted>
23/01/23, 01:23 - Sooorrrr 🎓: <Media omitted>
23/01/23, 09:54 - Sanjuuu 🎓: <Media omitted>
23/01/23, 09:54 - Sanjuuu 🎓: you're welcome!
23/01/23, 11:43 - Shesadriii 🎓: Exactly two things are both dogs and cats
23/01/23, 11:43 - Shesadriii 🎓: convert to predicate logic
23/01/23, 12:46 - Araviiii 🎓: <Media omitted>
23/01/23, 12:50 - Sooorrrr 🎓: <Media omitted>
23/01/23, 12:50 - Sooorrrr 🎓: <Media omitted>
23/01/23, 13:25 - Sanjuuu 🎓: <Media omitted>
23/01/23, 13:25 - Sanjuuu 🎓: <Media omitted>
23/01/23, 13:25 - Sanjuuu 🎓: <Media omitted>
23/01/23, 13:25 - Sanjuuu 🎓: <Media omitted>
23/01/23, 23:06 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
23/01/23, 23:09 - Sooorrrr 🎓: <Media omitted>
24/01/23, 00:10 - Sooorrrr 🎓: <Media omitted>
24/01/23, 01:45 - Shesadriii 🎓: <Media omitted>
24/01/23, 08:29 - Araviiii 🎓: Guys if ur are going to canteen or gonna cook food 

Inform me also guys
24/01/23, 12:13 - Araviiii 🎓: <Media omitted>
24/01/23, 13:43 - Sooorrrr 🎓: <Media omitted>
24/01/23, 14:21 - Viswaa Ramasubramanian: Write a Jasa program to Implement a multithreaded application that has three threads
the integer. if the value even. second thread computes the square of num and prints if the value
in the third thread is odd will print the value of cube of number. Print all the names of thread along with its id
24/01/23, 14:25 - Sooorrrr 🎓: public class MultiThreadExample {
    public static void main(String[] args) {
        Thread t1 = new Thread(new EvenThread());
        Thread t2 = new Thread(new SquareThread());
        Thread t3 = new Thread(new CubeThread());

        t1.start();
        t2.start();
        t3.start();
    }
}

class EvenThread implements Runnable {
    public void run() {
        for (int i = 0; i <= 10; i++) {
            if (i % 2 == 0) {
                System.out.println("Even Thread - " + Thread.currentThread().getName() + " - ID: " + Thread.currentThread().getId() + " - Value: " + i);
            }
        }
    }
}

class SquareThread implements Runnable {
    public void run() {
        for (int i = 0; i <= 10; i++) {
            System.out.println("Square Thread - " + Thread.currentThread().getName() + " - ID: " + Thread.currentThread().getId() + " - Value: " + i*i);
        }
    }
}

class CubeThread implements Runnable {
    public void run() {
        for (int i = 0; i <= 10; i++) {
            if (i % 2 != 0) {
                System.out.println("Cube Thread - " + Thread.currentThread().getName() + " - ID: " + Thread.currentThread().getId() + " - Value: " + i*i*i);
            }
        }
    }
}
24/01/23, 14:28 - Viswaa Ramasubramanian: class thread extends Thread {
    int num;

    thread(int num) {
        this.num = num;
    }

    public void run() {
        if (num % 2 == 0) {
            System.out.println("Thread " + Thread.currentThread().getName() + " (id: " + Thread.currentThread().getId() + ") says: " + num + " is even.");
        } else if (num % 2 == 1) {
            System.out.println("Thread " + Thread.currentThread().getName() + " (id: " + Thread.currentThread().getId() + ") says: " + num + " is odd.");
        }
    }

    public static void main(String[] args) {
        thread t1 = new thread(1);
        thread t2 = new thread(2);
        thread t3 = new thread(3);
        t1.start();
        t2.start();
        t3.start();
    }
}
24/01/23, 15:17 - Sooorrrr 🎓: package Endsem;
import java.util.*;

public class Question extends Thread{
    static int num;

    String Task;
    Question(String Task){
        this.Task=Task;
    }

    public void input(){
        System.out.println("Enter a number");
        Scanner sc=new Scanner(System.in);
        num=sc.nextInt();
    }

    public void square(){
        if(num%2==0){
            System.out.println("The square of the number is"+num*num);
        }
        else{
            System.out.println("The number is odd");
        }
    }

    public void cube(){
        if(num%2!=0){
            System.out.println("The cube of the number is"+num*num*num);
        }
        else{
            System.out.println("The number is even");
        }
    }

    public void run(){
        if(Task=="input"){
            input();
        }
        else if(Task=="cube"){
            cube();
        }
        else if(Task=="square"){
            square();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Question q1=new Question("input");
        Question q2=new Question("cube");
        Question q3=new Question("square");

        Thread t1=new Thread(q1);
        Thread t2=new Thread(q2);
        Thread t3=new Thread(q3);

        t1.start();
        t1.join();

        t2.start();
        t2.join();

        t3.start();
        t3.join();


    }
}
24/01/23, 15:41 - Sooorrrr 🎓: package Endsem;

import java.util.Scanner;

public class QnClass implements Runnable{
    static int a;
    String task;

    public QnClass(String task){
        this.task = task;
    }

    public static void setA() {
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
    }

    public int EvenOdd(){
        if (a % 2 != 0){
            return 1; // odd
        }
        else {
            return 0; // even
        }
    }

    public void cube(){
        System.out.println("Cube: " + a*a*a);
    }

    public void square(){
        System.out.println("Square: " + a*a);
    }

    @Override
    public synchronized void run() {

        if (task == "input") {
            setA();
        }
        int r = EvenOdd();
        if (task == "cube") {
            if (r == 1){
                cube();
            }
            else {
                System.out.println("No is even");
            }
        }
        if (task == "square"){
            if (r == 0){
                square();
            }
            else {
                System.out.println("No is odd");
            }
        }
    }
}
24/01/23, 15:41 - Sooorrrr 🎓: package Endsem;

public class ThreadMain {
    public static void main(String[] args) throws InterruptedException {
        QnClass mythread1 = new QnClass("input");
        QnClass mythread2 = new QnClass("cube");
        QnClass mythread3 = new QnClass("square");

        Thread mythread_thread1 = new Thread(mythread1);
        Thread mythread_thread2 = new Thread(mythread2);
        Thread mythread_thread3 = new Thread(mythread3);

        mythread_thread1.start();
        mythread_thread1.join();

        mythread_thread2.start();
        mythread_thread2.join();

        mythread_thread3.start();
        mythread_thread3.join();

    }
}
24/01/23, 15:52 - Sanjuuu 🎓: <Media omitted>
24/01/23, 15:52 - Harecharan CSE E Amrita CBE: anne nee gethu nae
24/01/23, 15:53 - Sanjuuu 🎓: <Media omitted>
24/01/23, 15:59 - Harecharan CSE E Amrita CBE: try {
   if(s.equals("div"))
   {
        int result = divide(a,b);
        System.out.println("Result: " + result);
        break;
   }
 } catch (ArithmeticException e) {
    System.out.println(e.getMessage());
 }
24/01/23, 15:59 - Harecharan CSE E Amrita CBE: static int divide(int x, int y){
    if (y == 0) {
        throw new ArithmeticException("Error: Cannot divide by zero.");
    } else {
        return x / y;
    }
}
24/01/23, 16:00 - Harecharan CSE E Amrita CBE: 'e' is just a variable. ('e' stands for exception, but you can rename it anything you like, however, the data type has to remain 'Exception') The 'e' variable stores an exception-type object in this case.

Your 'catch' block will literally 'catch'' an exception object that was 'thrown' at some point during a 'try' block and store it in the 'e' variable (a.k.a parameter)

Inside your catch block, you can choose to throw 'e' again and some higher-level process can catch the exception object (like yours can/did). If there are no other catch blocks at a higher level when it is thrown, the exception will cause the program to halt.
24/01/23, 16:20 - Sooorrrr 🎓: <Media omitted>
24/01/23, 16:26 - Sooorrrr 🎓: <Media omitted>
24/01/23, 16:27 - Sooorrrr 🎓: <Media omitted>
24/01/23, 16:30 - Shesadriii 🎓: <Media omitted>
24/01/23, 17:02 - Shesadriii 🎓: <Media omitted>
24/01/23, 17:54 - Shesadriii 🎓: <Media omitted>
24/01/23, 18:04 - Gannu: <Media omitted>
24/01/23, 18:15 - Sooorrrr 🎓: https://youtu.be/eKWjfZ-TUdo
24/01/23, 18:15 - Sooorrrr 🎓: package Endsem;// Example illustrates multiple threads are executing
// on the same Object at same time without synchronization.
import java.io.*;

class Line
{
    // if multiple threads(trains) will try to
    // access this unsynchronized method,
    // they all will get it. So there is chance
    // that Object's state will be corrupted.
    synchronized public void getLine()
    {
        for (int i = 0; i < 3; i++)
        {
            System.out.println(i);
            try
            {
                Thread.sleep(400);
            }
            catch (Exception e)
            {
                System.out.println(e);
            }
        }
    }
}

class Train extends Thread
{
    // reference to Line's Object.
    Line line;

    Train(Line line)
    {
        this.line = line;
    }

    @Override
    public void run()
    {
        line.getLine();
    }
}

class GFG
{
    public static void main(String[] args)
    {
        // Object of Line class that is shared
        // among the threads.
        Line obj = new Line();

        // creating the threads that are
        // sharing the same Object.
        Train train1 = new Train(obj);
        Train train2 = new Train(obj);

        // threads start their execution.
        train1.start();
        train2.start();
    }
}
24/01/23, 18:39 - Shesadriii 🎓: import java.util.InputMismatchException;
import java.util.Scanner;

class Main{
    public static void main(String[] args) {
        int x, y, z;
        Scanner s = new Scanner(System.in);
        boolean redo1 = true;
        System.out.print("Enter integer value for x: ");
        while (redo1) {
            try { x = s.nextInt();
                redo1 = false;
                boolean redo2 = true;
                System.out.print("\nEnter non-zero value for y: ");
                while (redo2) {
                    try { y = s.nextInt();
                        z = x / y;
                        System.out.println("\n\n" + x + "/" + y + " = " + z);
                        redo2 = false;
                    } catch (InputMismatchException e) { s.next();
                        System.out.print("InputMismatch: re-enter y: ");
                    }
                    catch (ArithmeticException e) {
                        System.out.print("Divide by 0: re-enter y: ");
                    }}}
            catch (InputMismatchException e) {
                s.next();
                System.out.print("InputMismatch: re-enter x: ");
            }}
        s.close();
    }

}
24/01/23, 19:02 - Sooorrrr 🎓: <Media omitted>
24/01/23, 19:09 - Sooorrrr 🎓: <Media omitted>
24/01/23, 19:10 - Sooorrrr 🎓: <Media omitted>
24/01/23, 19:10 - Sooorrrr 🎓: <Media omitted>
24/01/23, 20:23 - Sooorrrr 🎓: package Endsem;
import java.util.Scanner;
public class exception {
    public static void example2() {
        int x, y, z;
        Scanner s = new Scanner(System.in);

        try {
            x = s.nextInt();
            y = s.nextInt();
            z = x / y;
            System.out.println(z);
        }
        catch (IllegalArgumentException e) {
            throw new RuntimeException(e);
        }
        s.close();
    }

    public static void main(String[] args) {
        example2();
    }

}
24/01/23, 20:30 - Sooorrrr 🎓: package Endsem;
import java.io.IOException;
import java.util.InputMismatchException;
import java.util.Scanner;
public class exception {
    public static void example2() throws IOException {
        int x, y, z;
        Scanner s = new Scanner(System.in);

        try {
            x = s.nextInt();
            y = s.nextInt();
            z = x / y;
            System.out.println(z);
        }
        catch (Exception e) {
            throw new IOException(e);
        }
        s.close();
    }

    public static void main(String[] args) throws IOException {
        example2();
    }

}
24/01/23, 21:41 - Sooorrrr 🎓: package Endsem;
import java.io.IOException;
import java.util.InputMismatchException;
import java.util.Scanner;
public class exception {
    public static void example2() throws IOException {
        int x, y, z;
        Scanner s = new Scanner(System.in);

        try {
            x = s.nextInt();
            y = s.nextInt();
            z = x / y;
            System.out.println(z);
        }
        catch (Exception e) {
            throw new IOException(e);
        }
        finally {
            System.out.println("Hi hoo");
        }

        s.close();
    }

    public static void main(String[] args) throws IOException {
        example2();
    }

}
24/01/23, 23:09 - Gannu: <Media omitted>
24/01/23, 23:09 - Gannu: <Media omitted>
24/01/23, 23:09 - Gannu: <Media omitted>
24/01/23, 23:41 - Gannu: <Media omitted>
24/01/23, 23:41 - Gannu: <Media omitted>
24/01/23, 23:41 - Gannu: <Media omitted>
24/01/23, 23:41 - Gannu: <Media omitted>
24/01/23, 23:42 - Gannu: P1 ☝️
24/01/23, 23:43 - Gannu: <Media omitted>
24/01/23, 23:43 - Gannu: <Media omitted>
24/01/23, 23:43 - Gannu: <Media omitted>
24/01/23, 23:43 - Gannu: <Media omitted>
25/01/23, 00:26 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 01:14 - Harecharan CSE E Amrita CBE: this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.
use everything example in a java code
25/01/23, 01:15 - Harecharan CSE E Amrita CBE: "this" can be used to refer to current class instance variables, for example:
Copy code
class MyClass {
    int myVariable;
    void setMyVariable(int myVariable) {
        this.myVariable = myVariable;
    }
}
"this" can be used to invoke current class methods implicitly, for example:
Copy code
class MyClass {
    void myMethod() {
        // some code here
    }
    void anotherMethod() {
        this.myMethod();
    }
}
"this()" can be used to invoke current class constructors, for example:
Copy code
class MyClass {
    MyClass() {
        // some code here
    }
    MyClass(int myVariable) {
        this();
        this.myVariable = myVariable;
    }
}
"this" can be passed as an argument in a method call, for example:
Copy code
class MyClass {
    void myMethod() {
        // some code here
    }
    void anotherMethod(MyClass obj) {
        obj.myMethod();
    }
}
"this" can be passed as an argument in a constructor call, for example:
Copy code
class MyClass {
    MyClass() {
        // some code here
    }
    MyClass(MyClass obj) {
        this();
        this.myVariable = obj.myVariable;
    }
}
"this" can be used to return the current class instance from a method, for example:
Copy code
class MyClass {
    MyClass getInstance() {
        return this;
    }
}
25/01/23, 01:32 - Gannu: White is the highest level, like clouds. This is the enterprise level, and there may only be four to five for the entire organization. Examples might be to advertise goods, sell goods to customers, manage inventory, manage the supply chain, and optimize shipping.
Kite is lower than white but still a high level, providing an overview. The kite use case may be at the business unit or department level and is a summary of goals. Examples would be to register students, or if working with a travel company: make an airline, hotel, car, or cruise reservation.
Blue is at sea level, and is usually created for user goals. This often has the greatest interest for users and is easiest for a business to understand. It is usually written for a business activity and each person should be able to do one blue level activity in anywhere from 2 to 20 minutes. Examples are register a continuing student, add a new customer, place an item in a shopping cart, and order checkout.
Indigo or fish is a use case that shows lots of detail, often at a functional or subfunctional level. Examples are choose a class, pay academic fees, look up the airport code for a given city, and produce a list of customers after entering a name.
Black or clam, like the bottom of the ocean, are the most detailed use cases, at a subfunction level. Examples might be a secure logon validation, adding a new field using dynamic HTML, or using Ajax to update a Web page in a small way.
25/01/23, 01:32 - Gannu: <Media omitted>
25/01/23, 02:11 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 02:46 - Gannu: Study P1 P2 portions thoroughly
Java libraries
Like math
String. Collections
Generics
String
Array
vectors

refer javatpoint 

Message told to be shared by uma mam
25/01/23, 10:20 - Sooorrrr 🎓: <Media omitted>
25/01/23, 10:20 - Sooorrrr 🎓: <Media omitted>
25/01/23, 12:26 - Sooorrrr 🎓: <Media omitted>
25/01/23, 12:29 - Sooorrrr 🎓: <Media omitted>
25/01/23, 12:30 - Sooorrrr 🎓: <Media omitted>
25/01/23, 12:31 - Sooorrrr 🎓: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:44 - Harecharan CSE E Amrita CBE: <Media omitted>
25/01/23, 12:50 - Sooorrrr 🎓: <Media omitted>
25/01/23, 13:08 - Sooorrrr 🎓: <Media omitted>
26/01/23, 00:07 - Gannu: <Media omitted>
26/01/23, 00:07 - Gannu: <Media omitted>
26/01/23, 00:07 - Gannu: <Media omitted>
26/01/23, 00:15 - Viswaa Ramasubramanian: <Media omitted>
26/01/23, 08:47 - Sooorrrr 🎓: Happy republic day
26/01/23, 08:47 - Shesadriii 🎓: Happy republic day boiz
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:51 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 10:52 - Harecharan CSE E Amrita CBE: <Media omitted>
26/01/23, 14:25 - Shesadriii 🎓: https://www.youtube.com/watch?v=IXORIs1dHs0&list=PLBlnK6fEyqRjMH3mWf6kwqiTbT798eAOm&index=175
26/01/23, 18:18 - Sanjuuu 🎓: <Media omitted>
26/01/23, 18:18 - Sanjuuu 🎓: Updated
26/01/23, 22:23 - Sanjuuu 🎓: <Media omitted>
26/01/23, 22:24 - Viswaa Ramasubramanian: <Media omitted>
26/01/23, 22:24 - Viswaa Ramasubramanian: <Media omitted>
26/01/23, 23:04 - Viswaa Ramasubramanian: <Media omitted>
26/01/23, 23:09 - Shesadriii 🎓: <Media omitted>
27/01/23, 01:15 - Sooorrrr 🎓: <Media omitted>
27/01/23, 02:04 - Sooorrrr 🎓: <Media omitted>
27/01/23, 02:24 - Phoool Gobiiii  🎓: <Media omitted>
27/01/23, 09:59 - Araviiii 🎓: f(W,X,Y,Z)=∑m(2,6,8,9,10,11,14,15)

solve this using queen method
27/01/23, 10:50 - Araviiii 🎓: <Media omitted>
27/01/23, 11:25 - Sooorrrr 🎓: <Media omitted>
27/01/23, 11:38 - Sooorrrr 🎓: <Media omitted>
27/01/23, 11:44 - Sooorrrr 🎓: <Media omitted>
27/01/23, 11:51 - Sooorrrr 🎓: <Media omitted>
28/01/23, 13:20 - Phoool Gobiiii  🎓: line search method
28/01/23, 13:20 - Phoool Gobiiii  🎓: steepest descent direction
28/01/23, 13:20 - Phoool Gobiiii  🎓: Newton's method
28/01/23, 13:20 - Phoool Gobiiii  🎓: marquardt method
28/01/23, 13:20 - Phoool Gobiiii  🎓: least square method
28/01/23, 13:20 - Phoool Gobiiii  🎓: gradient based method
28/01/23, 13:22 - Sooorrrr 🎓: <Media omitted>
28/01/23, 13:22 - Sooorrrr 🎓: <Media omitted>
28/01/23, 13:22 - Sooorrrr 🎓: <Media omitted>
28/01/23, 13:22 - Sooorrrr 🎓: <Media omitted>
28/01/23, 13:24 - Viswaa Ramasubramanian: <Media omitted>
28/01/23, 16:57 - Shesadriii 🎓: <Media omitted>
28/01/23, 20:43 - Viswaa Ramasubramanian: You deleted this message
28/01/23, 20:43 - Viswaa Ramasubramanian: <Media omitted>
28/01/23, 20:43 - Viswaa Ramasubramanian: You deleted this message
28/01/23, 20:44 - Viswaa Ramasubramanian: @919941614061  🖕🏻🖕🏻🖕🏻
28/01/23, 20:45 - Viswaa Ramasubramanian: Oh sry 👆🏻👆🏻👆🏻
28/01/23, 22:39 - Sooorrrr 🎓: <Media omitted>
29/01/23, 01:17 - Gannu: <Media omitted>
29/01/23, 12:58 - Viswaa Ramasubramanian: <Media omitted>
29/01/23, 12:59 - Viswaa Ramasubramanian: If u want we can go to food fest but konjam neram wait panra mari irukum pola
29/01/23, 13:31 - Sanjuuu 🎓: whats a viva roll?
29/01/23, 13:33 - Viswaa Ramasubramanian: Sweet puff mari da
29/01/23, 13:33 - Viswaa Ramasubramanian: Venuma??
29/01/23, 13:33 - Sanjuuu 🎓: nono
29/01/23, 13:33 - Viswaa Ramasubramanian: @916383425519 edhvum venjma
29/01/23, 13:33 - Viswaa Ramasubramanian: 1 min time if u guys need any chocolate or chips sollunga
29/01/23, 13:34 - Sanjuuu 🎓: get me a lays
29/01/23, 13:34 - Sanjuuu 🎓: and keep it safe in ur room
29/01/23, 13:34 - Sanjuuu 🎓: ill come and get it
29/01/23, 18:33 - Gannu: <Media omitted>
29/01/23, 18:34 - Gannu: <Media omitted>
29/01/23, 19:11 - Gannu: <Media omitted>
29/01/23, 19:11 - Gannu: <Media omitted>
29/01/23, 19:11 - Gannu: <Media omitted>
29/01/23, 19:11 - Gannu: <Media omitted>
29/01/23, 20:16 - Gannu: https://youtu.be/3KQz6uN05EI
29/01/23, 20:39 - Gannu: <Media omitted>
29/01/23, 20:39 - Gannu: <Media omitted>
29/01/23, 22:04 - Gannu: <Media omitted>
29/01/23, 22:06 - Sooorrrr 🎓: <Media omitted>
29/01/23, 22:06 - Sooorrrr 🎓: <Media omitted>
29/01/23, 22:06 - Sooorrrr 🎓: <Media omitted>
30/01/23, 00:01 - Gannu: <Media omitted>
30/01/23, 09:43 - Harecharan CSE E Amrita CBE: <Media omitted>
30/01/23, 09:43 - Harecharan CSE E Amrita CBE: <Media omitted>
30/01/23, 09:43 - Harecharan CSE E Amrita CBE: <Media omitted>
30/01/23, 19:39 - Gannu: <Media omitted>
30/01/23, 19:41 - Araviiii 🎓: Dei menu va anupu da
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 19:57 - Gannu: <Media omitted>
30/01/23, 22:47 - Sanjuuu 🎓: <Media omitted>
30/01/23, 22:49 - Araviiii 🎓: Dei enna bedsheet da athu so much fur in it
30/01/23, 22:49 - Araviiii 🎓: Have fun da
30/01/23, 22:49 - Sanjuuu 🎓: 😌
30/01/23, 22:49 - Sanjuuu 🎓: null
30/01/23, 22:49 - Sanjuuu 🎓: 😂
30/01/23, 22:51 - Araviiii 🎓: Lol
30/01/23, 22:51 - Araviiii 🎓: Saved it for future purpose ✨️ da
30/01/23, 22:51 - Sooorrrr 🎓: Sanju send a pic of shower room
30/01/23, 22:52 - Viswaa Ramasubramanian: @918939677049 nilagiri toilet pic anupra 🚽🚽
30/01/23, 22:52 - Sooorrrr 🎓: Lol
30/01/23, 22:53 - Sooorrrr 🎓: What nonsense
30/01/23, 22:53 - Viswaa Ramasubramanian: Idhu engaliku kulla irukara business soor unaku puriyadhu
30/01/23, 22:53 - Viswaa Ramasubramanian: Ganesh toilet business start panna poran
30/01/23, 22:54 - Viswaa Ramasubramanian: Jeffrey and krishna anga dhan irukangala??
30/01/23, 22:55 - Gannu: But unaku no shares ….. ellaam enaku dhaan
30/01/23, 22:58 - Sanjuuu 🎓: <Media omitted>
30/01/23, 23:15 - Viswaa Ramasubramanian: Poda dei avlo dhana gansss 🫤
30/01/23, 23:16 - Gannu: Avalo dhaan
30/01/23, 23:41 - Harecharan CSE E Amrita CBE: Reached native safely
30/01/23, 23:59 - Viswaa Ramasubramanian: <Media omitted>
31/01/23, 00:01 - Viswaa Ramasubramanian: Train eritan boisss
31/01/23, 02:08 - Phoool Gobiiii  🎓: Reached airport bois
31/01/23, 05:33 - Phoool Gobiiii  🎓: <Media omitted>
31/01/23, 05:50 - Viswaa Ramasubramanian: Gethu nae nee
31/01/23, 06:03 - Sanjuuu 🎓: Bois reached home
31/01/23, 07:53 - Viswaa Ramasubramanian: Reached Home boiss
31/01/23, 07:59 - Gannu: Reached home boizz
31/01/23, 08:11 - Sooorrrr 🎓: Reached home🏠
31/01/23, 08:12 - Araviiii 🎓: Reached 🏡 boiz
31/01/23, 10:53 - Phoool Gobiiii  🎓: Landed bois
31/01/23, 10:53 - Harecharan CSE E Amrita CBE: 👍
31/01/23, 20:13 - Araviiii 🎓: soor I doubt
31/01/23, 20:13 - Araviiii 🎓: 1*
31/01/23, 20:14 - Araviiii 🎓: in Mahabharata both pandavas and karuna are gud ?
31/01/23, 20:14 - Araviiii 🎓: anyone can answer
31/01/23, 20:14 - Araviiii 🎓: if u know it
31/01/23, 20:14 - Sooorrrr 🎓: Karuna?
31/01/23, 20:14 - Sooorrrr 🎓: You mean kauravas?
31/01/23, 20:14 - Gannu: Karuna yaaru ippo
31/01/23, 20:14 - Phoool Gobiiii  🎓: Enna da achu?
31/01/23, 20:14 - Araviiii 🎓: yea yea this guys only
31/01/23, 20:15 - Araviiii 🎓: unnaku puriyathu 

this is cul edu
31/01/23, 20:15 - Sooorrrr 🎓: Initially the kauravas were fine but later during the war the pandavas were good
31/01/23, 20:15 - Sooorrrr 🎓: And the kauravas were bad
31/01/23, 20:15 - Araviiii 🎓: okie
31/01/23, 20:15 - Sooorrrr 🎓: But why mahabharata?
31/01/23, 20:15 - Sooorrrr 🎓: It's not there for your syllabus right
31/01/23, 20:15 - Araviiii 🎓: <Media omitted>
31/01/23, 20:16 - Araviiii 🎓: its there
31/01/23, 20:16 - Sooorrrr 🎓: Oh okk
31/01/23, 20:16 - Phoool Gobiiii  🎓: Ahhh
31/01/23, 20:16 - Araviiii 🎓: don't think I am studying in sem 4 portions and all
31/01/23, 20:16 - Gannu: Nee padikamate nu theriyum
31/01/23, 20:16 - Sooorrrr 🎓: Enjoy studying for cultural👍👍
31/01/23, 20:16 - Araviiii 🎓: naa nanban da nee ennaku lol
31/01/23, 20:17 - Araviiii 🎓: naala*
31/01/23, 20:17 - Gannu: Seri seri poi padi
01/02/23, 07:43 - Viswaa Ramasubramanian: You deleted this message
01/02/23, 21:43 - Araviiii 🎓: guys one more doubt 

whose side is bhishma , kauravas or pandavas ?
01/02/23, 21:43 - Sooorrrr 🎓: During the war in the side of kauravas
01/02/23, 21:43 - Harecharan CSE E Amrita CBE: all are on the side of their own justice
01/02/23, 21:43 - Gannu: This message was deleted
01/02/23, 21:43 - Gannu: Kauravas
01/02/23, 21:43 - Sooorrrr 🎓: But his heart always likes the pandavas
01/02/23, 21:43 - Harecharan CSE E Amrita CBE: and that's the fcking problrm
01/02/23, 21:44 - Araviiii 🎓: oh okie
01/02/23, 21:44 - Araviiii 🎓: thnks guys
03/02/23, 14:14 - Harecharan CSE E Amrita CBE: This message was deleted
03/02/23, 14:14 - Harecharan CSE E Amrita CBE: This message was deleted
04/02/23, 00:30 - Araviiii 🎓: Dei
04/02/23, 00:30 - Araviiii 🎓: Bois
04/02/23, 00:30 - Araviiii 🎓: Anyone awake
04/02/23, 00:30 - Gannu: Yep
04/02/23, 00:33 - Phoool Gobiiii  🎓: Yeah
04/02/23, 11:44 - Sanjuuu 🎓: How was the exam?
04/02/23, 11:44 - Araviiii 🎓: Gud
04/02/23, 11:44 - Araviiii 🎓: They asked 100 questions
04/02/23, 11:45 - Araviiii 🎓: Therijathu ezhuthita
04/02/23, 11:45 - Sanjuuu 🎓: ✨✨
04/02/23, 11:46 - Sanjuuu 🎓: Cool
04/02/23, 11:50 - Phoool Gobiiii  🎓: 😳
04/02/23, 11:57 - Araviiii 🎓: Ik
04/02/23, 13:37 - Phoool Gobiiii  🎓: <Media omitted>
04/02/23, 13:37 - Phoool Gobiiii  🎓: <Media omitted>
04/02/23, 13:37 - Harecharan CSE E Amrita CBE: you guys met up there in dubai huh
04/02/23, 13:37 - Harecharan CSE E Amrita CBE: nice!
04/02/23, 13:37 - Araviiii 🎓: <Media omitted>
04/02/23, 13:38 - Phoool Gobiiii  🎓: Yeah
04/02/23, 13:38 - Araviiii 🎓: We met in cbe da 🤣🤣🤣
04/02/23, 13:59 - Sanjuuu 🎓: <Media omitted>
04/02/23, 15:22 - Shesadriii 🎓: <Media omitted>
04/02/23, 15:23 - Shesadriii 🎓: <Media omitted>
04/02/23, 15:24 - Phoool Gobiiii  🎓: <Media omitted>
04/02/23, 15:25 - Shesadriii 🎓: 😆
04/02/23, 15:25 - Harecharan CSE E Amrita CBE: <Media omitted>
04/02/23, 15:26 - Shesadriii 🎓: <Media omitted>
04/02/23, 15:26 - Shesadriii 🎓: <Media omitted>
04/02/23, 15:26 - Shesadriii 🎓: 1 n**ga 2 n**ga .....
04/02/23, 15:27 - Shesadriii 🎓: <Media omitted>
04/02/23, 15:29 - Shesadriii 🎓: <Media omitted>
04/02/23, 16:30 - Harecharan CSE E Amrita CBE: <Media omitted>
04/02/23, 17:17 - Viswaa Ramasubramanian: Come on innum jasti beard expect panran
04/02/23, 17:18 - Viswaa Ramasubramanian: Apram moonjiya naanga epdi pakradhu
04/02/23, 21:31 - Araviiii 🎓: Guys
04/02/23, 21:31 - Harecharan CSE E Amrita CBE: Yes?
04/02/23, 21:31 - Araviiii 🎓: I watched an amazing tdy
04/02/23, 21:31 - Araviiii 🎓: Film tdy*
04/02/23, 21:32 - Araviiii 🎓: If u guys got a chance that film please it is worth watching
04/02/23, 21:32 - Araviiii 🎓: Film name : run baby run
04/02/23, 21:32 - Araviiii 🎓: Tamil movie only
04/02/23, 21:32 - Gannu: RJ Balaji dhaane
04/02/23, 21:32 - Araviiii 🎓: S
04/02/23, 21:33 - Gannu: 👍🏻
04/02/23, 21:33 - Araviiii 🎓: 7  pm to 9 30 pm it went like a sec to mee
04/02/23, 21:33 - Gannu: Yeah complete thriller ig
04/02/23, 21:34 - Araviiii 🎓: <Media omitted>
04/02/23, 21:35 - Harecharan CSE E Amrita CBE: U r collecting the bottles na
04/02/23, 21:35 - Harecharan CSE E Amrita CBE: Superb
04/02/23, 21:36 - Harecharan CSE E Amrita CBE: Kaailankadaila podu perichambalam kedaikum saapudu odambuku nalathu
04/02/23, 21:36 - Gannu: Enna vittu vangite la…. Paathukalaam 😠
04/02/23, 21:38 - Gannu: U guys had full fun 2day ig 😂
04/02/23, 22:15 - Viswaa Ramasubramanian: You deleted this message
05/02/23, 08:10 - Araviiii 🎓: Reached home 🏡 bois
05/02/23, 15:17 - Araviiii 🎓: <Media omitted>
07/02/23, 17:11 - Araviiii 🎓: Guys
07/02/23, 17:11 - Harecharan CSE E Amrita CBE: solda
07/02/23, 17:11 - Araviiii 🎓: Hpoj was created by amrita students
07/02/23, 17:11 - Harecharan CSE E Amrita CBE: aama
07/02/23, 17:11 - Harecharan CSE E Amrita CBE: sort of
07/02/23, 17:11 - Araviiii 🎓: Okie
07/02/23, 17:11 - Araviiii 🎓: Hm
07/02/23, 17:11 - Araviiii 🎓: Btw the nee padichitiya ?
07/02/23, 17:11 - Harecharan CSE E Amrita CBE: yep  mostly
07/02/23, 17:11 - Araviiii 🎓: Gud gud
07/02/23, 17:12 - Harecharan CSE E Amrita CBE: viswa gave me current 1st year paper and all
07/02/23, 17:12 - Harecharan CSE E Amrita CBE: im practising it now
07/02/23, 18:15 - Araviiii 🎓: Oh okie
08/02/23, 08:23 - Sanjuuu 🎓: Tf????
08/02/23, 08:30 - Araviiii 🎓: ?
08/02/23, 08:30 - Sanjuuu 🎓: What is this about?
08/02/23, 08:35 - Harecharan CSE E Amrita CBE: Ohh that is abt aravii asking me whether I studied for multivariable calculus
08/02/23, 09:20 - Araviiii 🎓: Yep.....👍🏻
09/02/23, 09:48 - Harecharan CSE E Amrita CBE: Actually guys I forgot to say this but yesterday only I confirmed that my exam is 11th
09/02/23, 10:03 - Harecharan CSE E Amrita CBE: machaans, naa oru loosu da
09/02/23, 10:03 - Araviiii 🎓: 😆
09/02/23, 10:04 - Araviiii 🎓: Enga luku monnadiya theriyum da
09/02/23, 11:15 - Viswaa Ramasubramanian: <Media omitted>
10/02/23, 14:06 - Harecharan CSE E Amrita CBE: Machans full stack development cir course ku yaaravathu certificate apply panningala
10/02/23, 15:05 - Araviiii 🎓: Not me
10/02/23, 17:47 - Sanjuuu 🎓: Birthday boy treat?
10/02/23, 17:47 - Sanjuuu 🎓: Dinner today
10/02/23, 18:19 - Viswaa Ramasubramanian: Adhan amam la namma kuda swiggy plan pannome
10/02/23, 18:49 - Harecharan CSE E Amrita CBE: <Media omitted>
10/02/23, 21:19 - Gannu: <Media omitted>
10/02/23, 21:20 - Gannu: Sujee again 😢
10/02/23, 21:20 - Araviiii 🎓: Marupidiyum cir after lunch-aa
10/02/23, 21:20 - Araviiii 🎓: Sotha
10/02/23, 21:20 - Araviiii 🎓: Sotham*
10/02/23, 21:21 - Harecharan CSE E Amrita CBE: Thev thanama irukuthu time table
10/02/23, 21:22 - Viswaa Ramasubramanian: Lolugu illa hapada
10/02/23, 21:22 - Viswaa Ramasubramanian: Sujee dhana theory dhana *pathukalam*
10/02/23, 21:23 - Viswaa Ramasubramanian: Karmam Wednesday free period Friday va irundhirkalam
10/02/23, 21:23 - Viswaa Ramasubramanian: AVP adhe manushan karumam daaaa
10/02/23, 21:23 - Gannu: D sec ku Friday after lunch free 😢
10/02/23, 21:23 - Viswaa Ramasubramanian: Wtffff
10/02/23, 21:24 - Viswaa Ramasubramanian: Ensoy pannathum
10/02/23, 21:24 - Viswaa Ramasubramanian: Wednesday enna elavu da adhu
10/02/23, 21:24 - Viswaa Ramasubramanian: 3 period dhan
10/02/23, 21:25 - Viswaa Ramasubramanian: Tuesday same shit repeting cir
10/02/23, 21:26 - Araviiii 🎓: Okie friends u guys study and teach me the main topics to get pass mark
10/02/23, 21:26 - Araviiii 🎓: Athu pothum ennaku
10/02/23, 21:27 - Araviiii 🎓: Y da?
10/02/23, 21:27 - Harecharan CSE E Amrita CBE: Olunga A grade vaangara valiya paaru
10/02/23, 21:28 - Araviiii 🎓: Seri seri
10/02/23, 21:28 - Araviiii 🎓: Nee solitala vangi du vom
10/02/23, 21:28 - Harecharan CSE E Amrita CBE: Naa cr aanana ill try my level best to swap Wednesday and Friday timetable
10/02/23, 21:29 - Gannu: Hey only C and E section has Friday afternoon class
10/02/23, 21:29 - Araviiii 🎓: can cr change the TT itself ?

that much power CR has-aa?
10/02/23, 21:30 - Harecharan CSE E Amrita CBE: Yaarukada theriyum adichu viduvom
10/02/23, 21:30 - Araviiii 🎓: lol
10/02/23, 21:30 - Harecharan CSE E Amrita CBE: I cant change timetable but I can beg to each teacher to take wednesdays class and take leave on friday
10/02/23, 21:31 - Harecharan CSE E Amrita CBE: Depends on each teacher
10/02/23, 21:31 - Araviiii 🎓: crct
10/02/23, 21:31 - Araviiii 🎓: ethu unnala mudiyium
10/02/23, 21:31 - Viswaa Ramasubramanian: F section ku GR Ramya sujee mam subject ku
10/02/23, 21:31 - Viswaa Ramasubramanian: Adha pavi mudive pantiya
10/02/23, 21:31 - Harecharan CSE E Amrita CBE: <Media omitted>
10/02/23, 21:32 - Viswaa Ramasubramanian: DSA lab ah cancel paniru
10/02/23, 21:32 - Viswaa Ramasubramanian: F section OS ku Arun and Raghavachari da
10/02/23, 21:32 - Harecharan CSE E Amrita CBE: See if I can atleast ask fri first period OS teacher to take class on Wednesday, we can wake up late and go to class on 1030am
10/02/23, 21:34 - Viswaa Ramasubramanian: D section Ritwik doii
10/02/23, 21:36 - Viswaa Ramasubramanian: A section kum Raghavachari da
10/02/23, 21:37 - Harecharan CSE E Amrita CBE: Only possible if he is a fossil like BTS
10/02/23, 21:37 - Harecharan CSE E Amrita CBE: HPOJ this time also we have aa?
10/02/23, 21:39 - Viswaa Ramasubramanian: Sujee mam ah thookiriya
10/02/23, 21:39 - Viswaa Ramasubramanian: Kanavila vandha mari konniru
10/02/23, 21:39 - Viswaa Ramasubramanian: Andha mam lab eh theory mari edhupanga idhula theory vera indha vathi 
Thoonga vendhiyadhudhan
10/02/23, 22:08 - Viswaa Ramasubramanian: First day 4th sem anniki sathiya mam and sujee mam mogathoda arambika porom 🙂🙃
10/02/23, 22:17 - Shesadriii 🎓: XD.....we don't have any free first periods
10/02/23, 22:39 - Harecharan CSE E Amrita CBE: First is sathya mam , so its going to be a great semester da
11/02/23, 07:03 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 07:04 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 07:04 - Viswaa Ramasubramanian: *DSA*
11/02/23, 07:19 - Harecharan CSE E Amrita CBE: Apa thalaila mozhaga arachuduvom 😁
11/02/23, 07:21 - Viswaa Ramasubramanian: BTS pogi ippah VKS
11/02/23, 07:29 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 07:30 - Harecharan CSE E Amrita CBE: saavuku mela oru periya thandaiyaaga kodupen
11/02/23, 07:32 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 16:33 - Araviiii 🎓: dei p2 marks for avp was uploaded in AUMS-aa?
11/02/23, 16:34 - Araviiii 🎓: dei yaarachu othar online vaanga da
11/02/23, 16:34 - Gannu: Yes
11/02/23, 16:34 - Araviiii 🎓: okie then wait
11/02/23, 16:35 - Araviiii 🎓: CA - 17
P1 - 17.83
P2 - 17.5


naa pass or fail?
11/02/23, 16:36 - Araviiii 🎓: I think fail
11/02/23, 16:48 - Viswaa Ramasubramanian: Wait panra end sem la 13 mela na nee pass
11/02/23, 16:48 - Araviiii 🎓: Oh okie
11/02/23, 20:21 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 20:21 - Viswaa Ramasubramanian: At CBE
11/02/23, 20:32 - Harecharan CSE E Amrita CBE: Macha enna namma area package.
11/02/23, 20:32 - Harecharan CSE E Amrita CBE: *pakkam
11/02/23, 20:38 - Viswaa Ramasubramanian: <Media omitted>
11/02/23, 20:39 - Viswaa Ramasubramanian: Kerala la irundhu return
11/02/23, 20:51 - Viswaa Ramasubramanian: 12:30 trichy ku train da
11/02/23, 20:52 - Harecharan CSE E Amrita CBE: Ok
11/02/23, 22:27 - Viswaa Ramasubramanian: <Media omitted>
13/02/23, 08:36 - Araviiii 🎓: <Media omitted>
13/02/23, 08:44 - Araviiii 🎓: This thing is haunting me wherever I go 🚶‍♂️ 💔
13/02/23, 12:39 - Sanjuuu 🎓: https://youtu.be/XXR7P2Wt2iw
13/02/23, 12:39 - Sanjuuu 🎓: micheal Keaton batman
13/02/23, 12:39 - Sanjuuu 🎓: 😵
14/02/23, 18:02 - Viswaa Ramasubramanian: New timetable will be uploaded after 8pm.look at that
14/02/23, 18:02 - Shesadriii 🎓: Ada poya
14/02/23, 18:02 - Viswaa Ramasubramanian: Enna harecharan sujee mam ah kidhu potitiya 
New timetable nu solranunga
14/02/23, 18:05 - Viswaa Ramasubramanian: <Media omitted>
14/02/23, 18:06 - Viswaa Ramasubramanian: Oru vela irukumo 🙃
14/02/23, 18:07 - Viswaa Ramasubramanian: <Media omitted>
15/02/23, 05:25 - Viswaa Ramasubramanian: @919566280078 
96 bus innaiki free ah dhan iruku da
15/02/23, 05:25 - Viswaa Ramasubramanian: Not crowded like usual seat easy ah kedaikum
15/02/23, 05:26 - Araviiii 🎓: 6 members here
15/02/23, 05:26 - Araviiii 🎓: I don't think I can come in bus da
15/02/23, 05:26 - Araviiii 🎓: 2 taxi than mostly
15/02/23, 05:30 - Viswaa Ramasubramanian: Dei adhuku book omni
15/02/23, 05:31 - Viswaa Ramasubramanian: Go upto 900 or 800
15/02/23, 05:31 - Viswaa Ramasubramanian: Adhuku mela ketah go other side
15/02/23, 05:32 - Araviiii 🎓: Okie
15/02/23, 09:21 - Phoool Gobiiii  🎓: <Media omitted>
16/02/23, 11:55 - Sanjuuu 🎓: Hare
16/02/23, 11:55 - Sanjuuu 🎓: Kavita mam called u with laptop
16/02/23, 11:55 - Sanjuuu 🎓: Amruthiyu poirukan
16/02/23, 11:55 - Harecharan CSE E Amrita CBE: Ok
16/02/23, 11:55 - Harecharan CSE E Amrita CBE: Coming
17/02/23, 05:44 - Sooorrrr 🎓: <Media omitted>
17/02/23, 05:44 - Sooorrrr 🎓: <Media omitted>
17/02/23, 05:53 - Gannu: <Media omitted>
17/02/23, 06:08 - Phoool Gobiiii  🎓: Enjoy bois ❤️✨
17/02/23, 07:59 - Sanjuuu 🎓: It is spacious near the doors isn't it?
17/02/23, 08:26 - Gannu: Yessss lyk a hallway
17/02/23, 08:40 - Sanjuuu 🎓: Yes
18/02/23, 04:54 - Phoool Gobiiii  🎓: Reached home bois
18/02/23, 12:01 - Araviiii 🎓: <Media omitted>
18/02/23, 12:01 - Araviiii 🎓: <Media omitted>
20/02/23, 14:52 - Phoool Gobiiii  🎓: <Media omitted>
20/02/23, 14:52 - Phoool Gobiiii  🎓: <Media omitted>
20/02/23, 18:27 - Araviiii 🎓: <Media omitted>
20/02/23, 18:27 - Araviiii 🎓: me all pass
20/02/23, 18:27 - Araviiii 🎓: lesss goooooo
21/02/23, 16:55 - Viswaa Ramasubramanian: @919566280078 
@918939677049 
@918248897225 
Come to MBA
21/02/23, 16:56 - Viswaa Ramasubramanian: Canteen
21/02/23, 19:00 - Harecharan CSE E Amrita CBE: 😊 Join our Undercover game: SE8G (Smart link)
https://undercoverapp.page.link/NtMib1TYJVCBLrv96
22/02/23, 10:51 - Viswaa Ramasubramanian: Business Comm Language lab is in 3rd floor
22/02/23, 10:51 - Viswaa Ramasubramanian: W409
22/02/23, 23:22 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:25 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:31 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:32 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:38 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:39 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:46 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:46 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:46 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:50 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:51 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:51 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:52 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:53 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:54 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:55 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:55 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:56 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:57 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:58 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:58 - Harecharan CSE E Amrita CBE: <Media omitted>
22/02/23, 23:58 - Harecharan CSE E Amrita CBE: <Media omitted>
23/02/23, 09:49 - Harecharan CSE E Amrita CBE: <Media omitted>
23/02/23, 17:44 - Viswaa Ramasubramanian: <Media omitted>
23/02/23, 19:06 - Araviiii 🎓: <Media omitted>
23/02/23, 19:31 - Harecharan CSE E Amrita CBE: Where tis photo taken @919566280078
23/02/23, 19:32 - Araviiii 🎓: From ettimadai station
23/02/23, 19:33 - Harecharan CSE E Amrita CBE: 👌
23/02/23, 19:38 - Viswaa Ramasubramanian: Plain roas5
23/02/23, 19:38 - Viswaa Ramasubramanian: Ghee
Masala
23/02/23, 19:38 - Viswaa Ramasubramanian: Aloo paratha
Green peas
Panneerrre butter
23/02/23, 19:38 - Gannu: Surya - aloo paratha paneer
23/02/23, 19:39 - Gannu: Me - ghee roast
23/02/23, 19:39 - Shesadriii 🎓: Aloo Paratha panner me - 3 aloo paratha
23/02/23, 19:39 - Phoool Gobiiii  🎓: Aloo and panner for me - 2 pieces only
23/02/23, 19:39 - Harecharan CSE E Amrita CBE: 3 Aloo parathyroid Green peas panner
23/02/23, 19:40 - Araviiii 🎓: Sanjay?
23/02/23, 19:40 - Viswaa Ramasubramanian: Bhatura is there
23/02/23, 19:40 - Harecharan CSE E Amrita CBE: Panneerr da for me
23/02/23, 19:40 - Viswaa Ramasubramanian: No allo paratha
23/02/23, 19:41 - Harecharan CSE E Amrita CBE: Then for me ghee roast
23/02/23, 19:41 - Phoool Gobiiii  🎓: Okay for me - 2 batura + paneer
23/02/23, 19:41 - Shesadriii 🎓: Batura*
23/02/23, 19:41 - Viswaa Ramasubramanian: Ordered
23/02/23, 19:41 - Phoool Gobiiii  🎓: Guys.. main or mba?
23/02/23, 19:43 - Viswaa Ramasubramanian: Mba
23/02/23, 19:43 - Viswaa Ramasubramanian: Hare sry da
23/02/23, 19:43 - Harecharan CSE E Amrita CBE: Pravaala
23/02/23, 19:44 - Viswaa Ramasubramanian: Ordered 3 batura and paneer u
23/02/23, 19:44 - Harecharan CSE E Amrita CBE: Kk
24/02/23, 08:13 - Harecharan CSE E Amrita CBE: I'm going it canteen
24/02/23, 09:33 - Araviiii 🎓: Guys try to proxy my attendance
24/02/23, 09:46 - Phoool Gobiiii  🎓: <Media omitted>
24/02/23, 11:18 - Araviiii 🎓: Reached home 🏡 by 11 am bois
24/02/23, 15:12 - Shesadriii 🎓: class Node:
    def __init__(self,message):
        self.data = message
        self.next=None

class QueueNode:
    def __init__(self,number):
        self.size = number
        self.head = None
        self.tail = None
        self.count=0
    def isEmpty(self):
        if(self.head==None):
            return True
        return False
    def insert(self,element):
        node=Node(element)
        if(self.count==self.size):
            print("Cant insert element")
        else:
            if(self.count==0):
                self.head=node
            else:
                self.tail.next=node
            self.tail=node
            self.count+=1
            
            
    def remove(self):
        if(self.isEmpty()):
            print("Cant remove element")
        else:
            stuff=self.head.data
            print(stuff)
            if(self.count==1):
                self.head=None
                self.tail=None
            else:
                self.head=self.head.next
            self.count-=1
    def get_size(self):
        return self.count

    def display(self):
        dummyNode=self.head
        while dummyNode is not None:
            print(dummyNode.data)
            dummyNode=dummyNode.next


queue = QueueNode(5)
queue.insert(5)
queue.insert(4)
queue.insert(3)
queue.remove()
queue.get_size()
print(queue.isEmpty())
queue.display()
24/02/23, 15:12 - Shesadriii 🎓: QUEUE using ll
24/02/23, 16:06 - Araviiii 🎓: How was the class bois ?
24/02/23, 16:07 - Araviiii 🎓: Did u guys try?
24/02/23, 16:24 - Sanjuuu 🎓: We said...."roll number six absent mam/sir"
24/02/23, 17:39 - Araviiii 🎓: Seri da
24/02/23, 19:15 - Viswaa Ramasubramanian: <Media omitted>
24/02/23, 19:15 - Araviiii 🎓: This message was deleted
24/02/23, 19:20 - Viswaa Ramasubramanian: @919566280078  Garlic bread da
24/02/23, 19:21 - Viswaa Ramasubramanian: <Media omitted>
24/02/23, 21:07 - Phoool Gobiiii  🎓: <Media omitted>
24/02/23, 21:07 - Viswaa Ramasubramanian: Senthil kumar sir ah
24/02/23, 21:07 - Phoool Gobiiii  🎓: Yeahh
24/02/23, 21:23 - Phoool Gobiiii  🎓: Boarded bus, bois
24/02/23, 21:33 - Sooorrrr 🎓: 👍
24/02/23, 21:34 - Shesadriii 🎓: Veri
24/02/23, 22:02 - Shesadriii 🎓: <Media omitted>
24/02/23, 22:03 - Viswaa Ramasubramanian: Boiz reached gandhipuram
24/02/23, 22:03 - Viswaa Ramasubramanian: Bus full disco mari irundichu da but semma kootam
24/02/23, 22:34 - Harecharan CSE E Amrita CBE: nope
24/02/23, 22:34 - Harecharan CSE E Amrita CBE: but ram proxy'd himself 😂
24/02/23, 23:12 - Viswaa Ramasubramanian: Boarded bus boisss
25/02/23, 05:03 - Viswaa Ramasubramanian: Reached Thanjavur boiss
25/02/23, 05:03 - Phoool Gobiiii  🎓: Reached home
25/02/23, 05:06 - Sanjuuu 🎓: Reached home
25/02/23, 07:42 - Shesadriii 🎓: Reached home
25/02/23, 08:06 - Araviiii 🎓: Gm guys
25/02/23, 08:06 - Araviiii 🎓: Have fun guys
25/02/23, 08:27 - Sooorrrr 🎓: Reached home
25/02/23, 08:38 - Gannu: Reached home 🏡
25/02/23, 12:05 - Sanjuuu 🎓: https://youtu.be/8I4fd_Sap-g
25/02/23, 12:16 - Phoool Gobiiii  🎓: Guys, any idea on what's to be done for lab 1 assignment in aums for COA?
25/02/23, 12:19 - Shesadriii 🎓: <Media omitted>
25/02/23, 12:19 - Shesadriii 🎓: isn't this the task ?
25/02/23, 12:22 - Sanjuuu 🎓: This is dsa right?
25/02/23, 12:22 - Shesadriii 🎓: ow
25/02/23, 12:23 - Shesadriii 🎓: yeo
25/02/23, 12:23 - Sanjuuu 🎓: That one mam asked us to implement all the gates in the 3 ways possible
25/02/23, 12:23 - Shesadriii 🎓: oh  yes
25/02/23, 12:23 - Phoool Gobiiii  🎓: Oh just that?
25/02/23, 12:24 - Sanjuuu 🎓: Yea
25/02/23, 12:24 - Sanjuuu 🎓: 6 gates
25/02/23, 12:24 - Phoool Gobiiii  🎓: Okayy
25/02/23, 12:24 - Shesadriii 🎓: Yea yea
25/02/23, 12:24 - Araviiii 🎓: yea... that dataflow conditional flow that stuff ryt
25/02/23, 12:24 - Sanjuuu 🎓: What are we supposed to do here tho?
25/02/23, 12:24 - Sanjuuu 🎓: Yep
25/02/23, 12:24 - Sanjuuu 🎓: #topper
25/02/23, 12:24 - Araviiii 🎓: gud joke
25/02/23, 12:25 - Shesadriii 🎓: im actually out of ideas for the right and left cursor
25/02/23, 12:25 - Sanjuuu 🎓: We are supposed to do this in python ....yes?
25/02/23, 12:25 - Shesadriii 🎓: yep
25/02/23, 12:25 - Araviiii 🎓: u guys reached tdy morning only and started to study
25/02/23, 12:25 - Shesadriii 🎓: same stack operations stuff
25/02/23, 12:26 - Sanjuuu 🎓: Nope...not gonna touch laptop today
25/02/23, 12:26 - Sanjuuu 🎓: Just planning to watch antman and sleep
25/02/23, 12:26 - Shesadriii 🎓: We are just having the.....idea
25/02/23, 12:26 - Shesadriii 🎓: honestly its not that good it seems
25/02/23, 12:26 - Araviiii 🎓: sollu vada sollu
25/02/23, 12:26 - Araviiii 🎓: va
25/02/23, 12:27 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:27 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:27 - Shesadriii 🎓: <Media omitted>
25/02/23, 12:27 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:28 - Shesadriii 🎓: <Media omitted>
25/02/23, 12:28 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:28 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:28 - Sanjuuu 🎓: <Media omitted>
25/02/23, 12:28 - Shesadriii 🎓: <Media omitted>
25/02/23, 12:31 - Shesadriii 🎓: <Media omitted>
25/02/23, 14:51 - Sanjuuu 🎓: Bois...do we have any long holiday in March?
25/02/23, 14:54 - Shesadriii 🎓: Nope
25/02/23, 14:54 - Sanjuuu 🎓: I mean like 3 continuos days
25/02/23, 14:54 - Shesadriii 🎓: Lemme see
25/02/23, 14:55 - Shesadriii 🎓: Nope
25/02/23, 14:55 - Shesadriii 🎓: <Media omitted>
25/02/23, 14:55 - Shesadriii 🎓: Apr yes
25/02/23, 14:56 - Shesadriii 🎓: With the Tamil new year, it gets clubbed upon
25/02/23, 17:46 - Shesadriii 🎓: <Media omitted>
25/02/23, 17:47 - Gannu: 😆
25/02/23, 17:47 - Shesadriii 🎓: Lol this must help
25/02/23, 18:27 - Viswaa Ramasubramanian: <Media omitted>
26/02/23, 00:06 - Sanjuuu 🎓: March 20 21 we can take leave
26/02/23, 00:06 - Sanjuuu 🎓: 5 days holiday
26/02/23, 00:07 - Gannu: <Media omitted>
26/02/23, 19:47 - Harecharan CSE E Amrita CBE: https://youtube.com/shorts/R_G1wlTtGwE?feature=share
26/02/23, 20:35 - Viswaa Ramasubramanian: <Media omitted>
26/02/23, 20:35 - Viswaa Ramasubramanian: Saavadikirapla 2 credit course appah dhan varanuma ivaru
26/02/23, 20:35 - Viswaa Ramasubramanian: @918939677049 
@919566280078 
Ivara samalika idea sollunga da
26/02/23, 20:36 - Shesadriii 🎓: Ignore ig 😆
26/02/23, 20:36 - Viswaa Ramasubramanian: Dei avanunga irundha pa adhu 0 credit
26/02/23, 20:36 - Harecharan CSE E Amrita CBE: what is that da
26/02/23, 20:36 - Viswaa Ramasubramanian: Ippah 2 credit
26/02/23, 20:36 - Viswaa Ramasubramanian: Nee nalla iru da
Verum verbal mam ah sight adicha pathadhu
26/02/23, 20:37 - Viswaa Ramasubramanian: Soft skills class um attend pannanum
26/02/23, 20:37 - Shesadriii 🎓: <Media omitted>
26/02/23, 20:37 - Harecharan CSE E Amrita CBE: ?
26/02/23, 20:37 - Viswaa Ramasubramanian: Enna thambi badhila kanom kanavu kana poitiya
26/02/23, 20:37 - Harecharan CSE E Amrita CBE: is it immediate?
26/02/23, 20:37 - Viswaa Ramasubramanian: Raghu pradeep nair
CIR soft skills google classroom
26/02/23, 20:38 - Viswaa Ramasubramanian: Avaru next class kulla nu neraiya vishayam munnadi anupchirkaru
26/02/23, 20:38 - Viswaa Ramasubramanian: This one before project nu potrikaeu
26/02/23, 20:38 - Viswaa Ramasubramanian: So idhuku time iruku
26/02/23, 20:38 - Harecharan CSE E Amrita CBE: oohhhh
appa seri
26/02/23, 20:38 - Viswaa Ramasubramanian: But idhuku munnadi stuffs jasti iruku
26/02/23, 20:39 - Harecharan CSE E Amrita CBE: macha,saturday sunday veri veriya padikaranu soneenla,
26/02/23, 20:39 - Viswaa Ramasubramanian: Avaru class la kelvi kepara nu terila
Strict ah num terila
26/02/23, 20:39 - Harecharan CSE E Amrita CBE: athaiye innum na padikala
26/02/23, 20:39 - Viswaa Ramasubramanian: Kilichirpa nu teriyum
26/02/23, 20:39 - Harecharan CSE E Amrita CBE: we'll ask someone
26/02/23, 20:39 - Viswaa Ramasubramanian: @918939677049 
@919566280078 
Tah kepom
26/02/23, 20:40 - Viswaa Ramasubramanian: Experienced candidates
26/02/23, 20:40 - Harecharan CSE E Amrita CBE: according to her it seems that he isn't strict
26/02/23, 20:40 - Harecharan CSE E Amrita CBE: him*
26/02/23, 20:40 - Viswaa Ramasubramanian: Her ah eva ava
26/02/23, 20:40 - Viswaa Ramasubramanian: 👍🏻
26/02/23, 20:41 - Viswaa Ramasubramanian: Papom anyway avaru class munnadi dhan epdi nalum nee fuel ethura mari energy ethirva so...
26/02/23, 20:41 - Viswaa Ramasubramanian: *tha pathukalam
26/02/23, 22:07 - Araviiii 🎓: The best way to escape is to solve all shit he gives then and there . Don't keep anything back lock as well as don't try do that shit in elevanth hour
26/02/23, 22:08 - Viswaa Ramasubramanian: <Media omitted>
26/02/23, 22:09 - Araviiii 🎓: So wat u are gonna do now ?
26/02/23, 22:10 - Viswaa Ramasubramanian: <Media omitted>
26/02/23, 22:10 - Araviiii 🎓: Dei moron do the ryt shit now
26/02/23, 22:10 - Araviiii 🎓: If time permits then go ahead
26/02/23, 22:11 - Viswaa Ramasubramanian: <Media omitted>
26/02/23, 22:11 - Viswaa Ramasubramanian: Ok try panren
26/02/23, 22:27 - Shesadriii 🎓: <Media omitted>
26/02/23, 22:28 - Araviiii 🎓: Wait u guys are traveling-sa
26/02/23, 22:28 - Araviiii 🎓: Oh shit I think i forgot i gotta stay for the nxt 2 more days
26/02/23, 22:29 - Harecharan CSE E Amrita CBE: enna verupethiriyaa
26/02/23, 22:29 - Araviiii 🎓: Lite-aa
26/02/23, 22:29 - Harecharan CSE E Amrita CBE: <Media omitted>
26/02/23, 22:29 - Araviiii 🎓: Anyways safe journey bois
26/02/23, 22:29 - Harecharan CSE E Amrita CBE: KK
26/02/23, 22:32 - Viswaa Ramasubramanian: But we are moving back to home next week 🙃
27/02/23, 18:43 - Araviiii 🎓: https://www.msuniv.ac.in/images/e-content/25.Unix%20Lab%20Exercises%20and%20Solutions.pdf
28/02/23, 06:33 - Araviiii 🎓: guys April 7th , 8th an 9th holiday-va?
28/02/23, 06:33 - Araviiii 🎓: and*
28/02/23, 06:33 - Araviiii 🎓: april 7th is gud friday
28/02/23, 06:36 - Phoool Gobiiii  🎓: I think 8th is working
28/02/23, 06:36 - Phoool Gobiiii  🎓: 8th is a working Saturday
28/02/23, 06:37 - Araviiii 🎓: oh okie
28/02/23, 06:37 - Araviiii 🎓: but for this sem
28/02/23, 06:37 - Araviiii 🎓: all Saturday and Sunday's holiday ryt
28/02/23, 06:37 - Araviiii 🎓: ?
28/02/23, 06:38 - Phoool Gobiiii  🎓: Yeah? I don’t think so?
28/02/23, 06:38 - Araviiii 🎓: somene told me this
28/02/23, 06:38 - Araviiii 🎓: I think its surya
28/02/23, 06:38 - Araviiii 🎓: ask him once
28/02/23, 06:38 - Phoool Gobiiii  🎓: Oh that’s why we had holiday last week?
28/02/23, 06:38 - Phoool Gobiiii  🎓: Okay
28/02/23, 06:39 - Araviiii 🎓: yea...that's wat people
28/02/23, 07:14 - Araviiii 🎓: Said
28/02/23, 07:22 - Araviiii 🎓: <Media omitted>
28/02/23, 07:58 - Phoool Gobiiii  🎓: Illa
28/02/23, 07:59 - Araviiii 🎓: Therithu
28/02/23, 07:59 - Araviiii 🎓: Innikachu panugada
28/02/23, 08:02 - Shesadriii 🎓: Not all......only once a month we will have Saturday class
28/02/23, 08:04 - Sanjuuu 🎓: Yep
28/02/23, 08:05 - Araviiii 🎓: And when is that
28/02/23, 08:06 - Araviiii 🎓: 1st week or 3rd week of a month
28/02/23, 08:06 - Araviiii 🎓: ?
28/02/23, 08:07 - Phoool Gobiiii  🎓: 1st week and 3rd week are always holidays.. must be either 2nd or last weeks
28/02/23, 08:07 - Araviiii 🎓: aa my bad again
28/02/23, 08:07 - Araviiii 🎓: so when is it
28/02/23, 19:33 - Viswaa Ramasubramanian: <Media omitted>
28/02/23, 19:34 - Harecharan CSE E Amrita CBE: <Media omitted>
28/02/23, 19:35 - Harecharan CSE E Amrita CBE: Yall guys missed it
28/02/23, 19:35 - Phoool Gobiiii  🎓: <Media omitted>
28/02/23, 19:42 - Viswaa Ramasubramanian: <Media omitted>
28/02/23, 19:42 - Viswaa Ramasubramanian: <Media omitted>
28/02/23, 21:16 - Araviiii 🎓: <Media omitted>
28/02/23, 21:19 - Sooorrrr 🎓: Nice
28/02/23, 21:26 - Araviiii 🎓: <Media omitted>
28/02/23, 21:27 - Araviiii 🎓: Actually so many mini led display and chairs to sit near the entrance point
01/03/23, 00:30 - Phoool Gobiiii  🎓: https://github.com/suwubham/Sorting-Visualization-and-Analysis
01/03/23, 18:13 - Viswaa Ramasubramanian: https://bhaktinidhi.com/en/guru-stotram-in-english-akhanda-mandalakaram/
01/03/23, 18:13 - Sooorrrr 🎓: <Media omitted>
01/03/23, 18:49 - Araviiii 🎓: <Media omitted>
01/03/23, 19:06 - Viswaa Ramasubramanian: Harecharan innum mudila
01/03/23, 19:06 - Viswaa Ramasubramanian: Call pannadha
01/03/23, 19:06 - Shesadriii 🎓: Eppa mudiyum
01/03/23, 19:06 - Araviiii 🎓: 🤷🏻‍♂️
01/03/23, 19:18 - Harecharan CSE E Amrita CBE: Innuma mudiyala
01/03/23, 19:19 - Phoool Gobiiii  🎓: https://www.amritapuri.org/3711/arati.aum
01/03/23, 19:21 - Shesadriii 🎓: Done wit da bhajans ?
01/03/23, 19:23 - Viswaa Ramasubramanian: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
01/03/23, 19:38 - Sanjuuu 🎓: <Media omitted>
02/03/23, 15:01 - Harecharan CSE E Amrita CBE: This message was deleted
02/03/23, 15:12 - Harecharan CSE E Amrita CBE: This message was deleted
02/03/23, 15:16 - Harecharan CSE E Amrita CBE: This message was deleted
02/03/23, 16:14 - Harecharan CSE E Amrita CBE: Anyone interested in ICPC coding competition guys
02/03/23, 23:24 - Araviiii 🎓: <Media omitted>
02/03/23, 23:24 - Araviiii 🎓: Viswaa
04/03/23, 07:38 - Shesadriii 🎓: Reached home an hour ago guys
04/03/23, 08:28 - Sooorrrr 🎓: Reached home guys
04/03/23, 08:34 - Gannu: Reached homee
04/03/23, 09:00 - Harecharan CSE E Amrita CBE: I also reached to home yesterday sorry guys i4got to inform
06/03/23, 12:23 - Viswaa Ramasubramanian: <Media omitted>
06/03/23, 15:08 - Harecharan CSE E Amrita CBE: <Media omitted>
06/03/23, 16:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/03/23, 19:31 - Sooorrrr 🎓: <Media omitted>
07/03/23, 19:31 - Sooorrrr 🎓: <Media omitted>
08/03/23, 09:53 - Phoool Gobiiii  🎓: <Media omitted>
08/03/23, 09:54 - Sooorrrr 🎓: Thanks man
08/03/23, 10:02 - Araviiii 🎓: <Media omitted>
08/03/23, 10:33 - Sooorrrr 🎓: <Media omitted>
08/03/23, 19:31 - Araviiii 🎓: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:01 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 20:04 - Gannu: <Media omitted>
08/03/23, 21:27 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:29 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:29 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:29 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:29 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:31 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:31 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:31 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 21:31 - Harecharan CSE E Amrita CBE: <Media omitted>
08/03/23, 22:58 - Harecharan CSE E Amrita CBE: <Media omitted>
09/03/23, 09:42 - Sanjuuu 🎓: Bois
09/03/23, 09:42 - Sanjuuu 🎓: Aravind is missing
09/03/23, 09:43 - Gannu: He’s probably in the rest room
09/03/23, 09:43 - Sanjuuu 🎓: Isn't picking up calls
09/03/23, 10:07 - Araviiii 🎓: I will join the class by 5th period
09/03/23, 10:34 - Sanjuuu 🎓: Ok
09/03/23, 10:34 - Sanjuuu 🎓: We'll be waiting for you
09/03/23, 10:34 - Araviiii 🎓: K
09/03/23, 12:14 - Araviiii 🎓: Guys
09/03/23, 12:14 - Araviiii 🎓: Just now came
09/03/23, 12:15 - Araviiii 🎓: Should I also come and meet sir ?
09/03/23, 19:16 - Shesadriii 🎓: Quiz 1 topics
09/03/23, 19:16 - Shesadriii 🎓: Linux commands,Operating system functions, interrupts, Storage structure/memory heirachy (Section 1.1, 1.2),System architecture, OS operations (Section 1.3, 1.4), System calls, Linkers and Loaders (Section 2.3, 2.5), Monolithic, micro kernal, booting, debugging, hardware protection (memory and I/O) (Section 2.8- Section 2.10),Process concepts , Process states (Section 3.1)
09/03/23, 19:16 - Shesadriii 🎓: date: 10-3-2023
09/03/23, 19:16 - Shesadriii 🎓: time I let u know
09/03/23, 19:16 - Shesadriii 🎓: most probably at first hr.
09/03/23, 19:16 - Shesadriii 🎓: http://stst.elia.pub.ro/news/SO/Modern%20Operating%20System%20-%20Tanenbaum.pdf
09/03/23, 19:29 - Phoool Gobiiii  🎓: <Media omitted>
09/03/23, 19:30 - Sooorrrr 🎓: Wheat parotta channa masala
09/03/23, 19:30 - Viswaa Ramasubramanian: Chilly parota 1
09/03/23, 19:31 - Harecharan CSE E Amrita CBE: Chilli parotta 1
09/03/23, 19:31 - Shesadriii 🎓: Wheat parota (4 only 4me ) and channa
09/03/23, 19:31 - Viswaa Ramasubramanian: Ghee roast 2
09/03/23, 19:31 - Phoool Gobiiii  🎓: That’s it?
09/03/23, 19:31 - Phoool Gobiiii  🎓: Over?
09/03/23, 19:31 - Viswaa Ramasubramanian: Yesss
09/03/23, 19:34 - Shesadriii 🎓: Onion roast
09/03/23, 19:34 - Sooorrrr 🎓: Onion roast
09/03/23, 19:34 - Viswaa Ramasubramanian: You deleted this message
09/03/23, 19:45 - Sanjuuu 🎓: Bois any idea when is a3
09/03/23, 19:49 - Shesadriii 🎓: Nope
09/03/23, 20:14 - Sooorrrr 🎓: https://stories.app.goo.gl/8JcH
09/03/23, 20:14 - Sooorrrr 🎓: Guess we were studying in the wrong campus
11/03/23, 04:11 - Phoool Gobiiii  🎓: Reached home bois
11/03/23, 22:15 - Viswaa Ramasubramanian: <Media omitted>
11/03/23, 22:15 - Viswaa Ramasubramanian: <Media omitted>
11/03/23, 22:43 - Gannu: CBE TO TPJ S10
K GANESH 1 LOWER
VISWAA 3 UPPER
AKHILA 4 LOWER
SANJAY 5 MIDDLE
SHREYAS 6 UPPER
ADWAITA 34 MIDDLE


TPJ TO CBE S12
GANESH 56 SIDE UPPER
VISWAA 67 UPPER
AKHILA 69 MIDDLE
SANJAY 70 UPPER
SHREYAS 72 SIDE UPPER
ADWAITA 32 SIDE UPPER 
HARECHARAN 40 SIDE UPPER
11/03/23, 23:31 - Sooorrrr 🎓: <Media omitted>
11/03/23, 23:31 - Sooorrrr 🎓: <Media omitted>
12/03/23, 09:20 - Gannu: CBE TO TPJ S10
K GANESH 1 LOWER
VISWAA 3 UPPER
AKHILA 4 LOWER
SANJAY 5 MIDDLE
SHREYAS 6 UPPER
ADWAITA 34 MIDDLE
HARSHITA 35 UPPER

TPJ TO CBE S12
GANESH 56 SIDE UPPER
VISWAA 67 UPPER
AKHILA 69 MIDDLE
SANJAY 70 UPPER
SHREYAS 72 SIDE UPPER
ADWAITA 32 SIDE UPPER 
HARECHARAN 40 SIDE UPPER
HARSHITA S7 8 SIDE UPPER
12/03/23, 18:03 - Viswaa Ramasubramanian: <Media omitted>
12/03/23, 18:03 - Viswaa Ramasubramanian: @919566280078
13/03/23, 15:20 - Gannu: <Media omitted>
13/03/23, 15:21 - Sooorrrr 🎓: <Media omitted>
13/03/23, 15:25 - Viswaa Ramasubramanian: #include<stdio . h>
int nain()
int
program wilt create three files") ;
"txtl . txt " 0777) ;
"txt2. txt " 0777) ;
"txt3. txt " 0777) ;
while(l)
13/03/23, 21:02 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=cxMseh8ksBA
14/03/23, 00:12 - Viswaa Ramasubramanian: Question:
Consider a vending machine that accepts only nickels (5 cents) and dimes (10 cents), and dispenses a single piece of candy for 15 cents. The machine accepts any number of coins in any order until the total value reaches 15 cents, at which point it dispenses the candy and resets to accept new coins. Describe the language recognized by this vending machine and provide its grammar.

Language:
The language recognized by this vending machine consists of all possible sequences of nickels and dimes that sum up to exactly 15 cents. For example, {nickel, nickel, nickel, dime}, {dime, dime, dime, dime, dime}, {dime, nickel, nickel, nickel}, etc.

Grammar:
The grammar for this language can be defined as follows:
S -> nickel S | dime S | nickel nickel S | nickel dime S | dime nickel S | epsilon
where S is the start symbol, epsilon denotes the empty string, and each production rule generates a sequence of nickels and/or dimes. The first production rule generates a single nickel, the second generates a single dime, and the remaining production rules generate sequences of two coins (a nickel followed by a nickel, a nickel followed by a dime, or a dime followed by a nickel). The production rule with epsilon allows for the possibility of an empty sequence, which is necessary to account for the fact that the vending machine can start accepting new coins after dispensing the candy.
14/03/23, 00:12 - Viswaa Ramasubramanian: <Media omitted>
14/03/23, 00:12 - Viswaa Ramasubramanian: <Media omitted>
14/03/23, 19:34 - Harecharan CSE E Amrita CBE: Sofy chapatti and pannerr in mess
14/03/23, 21:18 - Harecharan CSE E Amrita CBE: <Media omitted>
14/03/23, 21:33 - Sooorrrr 🎓: <Media omitted>
14/03/23, 23:32 - Sooorrrr 🎓: <Media omitted>
14/03/23, 23:42 - Sooorrrr 🎓: <Media omitted>
15/03/23, 09:00 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 09:18 - Sooorrrr 🎓: <Media omitted>
15/03/23, 12:52 - Sooorrrr 🎓: <Media omitted>
15/03/23, 17:12 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 17:12 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 17:12 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 17:12 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 18:47 - Phoool Gobiiii  🎓: <Media omitted>
15/03/23, 18:49 - Shesadriii 🎓: treatu
15/03/23, 20:07 - Gannu: <Media omitted>
15/03/23, 22:20 - Sooorrrr 🎓: <Media omitted>
16/03/23, 09:41 - Sooorrrr 🎓: <Media omitted>
16/03/23, 13:23 - Araviiii 🎓: <Media omitted>
17/03/23, 21:09 - Phoool Gobiiii  🎓: Reached boarding point bois
17/03/23, 21:58 - Sanjuuu 🎓: Bois
17/03/23, 21:58 - Sanjuuu 🎓: Which platform is my train
17/03/23, 21:59 - Viswaa Ramasubramanian: Cheran ah da??
17/03/23, 21:59 - Sanjuuu 🎓: Cbe Mas express
17/03/23, 21:59 - Sanjuuu 🎓: 11 30
17/03/23, 21:59 - Viswaa Ramasubramanian: 5th mostlyyy
17/03/23, 21:59 - Sanjuuu 🎓: No mostly I want exact
17/03/23, 22:00 - Viswaa Ramasubramanian: 10:50 dhan poduvan machab
17/03/23, 22:00 - Viswaa Ramasubramanian: En train usual ah 5th platform la nikkum Friday due to 11:30 special adhu second platform la nikkum
17/03/23, 22:00 - Viswaa Ramasubramanian: So un train 5th dhannnn
17/03/23, 22:00 - Sanjuuu 🎓: This train is only 5here on fridays
17/03/23, 22:01 - Viswaa Ramasubramanian: Adhan solran urs 5th dhannn enna nambuuu
17/03/23, 22:01 - Sanjuuu 🎓: Not once it has been on platform 5
17/03/23, 22:09 - Viswaa Ramasubramanian: Its always comes at of 5
17/03/23, 22:09 - Viswaa Ramasubramanian: It*
18/03/23, 00:18 - Viswaa Ramasubramanian: Boarded train boissss
18/03/23, 04:44 - Phoool Gobiiii  🎓: Reached home 🏡
18/03/23, 05:00 - Viswaa Ramasubramanian: Reached Trichy 😴
18/03/23, 05:04 - Sanjuuu 🎓: Reached kpd
18/03/23, 05:17 - Sanjuuu 🎓: Reached home bois
18/03/23, 05:18 - Harecharan CSE E Amrita CBE: Why reach early,ig?
18/03/23, 06:03 - Viswaa Ramasubramanian: <Media omitted>
18/03/23, 06:03 - Harecharan CSE E Amrita CBE: Okay
18/03/23, 07:52 - Viswaa Ramasubramanian: Reached home boissss
18/03/23, 08:21 - Sooorrrr 🎓: Reached home boys
18/03/23, 08:27 - Araviiii 🎓: Reached 🏡 bois
18/03/23, 08:35 - Gannu: Reached home 🏡 boiz
19/03/23, 13:30 - Harecharan CSE E Amrita CBE: Send me os ppt
19/03/23, 13:38 - Araviiii 🎓: https://aumscb.amrita.edu/access/content/group/62091/Lab/process%20quick%20overview.pdf
19/03/23, 13:38 - Araviiii 🎓: This message was deleted
19/03/23, 13:38 - Araviiii 🎓: https://aumscb.amrita.edu/access/content/group/62091/Lab/Process%20management%20System%20calls.pdf
19/03/23, 13:38 - Araviiii 🎓: https://aumscb.amrita.edu/access/content/group/62091/Lab/Lab3ShelScripting.pdf
19/03/23, 13:39 - Araviiii 🎓: https://aumscb.amrita.edu/access/content/group/62091/Lab/25%20Common%20Linux%20Bash%20Script%20Examples.pdf
19/03/23, 13:57 - Harecharan CSE E Amrita CBE: G****la send me as pdf da
19/03/23, 13:58 - Araviiii 🎓: lol
19/03/23, 18:38 - Sanjuuu 🎓: Bois
19/03/23, 18:38 - Sanjuuu 🎓: Which train
19/03/23, 18:38 - Sanjuuu 🎓: Are u guys coming on?
19/03/23, 18:42 - Gannu: Cheran
19/03/23, 18:57 - Sanjuuu 🎓: Ugh
19/03/23, 18:57 - Viswaa Ramasubramanian: Nee??
19/03/23, 18:57 - Viswaa Ramasubramanian: Nilgiri ah
19/03/23, 18:58 - Sanjuuu 🎓: Nil
19/03/23, 18:58 - Sanjuuu 🎓: Yea
19/03/23, 18:58 - Viswaa Ramasubramanian: Naa unkuda dhan
19/03/23, 18:58 - Viswaa Ramasubramanian: Jeff irukan nambaloda
19/03/23, 18:58 - Viswaa Ramasubramanian: Un train ku 15 mins munnadi naa reach ayiruvan
19/03/23, 18:58 - Viswaa Ramasubramanian: Will wait for u
19/03/23, 18:58 - Sanjuuu 🎓: Ok
20/03/23, 11:01 - Gannu: https://youtu.be/YMyofREc5Jk
21/03/23, 00:34 - Sooorrrr 🎓: #bubble sort

array = [1,9,6,3,7]
for i in range(1,len(array)):
    for j in range(0,i):
        if array[j]>array[j+1]:
            array[j],array[j+1] = array[j+1],array[j]

print(array)


#insertion sort

array = [1,9,6,3,7]

for i in range(1,len(array)):
    t=array[i]
    j=i-1
    while j>0 and t<array[j]:
        array[j+1]=array[j]
        j=j-1
    array[j+1] = t

print(array)

# selection sort

array= [1,9,6,3,7]

for i in range(0,len(array)):
    min_idx=i
    for j in range(i+1,len(array)):
        if array[j]<array[min_idx]:
            min_idx=j
    array[min_idx],array[i]=array[i],array[min_idx]

print(array)


# mergesort
array = [1,9,6,8,3,2,7]

def mergesort(array):

    if len(array)>1:
        mid=len(array)//2
        L=array[:mid]
        R=array[mid:]
        mergesort(L)
        mergesort(R)
        i=j=k=0
        while i<len(L) and j<len(R):
            if L[i]<R[j]:
                array[k]=L[i]
                i=i+1
            else:
                array[k]=R[j]
                j=j+1
            k=k+1

        while i<len(L):
            array[k]=L[i]
            i=i+1
            k=k+1

        while j<len(R):
            array[k]=R[j]
            j=j+1
            k=k+1

mergesort(array)
print(array)
21/03/23, 00:34 - Sooorrrr 🎓: <Media omitted>
21/03/23, 00:59 - Sooorrrr 🎓: ```class mystack():
    def __init__(self):
        self.arr=[]

    def push(self,a):
        self.arr.append(a)

    def pop(self):
        self.arr.pop()

    def isEmpty(self):
        if(len(self.arr)==0):
            return True
        else:
            return False

    def peek(self):
        if(self.isEmpty()==True):
            print("No elements found")

        else:
            print(self.arr[len(self.arr)-1])

    def display(self):
        print(self.arr)

stack=mystack()
print(stack.isEmpty())
stack.peek()
stack.push(4)
stack.push(3)
stack.display()
stack.peek()
stack.pop()
stack.display()
print(stack.isEmpty())
stack.peek()
```
21/03/23, 01:00 - Sooorrrr 🎓: ```class Node:
    def __init__(self,data=None):
        self.data = data
        self.next= None

class LinkedList:
    def __init__(self):
        self.head= None

    def pushfront(self,value):
        new = Node(value)
        new.next = self.head
        self.head = new

    def pushback(self,value):
        new = Node(value)
        if self.head is None:
            self.head = new
            return
        iter = self.head
        while iter.next is not None:
            iter=iter.next
        iter.next = new

    def insertbeforenode(self,element,value):
        new = Node(value)
        if self.head is None:
            self.head = new
            return
        current = self.head
        while current.next.data!=element:
            current=current.next
        old=current.next.next
        new.next=current.next
        current.next = new

    def delete(self,key):
        if self.head is None:
            print("Nothing found")
            return
        if self.head.data == key:
            self.head =self.head.next
            return
        curr=self.head
        while curr.next is not None:
            if curr.next.data==key:
                curr.next=curr.next.next
                return
            curr=curr.next

    def deleteall(self):
        if self.head is None:
            print("Nothing found")
            return

        self.head = None


    def printll(self):
        if self.head is None:
            print("Nothing found")
        curr=self.head
        while curr is not None:
            print(curr.data)
            curr=curr.next

ll=LinkedList()
ll.pushback(4)
ll.pushback(3)
ll.printll()
ll.pushfront(2)
ll.pushfront(6)
print(" ----------------")
ll.printll()
ll.delete(2)
print(" ----------------")
ll.printll()
ll.insertbeforenode(4,10)
print(" ----------------")
ll.printll()
ll.insertbeforenode(10,12)
print(" ----------------")
ll.printll()
ll.deleteall()
print(" ----------------")
ll.printll()```
21/03/23, 01:00 - Sooorrrr 🎓: ```class Queue():
    def __init__(self):
        self.queues = []

    def push(self,value):
        self.queues.append(value)

    def pop(self):
        self.queues.pop(0)

    def isEmpty(self):
        if(len(self.queues) == 0):
            return True
        else:
            return False

    def peek(self):
        if(self.isEmpty==True):
            print("Empty queue")

        else:
            print(self.queues[0])

    def display(self):
        print(self.queues)

queue = Queue()
print(queue.isEmpty())
queue.push(4)
queue.push(3)
queue.push(8)
queue.peek()
queue.display()
print(queue.isEmpty())
queue.peek()
queue.pop()
queue.peek()
queue.display()```
21/03/23, 08:30 - Sooorrrr 🎓: ```def partition(array,low,high):

    pivot=array[high]

    i=low - 1 
    for j in range(low,high):

        if(array[j]<= pivot):

            i=i+1

            array[i],array[j]=array[j],array[i]

    array[i+1],array[high]=array[high],array[i+1]

    return i+1



def quick_sort(array,low,high):
    if(low < high):
        pi=partition(array,low,high)

        quick_sort(array,low,pi-1)

        quick_sort(array,pi+1,high)

array=[1, 7, 4,  10, 9, -2]

print(array)

quick_sort(array,0,len(array)-1)

print(array)```
21/03/23, 08:53 - Viswaa Ramasubramanian: @918939677049  @919840365293 Seekaram vangaa daa mam vantangooooo
21/03/23, 08:53 - Viswaa Ramasubramanian: attendance start pantangs
21/03/23, 08:53 - Sooorrrr 🎓: No problem
21/03/23, 08:54 - Viswaa Ramasubramanian: <Media omitted>
21/03/23, 08:54 - Viswaa Ramasubramanian: <Media omitted>
21/03/23, 14:37 - Shesadriii 🎓: Sir is there
21/03/23, 14:37 - Shesadriii 🎓: Class is not there
21/03/23, 14:37 - Shesadriii 🎓: Only me and vinayakan
21/03/23, 14:39 - Sooorrrr 🎓: Wait so is he taking attendance or not
21/03/23, 14:39 - Sooorrrr 🎓: Is the class canceled or still there
21/03/23, 14:42 - Shesadriii 🎓: Yep
21/03/23, 14:42 - Shesadriii 🎓: Only E section did not come as I was insisting
21/03/23, 14:42 - Shesadriii 🎓: F was all on point
21/03/23, 14:49 - Araviiii 🎓: Dei I am going to class
21/03/23, 14:49 - Araviiii 🎓: Bunk 3rd class
21/03/23, 14:52 - Sanjuuu 🎓: When is the second period?
21/03/23, 14:52 - Sanjuuu 🎓: In cir?
21/03/23, 14:55 - Sooorrrr 🎓: 3:20
22/03/23, 15:23 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 15:23 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 15:26 - Viswaa Ramasubramanian: energy swaraj website is working well now
22/03/23, 15:26 - Viswaa Ramasubramanian: if u want u guys can try
22/03/23, 15:26 - Viswaa Ramasubramanian: just now certificate vandhichu enaku it took only 30mins..
22/03/23, 16:06 - Shesadriii 🎓: okay...
22/03/23, 18:19 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 18:28 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 18:28 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 18:28 - Phoool Gobiiii  🎓: <Media omitted>
22/03/23, 19:17 - Harecharan CSE E Amrita CBE: Room is 🔒 🔐 🔏 🔒
22/03/23, 19:17 - Harecharan CSE E Amrita CBE: ?
22/03/23, 20:39 - Sooorrrr 🎓: module full_adder(A,B,Cin,S,Cout);

input  A,B,Cin;
output  S,Cout;
always @(A or B or Cin)
begin
assign S=A^B^Cin;
assign Cout=(A&B)|(A^B)&Cin;
end
endmodule

module full_adder_beh(A,B,Cin,S,Cout);
input  A,B,Cin;
output reg S,Cout;
always @(A or B or Cin) begin
    if(A==1'b0 & B==1'b0 & Cin==1'b0)begin
        Cout=1'b0;
        S=1'b0;
        // Cout=1'b0;
    end
    else if(A==1'b0 & B==1'b0 & Cin==1'b1)begin
        S=1'b1;
        Cout=1'b0;
    end
    else if(A==1'b0 & B==1'b1 & Cin==1'b0)begin
        S=1'b1;
        Cout=1'b0;
    end
    else if(A==1'b0 & B==1'b1 & Cin==1'b1)begin
        S=1'b0;
        Cout=1'b1;
    end
    else if(A==1'b1 & B==1'b0 & Cin==1'b0)begin
        S=1'b1;
        Cout=1'b0;
    end

    else if(A==1'b1 & B==1'b0 & Cin==1'b1)begin
        S=1'b0;
        Cout=1'b1;
    end
    else if(A==1'b1 & B==1'b1 & Cin==1'b0)begin
        S=1'b0;
        Cout=1'b1;
    end
    else
    begin
        S=1'b1;
        Cout=1'b1;
    end
end
endmodule
22/03/23, 20:39 - Sooorrrr 🎓: `include "Fulladder.v"
module top;
reg A_input,B_input,C_input;
wire Sum,C_output;
full_adder_beh fa(A_input,B_input,C_input,Sum,C_output);
initial begin
    $monitor("%b and %b and %b : Sum - %b and Carry - %b", A_input, B_input, C_input,Sum,C_output);
    A_input=0;
    B_input=0;
    C_input=0;
    #5;

    A_input=0;
    B_input=0;
    C_input=1;
    #5;

    A_input=0;
    B_input=1;
    C_input=0;
    #5;

    A_input=0;
    B_input=1;
    C_input=1;
    #5;

    A_input=1;
    B_input=0;
    C_input=0;
    #5;

    A_input=1;
    B_input=0;
    C_input=1;
    #5;

    A_input=1;
    B_input=1;
    C_input=0;
    #5;

    A_input=1;
    B_input=1;
    C_input=1;
    #5;

 
end
endmodule
22/03/23, 21:12 - Sooorrrr 🎓: module Encoder(A,Y);
input [3:0] A;
output reg [1:0] Y;
integer N;
always @(A) begin
    for(N=0;N<=3;N++)
    if(A[N]==1)begin
        Y=N;
    end
end
endmodule
22/03/23, 21:13 - Sooorrrr 🎓: `include "encoder.v"
module decoder;
reg [3:0] in;
wire [1:0] out;

Encoder my_enc(in,out);
initial
begin
    $monitor("in = %b", in, "  |  out = %b", out );
    
    in = 1;   #100;
    in = 2;    #100;
    in = 4;   #100;
    in = 8;   #100;     
end

endmodule
22/03/23, 21:36 - Phoool Gobiiii  🎓: module fullAdder_df (a, b, c, s, ca);
input a, b, c;
output s, ca;
assign s = a^b^c;
assign ca = (a&b) || (c&(a^b));
endmodule

module fullAdder_str (a, b, c, s, ca);
input a, b, c;
output s, ca;
wire t1, t2, t3; // wire t1, t2;
xor(s, a, b, c);
and(t1, a, b);
xor(t2, a, b);
and(t3, c, t2); // and(t2, c, t2);
or(ca, t1, t3); // or(ca, t1, t2);
endmodule

module fullAdder_beh (a, b, c, s, ca);
input a, b, c;
output reg s, ca;

always @(a or b or c) begin
    if (a == 1'b0) begin
        if (b == c) begin
            s = 1'b0;
        end
        else
            s = 1'b1;
    end
    else
        if (b==c) begin
            s = 1'b1;
        end
        else
            s = 1'b0;
end

always @(a or b or c) begin
    if (a==1'b0) begin
        if (b==1'b1 & c == 1'b1) begin
            ca = 1'b1;
        end
        else
            ca = 1'b0;
    end
    else
        if (b==1'b0 & c==1'b0) begin
            ca = 1'b0;
        end
        else
            ca = 1'b1;
end
endmodule
22/03/23, 21:43 - Sooorrrr 🎓: <Media omitted>
22/03/23, 21:47 - Sooorrrr 🎓: module mux2(select,d,q);
input[1:0] select;
input[3:0] d;
output q;

assign q = d[select];
endmodule
22/03/23, 21:47 - Sooorrrr 🎓: `include "mux4x1.v"

module Mux4x1tb;

reg[3:0] d;
reg[1:0] select;
wire q;
integer i;
mux2 my_mux(select,d,q);
initial
begin
    #1 $monitor("d = %b", d, "  |  select =  %b", select, "  |  q = ", q );

    for(i=0;i<=15;i=i+1)
    begin
        d=i;
        select=0; #1;
        select=1; #1;
        select=2; #1;
        select=3; #1;
        $display("-----------------------------------------");

    end

end
endmodule
22/03/23, 21:47 - Sooorrrr 🎓: module DECODER (A,Y);
input [2:0] A;
output [7:0] Y;

reg [7:0] Y;
integer N;
always @(A)
begin
for (N=0; N<=7; N=N+1)
if (A==N)
Y[N]=1;
else
Y[N]=0;
end
endmodule
22/03/23, 21:47 - Sooorrrr 🎓: `include "decoder.v"
module deco1_tb;

reg[2:0] in;
wire[7:0] out2;

DECODER decoder( in,out2);

initial
begin

   #1 $monitor("in = %b", in, "  |  out = %b", out2 );
    
	        //Apply Input and wait for 100 ns
        in = 1;     #100;
        in = 3'b001;     #100;
        in = 3'b010;     #100;
        in = 3'b011;     #100;
        in = 3'b100;     #100;
        in = 3'b101;     #100;
        in = 3'b110;     #100;
        in = 3'b111;     #100;
	end
endmodule
23/03/23, 00:37 - Sooorrrr 🎓: ```module Fullsubtractor(A,B,C,Bor,Dif);
input  A,B,C;
output  Bor,Dif;

assign Dif=A^B^C;
assign Bor=((~(A^B))&C)|(~(A)&B);

endmodule```
23/03/23, 00:37 - Sooorrrr 🎓: ````include "FS.v"
module fullsub;
reg A,B,C;
wire Bor,Dif;
Fullsubtractor fs(A,B,C,Bor,Dif);
initial
begin
    $monitor("%b and %b and %b : Borrow - %b and Difference - %b", A, B, C,Bor,Dif);
    A=0;
    B=0;
    C=0;
    #5;

    A=0;
    B=0;
    C=1;
    #5;

    A=0;
    B=1;
    C=0;
    #5;

    A=0;
    B=1;
    C=1;
    #5;

    A=1;
    B=0;
    C=0;
    #5;

    A=1;
    B=0;
    C=1;
    #5;

    A=1;
    B=1;
    C=0;
    #5;

    A=1;
    B=1;
    C=1;
    #5;

end
endmodule```
23/03/23, 01:42 - Viswaa Ramasubramanian: Next week's lab

4 variable function implementation using 
1)8x1 mux
2)4x1 mux
23/03/23, 10:25 - Sooorrrr 🎓: module mux1(I3,I2,I1,I0,S1,S0,Y);
input I3,I2,I1,I0,S1,S0;
wire i1,i2,i3,i4,y1,y2,y3,y4;
output Y;

not(i1,S1);
not(i2,S0);
and(y1,I0,i1,i2);
and(y2,I1,i1,S0);
and(y3,I2,S1,i2);
and(y4,I3,S1,S0);
or(Y,y1,y2,y3,y4);

endmodule
23/03/23, 10:25 - Sooorrrr 🎓: `include "muxstruct.v"
module muxtb;
reg I3,I2,I1,I0,S1,S0;
wire Y;
mux1 m1(I3,I2,I1,I0,S1,S0,Y);
initial
begin
    $monitor("%b%b%b%b || %b%b || %b",I3,I2,I1,I0,S1,S0,Y);
    I3=1;
    I2=0;
    I1=1;
    I0=0;
    S1=0;
    S0=1;
    #10;
end
endmodule
23/03/23, 10:35 - Viswaa Ramasubramanian: ```module mux(A,B,C,D,S1,S2,Y);
input A,B,C,D,S1,S2;
output Y;
wire T1,T2,T3,T4,NS1,NS2;
not(NS1,S1);
not(NS2,S2);
and(T1,A,NS1,NS2);
and(T2,B,NS1,S2);
and(T3,C,S1,NS2);
and(T4,D,S1,S2);
or(Y,T1,T2,T3,T4);
endmodule


module mux_tb;
wire Y;
reg A,B,C,D,S1,S2;
mux mygate(A,B,C,D,S1,S2,Y);
initial begin
$monitor("%b%b%b%b | %b%b | %b",A,B,C,D,S1,S2,Y);
A=0;B=0;C=0;D=0;S1=0;S2=0;#5;
A=0;B=0;C=0;D=0;S1=0;S2=1;#5;
A=0;B=0;C=0;D=0;S1=1;S2=0;#5;
A=0;B=0;C=0;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=0;C=0;D=1;S1=0;S2=0;#5;
A=0;B=0;C=0;D=1;S1=0;S2=1;#5;
A=0;B=0;C=0;D=1;S1=1;S2=0;#5;
A=0;B=0;C=0;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=0;C=1;D=0;S1=0;S2=0;#5;
A=0;B=0;C=1;D=0;S1=0;S2=1;#5;
A=0;B=0;C=1;D=0;S1=1;S2=0;#5;
A=0;B=0;C=1;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=0;C=1;D=1;S1=0;S2=0;#5;
A=0;B=0;C=1;D=1;S1=0;S2=1;#5;
A=0;B=0;C=1;D=1;S1=1;S2=0;#5;
A=0;B=0;C=1;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=1;C=0;D=0;S1=0;S2=0;#5;
A=0;B=1;C=0;D=0;S1=0;S2=1;#5;
A=0;B=1;C=0;D=0;S1=1;S2=0;#5;
A=0;B=1;C=0;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=1;C=0;D=1;S1=0;S2=0;#5;
A=0;B=1;C=0;D=1;S1=0;S2=1;#5;
A=0;B=1;C=0;D=1;S1=1;S2=0;#5;
A=0;B=1;C=0;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=1;C=1;D=0;S1=0;S2=0;#5;
A=0;B=1;C=1;D=0;S1=0;S2=1;#5;
A=0;B=1;C=1;D=0;S1=1;S2=0;#5;
A=0;B=1;C=1;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=0;B=1;C=1;D=1;S1=0;S2=0;#5;
A=0;B=1;C=1;D=1;S1=0;S2=1;#5;
A=0;B=1;C=1;D=1;S1=1;S2=0;#5;
A=0;B=1;C=1;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=0;C=0;D=0;S1=0;S2=0;#5;
A=1;B=0;C=0;D=0;S1=0;S2=1;#5;
A=1;B=0;C=0;D=0;S1=1;S2=0;#5;
A=1;B=0;C=0;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=0;C=0;D=1;S1=0;S2=0;#5;
A=1;B=0;C=0;D=1;S1=0;S2=1;#5;
A=1;B=0;C=0;D=1;S1=1;S2=0;#5;
A=1;B=0;C=0;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=0;C=1;D=0;S1=0;S2=0;#5;
A=1;B=0;C=1;D=0;S1=0;S2=1;#5;
A=1;B=0;C=1;D=0;S1=1;S2=0;#5;
A=1;B=0;C=1;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=0;C=1;D=1;S1=0;S2=0;#5;
A=1;B=0;C=1;D=1;S1=0;S2=1;#5;
A=1;B=0;C=1;D=1;S1=1;S2=0;#5;
A=1;B=0;C=1;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=1;C=0;D=0;S1=0;S2=0;#5;
A=1;B=1;C=0;D=0;S1=0;S2=1;#5;
A=1;B=1;C=0;D=0;S1=1;S2=0;#5;
A=1;B=1;C=0;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=1;C=0;D=1;S1=0;S2=0;#5;
A=1;B=1;C=0;D=1;S1=0;S2=1;#5;
A=1;B=1;C=0;D=1;S1=1;S2=0;#5;
A=1;B=1;C=0;D=1;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=1;C=1;D=0;S1=0;S2=0;#5;
A=1;B=1;C=1;D=0;S1=0;S2=1;#5;
A=1;B=1;C=1;D=0;S1=1;S2=0;#5;
A=1;B=1;C=1;D=0;S1=1;S2=1;#5;
$display("____________________________");
A=1;B=1;C=1;D=1;S1=0;S2=0;#5;
A=1;B=1;C=1;D=1;S1=0;S2=1;#5;
A=1;B=1;C=1;D=1;S1=1;S2=0;#5;
A=1;B=1;C=1;D=1;S1=1;S2=1;#5;

end
endmodule

```
23/03/23, 10:59 - Sooorrrr 🎓: module decoder(I1,I0,Y3,Y2,Y1,Y0);
input I1,I0;
wire y1,y2,y3,y4,i1,i0; 
output Y3,Y2,Y1,Y0;
not(i1,I1);
not(i0,I0);
and(Y3,I1,I0);
and(Y2,I1,i0);
and(Y1,I0,i1);
and(Y0,i1,i0);


endmodule
23/03/23, 10:59 - Sooorrrr 🎓: `include "decoderstruct.v"
module decoderstruct;
reg I1,I0;
wire Y3,Y2,Y1,Y0;
decoder decoder(I1,I0,Y3,Y2,Y1,Y0);
initial
begin
  $monitor("%b%b || %b%b%b%b ",I1,I0,Y3,Y2,Y1,Y0);
   I1=1;
   I0=0;
end

endmodule
23/03/23, 11:01 - Shesadriii 🎓: `include "a1.v"
module muxtb;
reg[3:0] data;
reg [1:0] S ;
wire Y;
mux1 m1(data,S,Y);
integer i;
initial
begin
    $monitor("%b || %b%b || %b",data,S[1],S[0],Y);
    for (i = 0; i < 16 ;i=i+1) begin
        data=i;
        for (integer j = 0; j <4;j=j+1) begin
            S=j;
            #5;
        end
        #5;
        $display("--------------------------------------");
    end 
    
    #10;
end
endmodule
23/03/23, 11:01 - Shesadriii 🎓: module mux1(data,S,Y);
input [1:0]S;
input [3:0] data;
wire y1,y2,y3,y4,i1,i2,i3,i4;
output Y;

not(i1,S[1]);
not(i2,S[0]);
and(y1,data[0],i1,i2);
and(y2,data[1],i1,S[0]);
and(y3,data[2],S[1],i2);
and(y4,data[3],S[1],S[0]);
or(Y,y1,y2,y3,y4);

endmodule
23/03/23, 11:16 - Sooorrrr 🎓: module encoder(I3,I2,I1,I0,Y1,Y0);

input I3,I2,I1,I0;
output Y1,Y0;

or(Y1,I3,I2);
or(Y0,I3,I1);

endmodule
23/03/23, 11:16 - Sooorrrr 🎓: `include "encoderstruct.v"
module enctb;

reg I3,I2,I1,I0;
wire Y1,Y0;

encoder enc(I3,I2,I1,I0,Y1,Y0);
initial
begin
    $monitor("%b%b%b%b || %b%b",I3,I2,I1,I0,Y1,Y0);
    I3=0;
    I2=0;
    I1=0;
    I0=1;
    #10;

    I3=0;
    I2=0;
    I1=1;
    I0=0;
    #10;

    I3=0;
    I2=1;
    I1=0;
    I0=0;
    #10;
    
    I3=1;
    I2=0;
    I1=0;
    I0=0;
    #10;


end

endmodule
23/03/23, 11:21 - Sooorrrr 🎓: module encoder(I,Y);

input[3:0] I;
output[1:0] Y;

or(Y[1],I[3],I[2]);
or(Y[0],I[3],I[1]);

endmodule
23/03/23, 11:21 - Sooorrrr 🎓: `include "encoderstruct.v"
module enctb;

reg[3:0] I;
wire [1:0] Y;
integer  N;
encoder enc(I,Y);
initial
begin
    $monitor("%b || %b",I,Y);
    // I3=0;
    // I2=0;
    // I1=0;
    // I0=1;
    // #10;

    // I3=0;
    // I2=0;
    // I1=1;
    // I0=0;
    // #10;

    // I3=0;
    // I2=1;
    // I1=0;
    // I0=0;
    // #10;
    
    // I3=1;
    // I2=0;
    // I1=0;
    // I0=0;
    // #10;

    I=1;#10;
23/03/23, 11:21 - Sooorrrr 🎓: I=2;#10;
    I=4;#10;
    I=8;#10;



end

endmodule
23/03/23, 11:45 - Sooorrrr 🎓: module fulladder(A,B,Cin,S,Cout);
input A,B,Cin;
wire i1,i2,i3;
output S,Cout;

and(i1,A,B);
xor(i2,A,B);
and(i3,i2,Cin);
xor(S,i2,Cin);
or(Cout,i1,i3);

endmodule
23/03/23, 11:45 - Sooorrrr 🎓: `include "Fulladderstruct.v"
module FA_tb;

reg a,b,cin;
wire S,Cout;

fulladder fa(a,b,cin,S,Cout);
initial
begin
    $monitor("%b%b%b || %b%b",a,b,cin,S,Cout);
    a=0;b=0;cin=0;
    #10; 
    a=0;b=0;cin=1;
    #10;
    a=0;b=1;cin=0;
    #10;
    a=0;b=1;cin=1;
    #10;
    a=1;b=0;cin=0;
    #10;
    a=1;b=0;cin=1; 
    #10;
    a=1;b=1;cin=0;
    #10;
    a=1;b=1;cin=1;
    #10;
end
endmodule
23/03/23, 12:19 - Sooorrrr 🎓: module mux1(I,S,Y);
input[3:0] I;
input[1:0] S;
wire i1,i2,y1,y2,y3,y4;
output Y;

not(i1,S[1]);
not(i2,S[0]);
and(y1,I[0],i1,i2);
and(y2,I[1],i1,S[0]);
and(y3,I[2],S[1],i2);
and(y4,I[3],S[1],S[0]);
or(Y,y1,y2,y3,y4);

endmodule
23/03/23, 12:19 - Sooorrrr 🎓: `include "mux2.0.v"
module mux2_tb;
reg[3:0] I;
reg[1:0] S;
wire Y;
integer  N;
mux1 m1(I,S,Y);
initial
begin
    $monitor("%b|| %b || %b",I,S,Y);
    for(N=0;N<15;N++)
    begin
    I=N;
    S=0;#5;
    S=1;#5;
    S=2;#5;
    S=3;#5;
    end
    
end
endmodule
23/03/23, 13:39 - Araviiii 🎓: guys I think I passes in my arrear xam
23/03/23, 13:39 - Araviiii 🎓: my CGPA is inc.
23/03/23, 13:40 - Araviiii 🎓: passed*
23/03/23, 16:37 - Sanjuuu 🎓: 🥳
23/03/23, 19:44 - Shesadriii 🎓: <Media omitted>
23/03/23, 19:45 - Sooorrrr 🎓: Ghee roast-1
23/03/23, 19:45 - Phoool Gobiiii  🎓: Soya roast - 2 ( ram and Aravindh )
23/03/23, 19:45 - Sooorrrr 🎓: Ok ghee roast-2
23/03/23, 19:45 - Sooorrrr 🎓: For me and aravindh
23/03/23, 19:45 - Sooorrrr 🎓: Sorry ganesh
23/03/23, 19:46 - Shesadriii 🎓: Okay
23/03/23, 19:50 - Viswaa Ramasubramanian: Rasgullaaa boisss
23/03/23, 21:26 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=zn7-fVtT16k
23/03/23, 21:45 - Araviiii 🎓: <Media omitted>
23/03/23, 23:55 - Viswaa Ramasubramanian: def mergesort(A, lb, ub):
    if lb < ub:
        mid = (lb + ub) // 2
        mergesort(A, lb, mid)
        mergesort(A, mid + 1, ub)
        merge(A, lb, mid, ub)

def merge(A, lb, mid, ub):
    B = A[lb:ub+1]
    i = 0
    j = mid - lb + 1
    k = lb
    while i <= mid - lb and j <= ub - lb:
        if B[i] <= B[j]:
            A[k] = B[i]
            i += 1
        else:
            A[k] = B[j]
            j += 1
        k += 1
    while i <= mid - lb:
        A[k] = B[i]
        i += 1
        k += 1
    while j <= ub - lb:
        A[k] = B[j]
        j += 1
        k += 1

A = [15, 5, 24, 8, 1, 3, 16, 10, 20]

mergesort(A, 0, len(A) - 1)
print(A)
24/03/23, 00:17 - Shesadriii 🎓: SELECTION SORT
# The worst-case time complexity of selection sort is O(n^2), which occurs when the input array is in reverse order. In this case, the algorithm has to make n*(n-1)/2 comparisons and n swaps.

# The best-case time complexity of selection sort is also O(n^2), which occurs when the input array is already sorted. Even though the algorithm does not need to swap any elements in this case, it still needs to make n*(n-1)/2 comparisons to ensure that the array is sorted.

# The average-case time complexity of selection sort is also O(n^2), assuming that the input array is randomly ordered. This is because the algorithm makes the same number of comparisons and swaps regardless of the order of the input array.

# It is not a very efficient sorting algorithm and should only be used for small arrays or as a part of other algorithms.
24/03/23, 00:17 - Shesadriii 🎓: BUBBLE SORT

# The worst-case time complexity of bubble sort is O(n^2), which occurs when the input array is in reverse order. In this case, the algorithm needs to swap elements in each pass for n-1 passes.
# The best-case time complexity of bubble sort is O(n), which occurs when the input array is already sorted. In this case, the algorithm needs to make only one pass without swapping any elements.
# The average-case time complexity of bubble sort is also O(n^2), assuming that the input array is randomly ordered. This is because the algorithm needs to swap adjacent elements in each pass, and the number of swaps required depends on the number of inversions in the input array.
# It is not very efficient for large arrays and should only be used for small arrays or as a part of other algorithms.
24/03/23, 00:17 - Shesadriii 🎓: INSERTION SORT
# The worst-case time complexity of insertion sort is O(n^2), which occurs when the input array is in reverse order. In this case, the algorithm needs to compare and swap each element with every element in the sorted part of the array.

# The best-case time complexity of insertion sort is O(n), which occurs when the input array is already sorted. In this case, the algorithm needs to compare each element with only one element in the sorted part of the array.

# The average-case time complexity of insertion sort is O(n^2), assuming that the input array is randomly ordered. This is because the algorithm needs to compare and swap each element with every element in the sorted part of the array, depending on the number of inversions in the input array.
24/03/23, 00:17 - Shesadriii 🎓: QUICK SORT
# Best Case: The best-case time complexity occurs when the pivot element divides the input array into two nearly equal parts. In this case, the algorithm performs efficiently, resulting in a time complexity of O(n log n).
# Average Case: The average-case time complexity for Quick Sort is O(n log n) as well. In this case, the pivot element divides the input array into two halves with almost equal sizes, and the algorithm sorts the two halves recursively.
# Worst Case: The worst-case time complexity of Quick Sort occurs when the pivot element selected is the smallest or the largest element in the input array. In this case, the algorithm divides the input array into two sub-arrays, one of which has all the elements except the pivot, and the other one has only the pivot element.
24/03/23, 00:17 - Shesadriii 🎓: MERGE SORT
# Best Case: The best-case time complexity occurs when the array is already sorted. In this case, Merge Sort still performs its operations, but it does not need to perform the merge operation, resulting in a time complexity of O(n log n).

# Average Case: The average-case time complexity for Merge Sort is also O(n log n), as the algorithm divides the input array into two halves, sorts them recursively, and then merges the two sorted halves.

# Worst Case: The worst-case time complexity of Merge Sort occurs when the array is in reverse order. In this case, the algorithm needs to perform maximum number of comparisons and swaps, resulting in a time complexity of O(n log n).
24/03/23, 00:17 - Shesadriii 🎓: COUNTING SORT

# The best-case scenario for counting sort occurs when all the input integers are the same. In this case, the algorithm simply counts the number of occurrences of the integer and returns the input array as the output, with a time complexity of O(n).

# The worst-case scenario for counting sort occurs when the range of input integers is much larger than the number of elements in the array. In this case, the algorithm must create a count array of size k, where k is much larger than n, and this can lead to a significant amount of memory overhead. The time complexity in this case is O(n+k).

# The average case for counting sort is also O(n+k), assuming that the input integers are uniformly distributed. However, the average case is generally not as important as the worst-case scenario for algorithms like counting sort, where the worst-case performance can occur frequently in practice.
24/03/23, 00:17 - Shesadriii 🎓: RADIX SORT

# Worst case: The worst case for radix sort occurs when all the keys have the same number of digits or bits, and there are a large number of keys. In this case, the time complexity of radix sort is O(kn), where k is the number of digits or bits in the keys and n is the number of keys.

# Average case: The average case for radix sort occurs when the keys have a random distribution of digits or bits, and there are a moderate number of keys. In this case, the time complexity of radix sort is also O(kn), but it can be faster than other comparison-based sorting algorithms because it does not need to compare elements.

# Best case: The best case for radix sort occurs when the keys have a limited number of digits or bits and are already partially sorted. In this case, the time complexity of radix sort can be O(n), which is faster than the worst and average cases.
24/03/23, 00:46 - Viswaa Ramasubramanian: def partition(a,lb,ub):
    pivot = a[lb]
    start = lb
    end =ub

    while(start <= end):
        while(a[start] <= pivot):
            start+=1
        while(a[end] > pivot):
            end-=1
        if(start < end):
            temp = a[start]
            a[start]=a[end]
            a[end]=temp
        else:
            break
    temp = a[lb]
    a[lb]=a[end]
    a[end]=temp
    return end

def quicksort(A,lb,ub):
    if(lb<ub):
        loc = partition(A,lb,ub)
        quicksort(A,lb,loc-1)
        quicksort(A,loc+1,ub)

A = [15, 5, 24, 8, 1, 3, 16, 10, 20,56,76,3,7,199]

quicksort(A, 0, len(A) - 1)
print(A)
24/03/23, 08:12 - Shesadriii 🎓: <Media omitted>
24/03/23, 12:27 - Sanjuuu 🎓: def radix_sort(a):
    max_a=max(a)
    digit=1
    b=[]
    while(max_a//digit>0):
        bucket=[]
        for i in range(10):
            bucket.append([])

        for i in range(len(a)):
            index=(a[i]//digit)%10
            bucket[index].append(a[i])
        print(bucket)

        digit=digit*10
        
        b=[]
        for container in bucket:
            for j in container:
                b.append(j)
        a=b
    print(a)
24/03/23, 12:27 - Sanjuuu 🎓: def radix_sort(a):
    max_a=max(a)
    digit=1
    b=[]
    while(max_a//digit>0):
        bucket=[]
        for i in range(10):
            bucket.append([])

        for i in range(len(a)):
            index=(a[i]//digit)%10
            bucket[index].append(a[i])
        print(bucket)

        digit=digit*10
        
        b=[]
        for container in bucket:
            for j in container:
                b.append(j)
        a=b
    print(a)
24/03/23, 13:10 - Gannu: ```class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        if len(self.items) == 0:
            return True
        else:
            return False

    def printstack(self):
        for i in range(len(self.items)-1,-1,-1):
            print(self.items[i],end=" ")
        print()

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.isEmpty():
            return self.items.pop()
        else:
            return None

    def top(self):
        if not self.isEmpty():
            return self.items[-1]
        else:
            return None

    def size(self):
        return len(self.items)


st = Stack()
st.push(1)
st.push(2)
print(st.top())
st.printstack()
print(st.pop())
print(st.top())

# from PyPrac6 import Stack


class Queue:
    def __init__(self):
        self.queue = []

    def printqueue(self):
        print(self.queue)

    def enqueue(self, item):
        self.queue.append(item)

    def dequeue(self):
        if len(self.queue) < 1:
            return None
        return self.queue.pop(0)

    def size(self):
        return len(self.queue)

    def reverse(self):
        temp = Stack()
        temp2 = self.queue
        while len(temp2) != 0:
            temp.push(temp2.pop(0))
        while not temp.isEmpty():
            temp2.append(temp.pop())
        return temp2

    def reverse2(self):
        temp = Stack()
        temp2 = Queue()
        for item in self.queue:
            temp2.queue.append(item)
        while temp2.size() != 0:
            temp.push(temp2.dequeue())
        while not temp.isEmpty():
            temp2.enqueue(temp.pop())
        temp2.printqueue()
        return temp2

q=Queue()
q.enqueue(1)
q.enqueue(2)
r=q.reverse2()
q.printqueue()
r.printqueue()```
24/03/23, 13:25 - Gannu: Sort Time & Space Complexity.


Vignesh G
Give me the worst case , best case average case time complexity and space complexity of insertion, bubble , selection , merge , counting , radix , quick sort

Sure, here are the worst-case, best-case, and average-case time complexities, as well as the space complexities, for the sorting algorithms you mentioned:

Insertion sort:

Worst-case time complexity: O(n^2)
Best-case time complexity: O(n)
Average-case time complexity: O(n^2)
Space complexity: O(1)
Bubble sort:

Worst-case time complexity: O(n^2)
Best-case time complexity: O(n)
Average-case time complexity: O(n^2)
Space complexity: O(1)
Selection sort:

Worst-case time complexity: O(n^2)
Best-case time complexity: O(n^2)
Average-case time complexity: O(n^2)
Space complexity: O(1)
Merge sort:

Worst-case time complexity: O(n log n)
Best-case time complexity: O(n log n)
Average-case time complexity: O(n log n)
Space complexity: O(n)
Counting sort:

Worst-case time complexity: O(n+k), where k is the range of the input integers
Best-case time complexity: O(n+k), where k is the range of the input integers
Average-case time complexity: O(n+k), where k is the range of the input integers
Space complexity: O(n+k), where k is the range of the input integers
Radix sort:

Worst-case time complexity: O(d(n+k)), where d is the number of digits in the largest number and k is the base of the number system
Best-case time complexity: O(d(n+k)), where d is the number of digits in the largest number and k is the base of the number system
Average-case time complexity: O(d(n+k)), where d is the number of digits in the largest number and k is the base of the number system
Space complexity: O(n+k), where k is the base of the number system
Quick sort:

Worst-case time complexity: O(n^2)
Best-case time complexity: O(n log n)
Average-case time complexity: O(n log n)
Space complexity: O(log n)
24/03/23, 13:35 - Gannu: <Media omitted>
24/03/23, 16:32 - Sooorrrr 🎓: "Vijaya Kumar Sundar - [CSE]" <s_vijayakumar1@cb.amrita.edu>
25/03/23, 00:38 - Viswaa Ramasubramanian: Boarded trail
25/03/23, 00:38 - Viswaa Ramasubramanian: Train kelambirichu
25/03/23, 06:15 - Araviiii 🎓: Reached?
25/03/23, 07:36 - Gannu: Yesss reached
25/03/23, 08:13 - Araviiii 🎓: Gud gud
25/03/23, 08:13 - Araviiii 🎓: Send photos of nitt here
25/03/23, 08:14 - Araviiii 🎓: The photos*
25/03/23, 08:21 - Sanjuuu 🎓: 👀
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:29 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:33 - Sooorrrr 🎓: This message was deleted
25/03/23, 08:33 - Sooorrrr 🎓: How was the journey
25/03/23, 08:36 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 08:38 - Shesadriii 🎓: 😆😆only ac is enough to survive...... ready to trade my cot to an ac here
25/03/23, 09:02 - Harecharan CSE E Amrita CBE: Ac  iruku nu sonna vela seiyum nu sonna aana kaathu varumnu sonaana
25/03/23, 09:03 - Shesadriii 🎓: 😂😂😂
25/03/23, 09:06 - Viswaa Ramasubramanian: Classroom bangam nar
25/03/23, 21:18 - Viswaa Ramasubramanian: Amrita hostel ki jaiiiii
Amrita hostel masssss
Amrita naaa gethuuuuu
Amrita hostel is kovillll
❤‍🔥❤‍🔥❤‍🔥❤‍🔥❤‍🔥❤‍🔥❤‍🔥
25/03/23, 21:19 - Araviiii 🎓: 😆
25/03/23, 21:19 - Viswaa Ramasubramanian: Evanachu amrita hostel pathi tappah pesuna avan saavu en kailaa
25/03/23, 21:19 - Sooorrrr 🎓: What happened?
25/03/23, 21:19 - Shesadriii 🎓: Enna boss......
25/03/23, 21:19 - Sooorrrr 🎓: Enna aachu boss
25/03/23, 21:19 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:19 - Shesadriii 🎓: But u have ac
25/03/23, 21:19 - Viswaa Ramasubramanian: Morning video
25/03/23, 21:20 - Viswaa Ramasubramanian: Ac is there but not working
25/03/23, 21:20 - Viswaa Ramasubramanian: Shows E5
25/03/23, 21:20 - Sooorrrr 🎓: Send some other video
25/03/23, 21:20 - Sooorrrr 🎓: Already saw it in the morning
25/03/23, 21:20 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:21 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:21 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:21 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:21 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:22 - Viswaa Ramasubramanian: Classrooms are nice same as amrita
25/03/23, 21:22 - Viswaa Ramasubramanian: But hostelll kupppahhhh
25/03/23, 21:22 - Sooorrrr 🎓: Is it hot over there
25/03/23, 21:23 - Sooorrrr 🎓: You said it was 🌧there
25/03/23, 21:32 - Harecharan CSE E Amrita CBE: Rain heh... wish it was raining
25/03/23, 21:32 - Harecharan CSE E Amrita CBE: Adikara veyil la naaga ellam roasted human meat aagitom
25/03/23, 21:33 - Sooorrrr 🎓: How many members in a room?
25/03/23, 21:34 - Viswaa Ramasubramanian: 19 beds are there
25/03/23, 21:34 - Harecharan CSE E Amrita CBE: No no no
25/03/23, 21:34 - Shesadriii 🎓: 19 AH
25/03/23, 21:34 - Viswaa Ramasubramanian: We are 9 here
25/03/23, 21:34 - Viswaa Ramasubramanian: 4 extra
25/03/23, 21:34 - Harecharan CSE E Amrita CBE: How many rooms for everyone is the question u must ask
25/03/23, 21:34 - Viswaa Ramasubramanian: So 13 are there
25/03/23, 21:34 - Shesadriii 🎓: 😂
25/03/23, 21:34 - Harecharan CSE E Amrita CBE: And the answer is 1
25/03/23, 21:34 - Phoool Gobiiii  🎓: Worst da
25/03/23, 21:34 - Phoool Gobiiii  🎓: Worst
25/03/23, 21:34 - Viswaa Ramasubramanian: They provide u a recreation room
25/03/23, 21:35 - Viswaa Ramasubramanian: With these many ppl to share
25/03/23, 21:35 - Phoool Gobiiii  🎓: We came into the room and it’s like a oven burning
25/03/23, 21:35 - Sooorrrr 🎓: Photo please
25/03/23, 21:35 - Harecharan CSE E Amrita CBE: <Media omitted>
25/03/23, 21:35 - Sooorrrr 🎓: Well probably you can pour some water on the bed before sleeping
25/03/23, 21:35 - Phoool Gobiiii  🎓: We’ll prolly sleep on the benches outside 😐
25/03/23, 21:35 - Sooorrrr 🎓: Else you guys will be toast by morning
25/03/23, 21:35 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:35 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:36 - Shesadriii 🎓: <Media omitted>
25/03/23, 21:36 - Sooorrrr 🎓: Take care guys
25/03/23, 21:36 - Shesadriii 🎓: Just 1 night boiz
25/03/23, 21:36 - Viswaa Ramasubramanian: Outside room semma chill nu iurku
25/03/23, 21:36 - Harecharan CSE E Amrita CBE: <Media omitted>
25/03/23, 21:36 - Phoool Gobiiii  🎓: <Media omitted>
25/03/23, 21:36 - Viswaa Ramasubramanian: Climate is actually nice outside roon
25/03/23, 21:36 - Phoool Gobiiii  🎓: Don’t get me started on the washroom situation
25/03/23, 21:37 - Sooorrrr 🎓: Try to make sure you don't get head aches. Make sure you keep yourself  hydrated
25/03/23, 21:37 - Viswaa Ramasubramanian: Pesama bed thooki velila potralam pola iruku
25/03/23, 21:37 - Sooorrrr 🎓: Ahhhh
25/03/23, 21:37 - Shesadriii 🎓: 1 more night guys.....tomorrow you guys will be here
25/03/23, 21:37 - Viswaa Ramasubramanian: Also don't ask us for photo of it
25/03/23, 21:37 - Viswaa Ramasubramanian: Adhanala dhan manage panrom
25/03/23, 21:38 - Viswaa Ramasubramanian: Amrita na summa illa da adhu illana vera hostel illadha
25/03/23, 21:38 - Viswaa Ramasubramanian: Idhu dhan situation song
25/03/23, 21:38 - Shesadriii 🎓: 😂
25/03/23, 21:38 - Harecharan CSE E Amrita CBE: <Media omitted>
25/03/23, 21:40 - Viswaa Ramasubramanian: Dei sethiru da 
Unmaiya sollu amrita naa kovil ah illa ya
25/03/23, 21:41 - Harecharan CSE E Amrita CBE: Athukunu paatu elutha solli yaarum kekala
25/03/23, 21:41 - Harecharan CSE E Amrita CBE: Also I thought that was shreyas 😆 🤣 😂 😹
25/03/23, 21:42 - Shesadriii 🎓: This message was deleted
25/03/23, 21:43 - Shesadriii 🎓: <Media omitted>
25/03/23, 21:46 - Harecharan CSE E Amrita CBE: Sticker war varayaa
25/03/23, 21:46 - Harecharan CSE E Amrita CBE: <Media omitted>
25/03/23, 21:46 - Shesadriii 🎓: <Media omitted>
25/03/23, 21:47 - Shesadriii 🎓: <Media omitted>
25/03/23, 21:49 - Harecharan CSE E Amrita CBE: <Media omitted>
25/03/23, 21:49 - Viswaa Ramasubramanian: <Media omitted>
25/03/23, 21:50 - Viswaa Ramasubramanian: Avan avan inga endha toilet neat ah iruku nu theditu irukan
25/03/23, 21:50 - Viswaa Ramasubramanian: Ungaluku sticker war kekudha
25/03/23, 21:50 - Harecharan CSE E Amrita CBE: Nee appa atha theduda
25/03/23, 21:50 - Harecharan CSE E Amrita CBE: Enakum useful aanirukum
25/03/23, 21:50 - Viswaa Ramasubramanian: Elavu innoru side toilet um mosama iruku
25/03/23, 21:51 - Viswaa Ramasubramanian: Adhuvum teriyama western open panna dhan karumam daaaaaa chaiiiii explain panna mudila
25/03/23, 21:51 - Viswaa Ramasubramanian: corporation kakkus is better than this
25/03/23, 21:52 - Shesadriii 🎓: NIT - government
corporation - government
25/03/23, 21:52 - Shesadriii 🎓: <Media omitted>
25/03/23, 21:52 - Shesadriii 🎓: sar enge
25/03/23, 21:52 - Harecharan CSE E Amrita CBE: Govt =govt 
Therefore nit kakuus==korporation kakuus
25/03/23, 21:58 - Viswaa Ramasubramanian: No ur wrong neenga wrong
Corporation kakkus >>>>>> Nit toilets
26/03/23, 19:37 - Araviiii 🎓: <Media omitted>
26/03/23, 19:37 - Araviiii 🎓: Mainly for u guys
27/03/23, 09:46 - Sooorrrr 🎓: <Media omitted>
27/03/23, 14:40 - Araviiii 🎓: hey 
wat is the command for the c file to execute
27/03/23, 14:40 - Araviiii 🎓: it starts with gcc and then wat?
27/03/23, 15:09 - Gannu: gcc -o fk filename
27/03/23, 15:09 - Gannu: then ./fk
27/03/23, 15:10 - Araviiii 🎓: kk
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 18:07 - Sooorrrr 🎓: <Media omitted>
27/03/23, 19:33 - Sooorrrr 🎓: <Media omitted>
27/03/23, 19:34 - Viswaa Ramasubramanian: 3 pc chappati 
Veg kurma
27/03/23, 19:35 - Sooorrrr 🎓: The rest give your orders
27/03/23, 19:36 - Harecharan CSE E Amrita CBE: 1 set of nothing
28/03/23, 14:46 - Viswaa Ramasubramanian: No attenddnce
28/03/23, 14:46 - Viswaa Ramasubramanian: Soltaru
28/03/23, 22:59 - Gannu: <Media omitted>
29/03/23, 09:25 - Gannu: <Media omitted>
29/03/23, 09:25 - Gannu: <Media omitted>
29/03/23, 12:39 - Sooorrrr 🎓: <Media omitted>
29/03/23, 17:36 - Harecharan CSE E Amrita CBE: https://www.cuemath.com/data/bayes-theorem/
29/03/23, 17:36 - Harecharan CSE E Amrita CBE: https://www.toppr.com/ask/question/a-man-is-known-to-speak-the-truth-3-out-of-4-times-he-throws-3/
29/03/23, 18:01 - Gannu: https://amritavishwavidyapeetham-my.sharepoint.com/:f:/g/personal/cb_en_u4cse21370_cb_students_amrita_edu/ElDeijHNuyZFmdd4jx6_IBgBQcTdXiQ4J1LxolEioZ10Hw?e=anCavR
29/03/23, 18:03 - Gannu: <Media omitted>
29/03/23, 18:03 - Gannu: <Media omitted>
29/03/23, 18:03 - Gannu: <Media omitted>
29/03/23, 18:04 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:04 - Sooorrrr 🎓: The correct answer is 0.0455
29/03/23, 18:04 - Sooorrrr 🎓: I dispute that
29/03/23, 18:04 - Sooorrrr 🎓: I guess answer should be option c
29/03/23, 18:06 - Sooorrrr 🎓: Try this question out
29/03/23, 18:38 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:38 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:38 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:38 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:38 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:39 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:39 - Sooorrrr 🎓: Try out these questions as well
29/03/23, 18:54 - Sooorrrr 🎓: <Media omitted>
29/03/23, 18:54 - Sooorrrr 🎓: <Media omitted>
29/03/23, 19:42 - Gannu: <Media omitted>
29/03/23, 19:42 - Sanjuuu 🎓: Where???
29/03/23, 19:42 - Sooorrrr 🎓: Chappati channa
29/03/23, 19:42 - Sanjuuu 🎓: Mba???
29/03/23, 19:43 - Sooorrrr 🎓: Yes
29/03/23, 19:43 - Shesadriii 🎓: Yep
29/03/23, 19:43 - Shesadriii 🎓: 3 parotta chenna
29/03/23, 19:43 - Sanjuuu 🎓: How did u guys reach that fast
29/03/23, 19:43 - Sanjuuu 🎓: 👀
29/03/23, 19:43 - Sooorrrr 🎓: Gans
29/03/23, 19:43 - Sooorrrr 🎓: He went in cycle
29/03/23, 19:43 - Shesadriii 🎓: <Media omitted>
29/03/23, 19:45 - Viswaa Ramasubramanian: 6 pc parota
2 pc chapati
3 channa
1 masal roast
29/03/23, 19:45 - Viswaa Ramasubramanian: 1 soodu
2 sorana
4 vekkam 
10 manam
29/03/23, 19:46 - Gannu: Okay done
29/03/23, 19:46 - Shesadriii 🎓: This message was deleted
29/03/23, 19:46 - Viswaa Ramasubramanian: Aprama free ah konjam moolaya aravind tah idea kethu sutri
29/03/23, 20:54 - Sanjuuu 🎓: <Media omitted>
29/03/23, 22:01 - Araviiii 🎓: Aravindh*
29/03/23, 22:02 - Harecharan CSE E Amrita CBE: It has been determined that 5% of drivers checked at a road stop show traces of alcohol and 10% of drivers checked do not wear seat belts. In addition, it has been observed that the two infractions are independent from one another. If an officer stops five drivers at random:

1. Calculate the probability that exactly three of the drivers have committed any one of the two offenses.

2. Calculate the probability that at least one of the drivers checked has committed at least one of the two offenses.
29/03/23, 22:03 - Harecharan CSE E Amrita CBE: https://www.superprof.co.uk/resources/academic/maths/probability/binomial/binomial-distribution-word-problems.html
30/03/23, 00:48 - Gannu: <Media omitted>
30/03/23, 00:48 - Gannu: <Media omitted>
30/03/23, 00:48 - Gannu: <Media omitted>
30/03/23, 00:48 - Gannu: <Media omitted>
30/03/23, 00:48 - Gannu: <Media omitted>
30/03/23, 07:43 - Harecharan CSE E Amrita CBE: <Media omitted>
30/03/23, 08:29 - Gannu: <Media omitted>
31/03/23, 08:25 - Shesadriii 🎓: <Media omitted>
31/03/23, 08:26 - Araviiii 🎓: Badam milk- 1 (abi)
Ghee roast 1
Butter Milk 1
Coffee 1 (ram)
31/03/23, 08:26 - Araviiii 🎓: For now da
31/03/23, 08:29 - Phoool Gobiiii  🎓: Egg plain roast 1
31/03/23, 14:32 - Sooorrrr 🎓: <Media omitted>
31/03/23, 14:32 - Shesadriii 🎓: Telgu people ku sangu
31/03/23, 14:34 - Viswaa Ramasubramanian: Avanga ticket podranga da
31/03/23, 14:34 - Viswaa Ramasubramanian: Manju la poran
31/03/23, 16:54 - Viswaa Ramasubramanian: <Media omitted>
31/03/23, 17:10 - Viswaa Ramasubramanian: <Media omitted>
31/03/23, 19:30 - Sooorrrr 🎓: <Media omitted>
31/03/23, 19:31 - Araviiii 🎓: Ghee roast 1
Cassata 1
31/03/23, 19:32 - Sooorrrr 🎓: Where are you guys?
31/03/23, 23:04 - Sooorrrr 🎓: # MAHABHARATA

NAMES:

Vaisampayana recited King Janamejaya(grandson of Abhimanyu)

Later Lomaharsana’s son Ugrasravas in Naimisa forest and classified them into 18 parvas.

Bharat was born to King dusyanta and Shakuntala devi

18 parvas:

i)Adiparva

ii)Sabhaparva

iii)Aranyaparva

iv)Virataparva

v)Udyoga parva

vi)Bhisma parva

vii)Drona parva

viii)Karna parva

ix)Salya parva

x)Souptika parva

xi)Stree parva

xii)Shanti parva

xiii)Anusasana parva

xiv)Asvemedhika parva

xv)Asramavasika parva

xvi)Mausala parva

xvii)Mahaprasthanika parva

xviii)Swargaarohana parva

Vyasa(Krisnadwaipaya Vyasa)

Devavrata-Bhisma(son of ganga and shantanu)

Satyavati- Citrangada and Vicitravirya

Citrangada dies in a battle with gandharva

Kasi princesses- Amba,Ambika, Ambalika

Vicitravirya wives- Ambika and Ambalika

Amba vows to kill Bhisma in her next birth and dies

Vicitravirya children- Pandu and Dhirtarastra

Parisrami - Vidura

Pandu - Kunti and Madri

Dhirtarastra - Gandhari(King Subalu’s daughter)

Pandu - 5 pandavas(Yudhistra(Yama Dharma),Bheema(Vayu deva),Arjuna(Indra),Nakula and Sahadeva(Aswini))

Dhirtarastra - 100 kauravas + 1 girl

Drona(Maharashi Bharadwaja)

Drupada(Drona’s childhood friend and later turns enemy)- Draupadi and Dristadyumna

 Adiparva:

This spans from the starting of mahabharata till the rajasuya yajna performed by the pandavas

Sabha parva:

Starts from the rajasuya yajna to the end of the dice game i.e., till the time pandavas start to leave for the forest

Aranya parva:

Starts from the years of the pandavas in the forest to the end of 12th year.

Virata parva:

Describes the difficulties of the anjyana vasa/ 13th year which was spent in virata’s kingdom

Udyoga parva:

Talks about the diplomatic mission performed by Lord Krishna to stop the war.Also the capture of Krishna and the show of viswaroopa form.

Then the next 5 parvas talks about each of the characters and their greatness . How they participated in the wrong side of the war and their death.

Stri parva:

Talks about the difficulties of women,children faced after the death of their husbands in the great war.Talks about the laments of gandhari and anger of yudhistra.

Shanti parva:

Yudhistra feels bad for the people who he killed.Bhisma tells him what is right and wrong and gives him divine knowledge.

Anushasana parva:

Talks about the period after war when Bhisma imparts knowledge to Yudhistra on what is right and what is wrong.Whatever bhisma tells is recounted .

Asvamedhika parva:
Talks about the ashvameda yajna  performed by pandavas and also the birth of parikshit

Ashramavasika parva:

king dhirtarastra , gandhari and vidura retire to the forest

Mausala parva:

Destruction of the yadava race 

Mahaprasthanika parva:

Great journey .Going to heaven

SvargaArohona:

Concluding parva is the concluding parva.

Chapter 3

Regional versions of mahabharata:

i)Malayalam - Mahabharatam by Thunchanth Ezhuthachan,Cherusseri Bharatam by Cherusseri,Bharatmala by Niranth Sankara Panicker

ii)Tamil - Mahabharata by Peruntevanar and Villibharatam by Villiputhran

iii)Odia- Mahabharatam by Sarala Das

iv)Bengali - Mahabharata by Kabi Sanjay

v)Hindi - Mahabharata by Sabal Singh Chauhan

vi)Assamese - Mahabharata by Rama Saraswati

Three of the Panchamahakavyas(5 great poems)
01/04/23, 08:24 - Harecharan CSE E Amrita CBE: https://www.pinterest.com/pin/337558934549050557/
01/04/23, 08:24 - Harecharan CSE E Amrita CBE: <Media omitted>
01/04/23, 08:40 - Sooorrrr 🎓: # MAHABHARATA

NAMES:

Vaisampayana recited King Janamejaya(grandson of Abhimanyu)

Later Lomaharsana’s son Ugrasravas in Naimisa forest and classified them into 18 parvas.

Sakuntala and King Dusyanta have a son Bharat

Bharat was born to King dusyanta and Shakuntala devi

**18 parvas:**

i)Adiparva

ii)Sabhaparva

iii)Aranyaparva

iv)Virataparva

v)Udyoga parva

vi)Bhisma parva

vii)Drona parva

viii)Karna parva

ix)Salya parva

x)Souptika parva

xi)Stree parva

xii)Shanti parva

xiii)Anusasana parva

xiv)Asvemedhika parva

xv)Asramavasika parva

xvi)Mausala parva

xvii)Mahaprasthanika parva

xviii)Swargaarohana parva

Vyasa(Krisnadwaipaya Vyasa)

Devavrata-Bhisma(son of ganga and shantanu)

Satyavati- Citrangada and Vicitravirya

Citrangada dies in a battle with gandharva

Kasi princesses- Amba,Ambika, Ambalika

Vicitravirya wives- Ambika and Ambalika

Amba vows to kill Bhisma in her next birth and dies

Vicitravirya children- Pandu and Dhirtarastra

Parisrami - Vidura

Pandu - Kunti and Madri

Dhirtarastra - Gandhari(King Subalu’s daughter)

Pandu - 5 pandavas(Yudhistra(Yama Dharma),Bheema(Vayu deva),Arjuna(Indra),Nakula and Sahadeva(Aswini))

Dhirtarastra - 100 kauravas + 1 girl

Drona(Maharashi Bharadwaja)

Drupada(Drona’s childhood friend and later turns enemy)- Draupadi and Dristadyumna

 Adiparva:

This spans from the starting of mahabharata till the rajasuya yajna performed by the pandavas

Sabha parva:

Starts from the rajasuya yajna to the end of the dice game i.e., till the time pandavas start to leave for the forest

Aranya parva:

Starts from the years of the pandavas in the forest to the end of 12th year.

Virata parva:

Describes the difficulties of the anjyana vasa/ 13th year which was spent in virata’s kingdom

Udyoga parva:

Talks about the diplomatic mission performed by Lord Krishna to stop the war.Also the capture of Krishna and the show of viswaroopa form.

Then the next 5 parvas talks about each of the characters and their greatness . How they participated in the wrong side of the war and their death.

Stri parva:

Talks about the difficulties of women,children faced after the death of their husbands in the great war.Talks about the laments of gandhari and anger of yudhistra.

Shanti parva:

Yudhistra feels bad for the people who he killed.Bhisma tells him what is right and wrong and gives him divine knowledge.

Anushasana parva:

Talks about the period after war when Bhisma imparts knowledge to Yudhistra on what is right and what is wrong.Whatever bhisma tells is recounted .

Asvamedhika parva:
Talks about the ashvameda yajna  performed by pandavas and also the birth of parikshit

Ashramavasika parva:

king dhirtarastra , gandhari and vidura retire to the forest

Mausala parva:

Destruction of the yadava race 

Mahaprasthanika parva:

Great journey .Going to heaven

SvargaArohona:

Concluding parva is the concluding parva.

Chapter 3

Regional versions of mahabharata:

i)Malayalam - Mahabharatam by Thunchanth Ezhuthachan,Cherusseri Bharatam by Cherusseri,Bharatmala by Niranth Sankara Panicker

ii)Tamil - Mahabharata by Peruntevanar and Villibharatam by Villiputhran

iii)Odia- Mahabharatam by Sarala Das

iv)Bengali - Mahabharata by Kabi Sanjay

v)Hindi - Mahabharata by Sabal Singh Chauhan

vi)Assamese - Mahabharata by Rama Saraswati

Three of the Panchamahakavyas(5 great poems) of samskratam are rooted in Mahabharata.

**Festivals associated with Mahabharata:**

Karaga festival - Celebrated in Karnataka annually in the month of chitra(April/May) for Draupadi , Tigalas consider themselves as descendants of Draupadi.

Koovagam - Arjuna’s son Iravan . His last wish of marrying before his death.Celebrated in Tamil Nadu in Sri Koothandavar Temple in Villupuram.

Dhungri Mela - Celebrated on the birthday of Hidimba Devi. It is commemorated at the Hidamba Devi Temple at Manali in Himachal Pradesh.

Bhisma Ekdasi is celebrated by people in the month of Jan/Feb in honour of Bhisma.

Chhath Puja - Celebrated in Bihar and performed by Draupadi.

**Temples of Mahabharata:**

Temple or Devalaya- abode of diety or a Deva

Pancha Pandava temples in Kerala are five temples in Chengannur area:

Thirichittatt Mahavishnu temple - Yudhistra

Thripuliyur Mahavishnu temple - Bhima

Aranmula Parthasarthy - Arjuna

Thiruvanvandoor Mahavishnu temple - Nakula

Thrikodithanam Mahavishnu temple - Sahadeva

Pancali Amman - Pallakad Kerala

Draupadi Amman - Velachery TN

Gandhari Amman - Kollam Kerala

Duryodhana temple - Kollam Kerala

Karna temple - Uttarakhand

Bhisma temple - Harayana

Hidimba Devi - Manali , Himachal Pradesh

**Ancient Indian Painting:**

Kalamkari production - Srikalahasti,Chitoor district and Machilipatnam,Krisna district

**Various Art Forms:**

Pandav Lila - Uttarakhand

Therukoothu - Tamil Nadu(Villuputhran version of Mahabharata)

Yakshagana - Karnataka

Kathakali - Kerala

Koodiyatam - Kerala

Chakyar Koothu 

Bhaona - Assam

Chhau dance-Bihar,Odisha,Bengal

**Anthropological Information:**

Mahabharata lists 363 Jatis or Janas

Janas in the North: Trigartas,Khasas

Janas in the South:Cholas,Pandyas,Dravidas,Keralas,Andhras

Janas in the West:Yadavas,Surashtras,Vahilkas

Janas in the NorthWest:kambojas,Sakas,Yavanas

Janas in the East:Angas,Kiratas,vangas,Chinas,Pundras

Ghatotkacha - Kachari Kingdom

**Architecture:**

Hoyesaleswara temple,Karnataka

Arjuna’s Penance in Mahabalipuram 

Intricate sculpture of the Pandavas and Draupadi in Deogarh,Rajasthan

Kailasa Temple in Ellora,Amriteswara temple in Karnataka,Mallikarjuna temple in Pattadakal,Amba Teertha in Karnataka,Narasimha temple in Mysore,Keshav Temple in Sominathpur

Amma chose the scene of Arjuna in a chariot with Krishna as the charioteer in charging mode.
01/04/23, 13:56 - Harecharan CSE E Amrita CBE: <Media omitted>
01/04/23, 13:57 - Viswaa Ramasubramanian: <Media omitted>
01/04/23, 13:57 - Shesadriii 🎓: <Media omitted>
01/04/23, 13:59 - Viswaa Ramasubramanian: <Media omitted>
01/04/23, 14:21 - Sanjuuu 🎓: <Media omitted>
01/04/23, 14:21 - Sanjuuu 🎓: Bruh
01/04/23, 14:21 - Sanjuuu 🎓: Idhuka 1000rs?
01/04/23, 14:21 - Phoool Gobiiii  🎓: 1 samosa 1 buttermilk
01/04/23, 14:21 - Araviiii 🎓: 2 cutlet
01/04/23, 14:22 - Shesadriii 🎓: 1 cutlet 1 buttermilk
01/04/23, 14:22 - Gannu: 2 masala vada
01/04/23, 14:23 - Harecharan CSE E Amrita CBE: Enakum 1 lime juice
01/04/23, 14:59 - Sooorrrr 🎓: We've gotten on the train
01/04/23, 14:59 - Sooorrrr 🎓: Will start in 5 minutes
01/04/23, 16:17 - Araviiii 🎓: Seriseri
01/04/23, 16:17 - Araviiii 🎓: Safe journey
01/04/23, 16:31 - Sooorrrr 🎓: Thanks bro
01/04/23, 20:23 - Araviiii 🎓: Reached?
01/04/23, 20:23 - Araviiii 🎓: Mgr station
01/04/23, 20:23 - Araviiii 🎓: ?
01/04/23, 20:24 - Gannu: Nope we will reach by 9:30
01/04/23, 20:24 - Araviiii 🎓: Oh okie
01/04/23, 23:22 - Sooorrrr 🎓: Reached 🏠
01/04/23, 23:23 - Araviiii 🎓: Gud
01/04/23, 23:30 - Gannu: Reached home safely
02/04/23, 13:10 - Shesadriii 🎓: <Media omitted>
02/04/23, 13:10 - Harecharan CSE E Amrita CBE: tf?
02/04/23, 13:11 - Shesadriii 🎓: Yup
02/04/23, 13:11 - Shesadriii 🎓: Avoid UPI transactions above 2k
02/04/23, 13:11 - Harecharan CSE E Amrita CBE: kashkomarimashta
02/04/23, 13:11 - Harecharan CSE E Amrita CBE: means I understood
02/04/23, 18:05 - Sooorrrr 🎓: https://www.livemint.com/news/india/upi-payments-to-now-cost-more-who-will-pay-and-what-are-the-charges-explained-11680162141068.html
02/04/23, 18:05 - Sooorrrr 🎓: Charge is not on you it is on the merchant
02/04/23, 18:06 - Sooorrrr 🎓: Bank to bank transfer will still remain free
02/04/23, 18:06 - Shesadriii 🎓: So ig not many merchants will prefer UPI anymore
02/04/23, 18:06 - Sooorrrr 🎓: Also it is foolish to not pay for a service we use in my opinion
02/04/23, 18:07 - Viswaa Ramasubramanian: Ogeyy nice
02/04/23, 18:07 - Viswaa Ramasubramanian: Duru duru
02/04/23, 18:07 - Sooorrrr 🎓: Will upi has become large enough for merchants to provide
02/04/23, 18:07 - Sooorrrr 🎓: Not to provide*
02/04/23, 18:07 - Sooorrrr 🎓: If they avoid it they will loose more customers
02/04/23, 18:08 - Viswaa Ramasubramanian: Also in most of the shops they use personal gpay acc
02/04/23, 18:08 - Viswaa Ramasubramanian: They don't register a business account
02/04/23, 18:09 - Viswaa Ramasubramanian: But ya it can lead to tax issues tho
02/04/23, 18:09 - Sooorrrr 🎓: The government might want to reverse that trend
02/04/23, 18:09 - Viswaa Ramasubramanian: Ya maybe
02/04/23, 18:09 - Sooorrrr 🎓: Also this applies for small time not large businesses
02/04/23, 18:10 - Viswaa Ramasubramanian: Now it's like even a roadside flower shop has gpay
02/04/23, 18:10 - Viswaa Ramasubramanian: If u remember namba trichy ponapa anga normal cocanut shop la gpay irundhichu
02/04/23, 18:10 - Shesadriii 🎓: That is why they have got the guts to implement this
02/04/23, 18:10 - Viswaa Ramasubramanian: Yes
02/04/23, 18:11 - Sooorrrr 🎓: In my opinion this move will not really impact upi
02/04/23, 18:11 - Sooorrrr 🎓: Although they could have avoided it
02/04/23, 18:12 - Sooorrrr 🎓: They are probably doing it to earn more profits
02/04/23, 18:12 - Viswaa Ramasubramanian: Correct dhan nee solradhu
But idhuku net banking eh use panlamla nu sonna adhoda idhu konjam quick ah vum iruku also card system ah easy ah thooki saptrichu idhu
02/04/23, 18:14 - Viswaa Ramasubramanian: Ya so ippah usage of upi romba eririchu also it made transactions more simple 
Makkal idha romba virumba arambistanga so idhu nala onnum upi usage affect agum nu solla mudiyadhu
02/04/23, 18:14 - Sooorrrr 🎓: Yep
03/04/23, 11:53 - Phoool Gobiiii  🎓: <Media omitted>
03/04/23, 12:17 - Shesadriii 🎓: Ow woah
03/04/23, 12:17 - Shesadriii 🎓: Bard is here :)
03/04/23, 12:31 - Araviiii 🎓: She / he wasn't here we went to new jersey
04/04/23, 19:23 - Harecharan CSE E Amrita CBE: anyone free na take a look at this code, run it and rectify the error na(chatgpt useless)
04/04/23, 19:23 - Harecharan CSE E Amrita CBE: class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class B:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert(self.root, key)

    def _insert(self, node, key):
        if node.val <= key:
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert(node.left, key)
        else:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert(node.right, key)

    def delete(self, key):
        if self.root is None:
            return self.root

        if key == self.root.val:
            temp = Node(None)
            temp.left = self.root
            self.root = temp
            self._delete(temp, key)
            self.root = temp.left
        else:
            self._delete(self.root, key)

    def _delete(self, node, key):
        if node is None:
            return node

        if key < node.val:
            node.left = self._delete(node.left, key)
        elif key > node.val:
            node.right = self._delete(node.right, key)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            else:
                min_node = self._find_min_node(node.right)
                node.val = min_node.val
                node.right = self._delete(node.right, min_node.val)

        return node

    def _find_min_node(self, node):
        while node.left is not None:
            node = node.left
        return node

    def preorder_traversal(self):
        result = []
        self._preorder(self.root, result)
        return result

    def _preorder(self, node, result):
        if node is None:
            return

        result.append(node.val)
        self._preorder(node.left, result)
        self._preorder(node.right, result)

    def inorder_traversal(self):
        result = []
        self._inorder(self.root, result)
        return result

    def _inorder(self, node, result):
        if node is None:
            return

        self._inorder(node.left, result)
        result.append(node.val)
        self._inorder(node.right, result)

    def postorder_traversal(self):
        result = []
        self._postorder(self.root, result)
        return result

    def _postorder(self, node, result):
        if node is None:
            return

        self._postorder(node.left, result)
        self._postorder(node.right, result)
        result.append(node.val)

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if node is None:
            return False
        if node.val == key:
            return True
        if node.val > key:
            return self._search(node.right, key)
        return self._search(node.left, key)
    
    def _height(self, node):
        if node is None:
            return 0
        left_height = self._height(node.left)
        right_height = self._height(node.right)
        return 1 + max(left_height)


bst = B()

# Insert nodes
bst.insert(10)
bst.insert(5)
bst.insert(15)
bst.insert(2)
bst.insert(7)
bst.insert(12)
bst.insert(20)

# In-order traversal
print("In-order traversal:")
print(bst.inorder_traversal())

# Pre-order traversal
print("Pre-order traversal:")
print(bst.preorder_traversal())

# Post-order traversal
print("Post-order traversal:")
print(bst.postorder_traversal())

# Search
print("Search for 7:")
print(bst.search(7))
print("Search for 30:")
print(bst.search(30))

# Delete node
bst.delete(5)
print("In-order traversal after deleting 5:")
print(bst.inorder_traversal())

# Height
print("Height of tree:")
print(bst.height())
04/04/23, 19:30 - Viswaa Ramasubramanian: <Media omitted>
04/04/23, 19:30 - Viswaa Ramasubramanian: Batura
Chappati
Parota
04/04/23, 19:30 - Viswaa Ramasubramanian: Ghee roast
04/04/23, 19:30 - Viswaa Ramasubramanian: Masal roast
04/04/23, 19:30 - Viswaa Ramasubramanian: Paneer roast
04/04/23, 19:30 - Viswaa Ramasubramanian: Paneer biriyani
04/04/23, 19:30 - Viswaa Ramasubramanian: Channa
04/04/23, 19:30 - Viswaa Ramasubramanian: Mushroom gravy
04/04/23, 19:30 - Harecharan CSE E Amrita CBE: This message was deleted
04/04/23, 19:31 - Shesadriii 🎓: Sooru mukkiyum bigilu
04/04/23, 19:31 - Viswaa Ramasubramanian: So unaku paneer biriyani lock paniran
04/04/23, 19:31 - Shesadriii 🎓: 4 battura 1 Channa
2 battura 1 Channa
3 battura 1 Channa
04/04/23, 19:31 - Harecharan CSE E Amrita CBE: Apdiya instant delivery to bhavani
04/04/23, 19:32 - Viswaa Ramasubramanian: Yaru namba master villain vjs ka
04/04/23, 19:32 - Viswaa Ramasubramanian: Cheri panirlam
04/04/23, 19:32 - Phoool Gobiiii  🎓: Minus 1 battura
Add 1 panner roast
04/04/23, 19:33 - Viswaa Ramasubramanian: Ok
04/04/23, 19:33 - Viswaa Ramasubramanian: 8 bhatura 
3 channa
1 paneer roast
04/04/23, 19:33 - Viswaa Ramasubramanian: Coreect ah??
04/04/23, 19:33 - Phoool Gobiiii  🎓: Yes
04/04/23, 19:33 - Araviiii 🎓: Pakka da
04/04/23, 19:34 - Viswaa Ramasubramanian: Tooo much da dei
04/04/23, 19:35 - Araviiii 🎓: Naa madala puri saptala
04/04/23, 19:35 - Araviiii 🎓: Naala*
04/04/23, 19:35 - Araviiii 🎓: Masala*
04/04/23, 19:35 - Viswaa Ramasubramanian: But inga 16 batura lam solranunga
04/04/23, 19:35 - Viswaa Ramasubramanian: Ku mari panranunga
04/04/23, 19:36 - Viswaa Ramasubramanian: Apram enna namba channa va nakitu poga vendhiyadhan
04/04/23, 19:36 - Araviiii 🎓: Apo neeium apdiya panu
04/04/23, 19:37 - Viswaa Ramasubramanian: Hair la pannuvan
04/04/23, 19:38 - Viswaa Ramasubramanian: @916383425519  idhuku oru mandhram sollu da
04/04/23, 19:38 - Viswaa Ramasubramanian: Om ass showww namaha nu solava
04/04/23, 19:39 - Sooorrrr 🎓: Add 2 battura 1 channa for me
04/04/23, 19:39 - Viswaa Ramasubramanian: Ok da
04/04/23, 19:39 - Viswaa Ramasubramanian: Sure
04/04/23, 19:39 - Sooorrrr 🎓: 👍
04/04/23, 19:39 - Viswaa Ramasubramanian: 11 bhatura
4 channa 
1 paneer roast
04/04/23, 19:43 - Gannu: Enaku ?
04/04/23, 19:43 - Harecharan CSE E Amrita CBE: saavule setha payale 😂
04/04/23, 19:44 - Gannu: <Media omitted>
04/04/23, 19:53 - Shesadriii 🎓: <Media omitted>
04/04/23, 20:51 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 09:39 - Harecharan CSE E Amrita CBE: <Media omitted>
05/04/23, 10:25 - Harecharan CSE E Amrita CBE: I mean sir kitta inform panna vendama
05/04/23, 10:26 - Viswaa Ramasubramanian: *tha pathukalam
05/04/23, 10:28 - Viswaa Ramasubramanian: Naanae sujee mam munnadi phone use panra
05/04/23, 10:28 - Viswaa Ramasubramanian: Idhoda periya risk ah nee edukira
05/04/23, 10:28 - Harecharan CSE E Amrita CBE: Unakenapa
05/04/23, 10:28 - Harecharan CSE E Amrita CBE: <Media omitted>
05/04/23, 10:29 - Viswaa Ramasubramanian: But irundhalum nee sethiru
05/04/23, 10:29 - Viswaa Ramasubramanian: Adha reason ah solikalam
05/04/23, 10:30 - Viswaa Ramasubramanian: Sgpa and attendence kedachirum
05/04/23, 10:30 - Viswaa Ramasubramanian: Nalla idea la sindithu seyalathungal
05/04/23, 12:26 - Viswaa Ramasubramanian: @916383425519  bore adikidhu online va
05/04/23, 12:31 - Harecharan CSE E Amrita CBE: Ippathaan vanthen
05/04/23, 12:32 - Viswaa Ramasubramanian: enga vandha
05/04/23, 12:32 - Harecharan CSE E Amrita CBE: Entha online game nu sollu on a online velayaadalam
05/04/23, 12:32 - Harecharan CSE E Amrita CBE: Home ku from a mountaim
05/04/23, 12:32 - Harecharan CSE E Amrita CBE: Class illaya
05/04/23, 12:32 - Viswaa Ramasubramanian: podu nalla podu game
05/04/23, 12:32 - Viswaa Ramasubramanian: od update poitu iruku
05/04/23, 13:41 - Phoool Gobiiii  🎓: <Media omitted>
05/04/23, 13:41 - Araviiii 🎓: <Media omitted>
05/04/23, 13:42 - Gannu: Abistu abistu
05/04/23, 13:58 - Viswaa Ramasubramanian: Vayula podhuuu
05/04/23, 13:58 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 16:32 - Harecharan CSE E Amrita CBE: Shreya don't worry ur so vegetarian
05/04/23, 16:33 - Harecharan CSE E Amrita CBE: Ena antha muttai la irunthu k 👌 nj Ù porikaathu
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
05/04/23, 20:14 - Viswaa Ramasubramanian: <Media omitted>
06/04/23, 18:48 - Araviiii 🎓: <Media omitted>
06/04/23, 22:09 - Araviiii 🎓: Inside train bois
06/04/23, 22:09 - Araviiii 🎓: Will leave by 10 50 pm
06/04/23, 22:44 - Viswaa Ramasubramanian: Mass nae nee
07/04/23, 05:15 - Sanjuuu 🎓: Reached home
07/04/23, 08:16 - Araviiii 🎓: Reached home bois
07/04/23, 10:30 - Viswaa Ramasubramanian: <Media omitted>
07/04/23, 10:31 - Viswaa Ramasubramanian: Namba section ku dhan indha varam class eh nadakala
07/04/23, 10:31 - Harecharan CSE E Amrita CBE: ummm this is for our batch
07/04/23, 10:31 - Harecharan CSE E Amrita CBE: oru vela pona class aa irukumo
07/04/23, 10:31 - Harecharan CSE E Amrita CBE: where was this posted
07/04/23, 10:31 - Viswaa Ramasubramanian: Also last week avaru design thinking start eh panla
07/04/23, 10:31 - Viswaa Ramasubramanian: SS CSE E grp
07/04/23, 10:32 - Harecharan CSE E Amrita CBE: avar kitta class rep aa vittu pesuvom
07/04/23, 10:32 - Viswaa Ramasubramanian: Ya @918248897225
07/04/23, 10:32 - Viswaa Ramasubramanian: See I guess idhu avaru A B ku Eduthirparu
07/04/23, 10:33 - Harecharan CSE E Amrita CBE: do we have any work da that needs immediate attention?
07/04/23, 10:40 - Viswaa Ramasubramanian: idts😶‍🌫️
07/04/23, 10:41 - Shesadriii 🎓: <Media omitted>
07/04/23, 13:19 - Gannu: <Media omitted>
07/04/23, 13:19 - Gannu: @919941614061 sollave illa 😂
07/04/23, 13:22 - Shesadriii 🎓: 😂😂😂 Im popuular mame
08/04/23, 16:31 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=c02s4s34fyw
10/04/23, 10:12 - Gannu: <Media omitted>
10/04/23, 18:00 - Sooorrrr 🎓: Topics: Corporate structure, Pay and Perks, Circular and Memo.
10/04/23, 18:29 - Sanjuuu 🎓: Bois beatboxing
10/04/23, 18:29 - Harecharan CSE E Amrita CBE: what
10/04/23, 18:29 - Harecharan CSE E Amrita CBE: where?
10/04/23, 18:29 - Harecharan CSE E Amrita CBE: when?
10/04/23, 18:30 - Harecharan CSE E Amrita CBE: how?
10/04/23, 18:30 - Sanjuuu 🎓: <Media omitted>
10/04/23, 18:30 - Sanjuuu 🎓: <Media omitted>
10/04/23, 18:57 - Sanjuuu 🎓: <Media omitted>
10/04/23, 18:58 - Araviiii 🎓: Don't tempt me to come da
10/04/23, 21:07 - Harecharan CSE E Amrita CBE: Have you ever experienced a devastating loss or disappointment in some aspect of school, sports, extracurriculars or another area of your life? What was it like? How did you bounce back from it, if at all? Did it change you profoundly, either for the better or the worse? What advice do you have for someone who falls short of a life-defining goal?
10/04/23, 21:20 - Harecharan CSE E Amrita CBE: Dear Friends,

I want to share with you a personal experience that left a deep impact on me during my 7th-grade NCC camp. I had been working tirelessly to achieve the role of the drill commander, but unfortunately, my lack of stamina and asthma became a hindrance. Despite my best efforts, I was unable to secure the position.

It was a devastating loss for me. I felt disappointed, frustrated, and defeated. I had put in so much effort and was passionate about the role, but my medical condition held me back. It was a tough pill to swallow, and it left me feeling down for some time.

However, I learned some valuable lessons from this experience. It taught me the importance of resilience and perseverance in the face of setbacks. It made me realize that sometimes, things don't go as planned, and it's okay to face disappointments. What matters is how we handle them and bounce back.

I didn't let this setback define me negatively. Instead, I used it as a learning opportunity. I focused on improving my stamina and managing my asthma better. I also shifted my perspective and found other ways to contribute to the NCC camp, such as assisting the drill commander and supporting my fellow cadets.

This experience changed me for the better. It made me more resilient, determined, and empathetic towards others who face challenges. It taught me that failure is not final, and it's never too late to pick yourself up and keep moving forward.

If you find yourself falling short of a life-defining goal, my advice to you is to acknowledge your disappointment, but don't dwell on it. Instead, focus on the lessons you can learn from the experience and how you can improve for the future. Embrace resilience and perseverance, and don't be afraid to seek support from others. Remember that setbacks are a part of life, and they can shape you into a stronger, more resilient individual.

In conclusion, my experience at the NCC camp taught me that setbacks can be challenging, but they can also be opportunities for growth. Don't let them define you negatively, but instead, use them as stepping stones towards success. Keep pushing forward, stay resilient, and never give up on your dreams.

Thank you.
10/04/23, 21:20 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=CuSxk_DNau8
10/04/23, 22:48 - Sooorrrr 🎓: Warm greetings,

Attention all computer science and electronics enthusiasts! We are excited to announce the relaunch of the IETE club at Amrita! Previously inactive, we are now ready to revive this club and create a platform for students, professionals, and researchers to come together and explore the world of electronics and computer science. 

At IETE, our focus is on advancing the fields of electronics, telecommunications, and software development. We provide opportunities for learning, sharing, and growing your knowledge and expertise in these exciting fields.

Follow the links below to join our community and start connecting with like-minded individuals:
Linktree: https://linktr.ee/iete_amrita
WhatsApp: https://chat.whatsapp.com/IJX5Ee7kISj5lLkzu5sCqe.
                                                                                                                                                                                                     Our club is dedicated to bridging the gap between computer science and electronics by providing a platform for interdisciplinary collaboration. Whether you are interested in software development, embedded systems, hardware design, or telecommunications, we welcome you to join our community and explore the fascinating world of computer science and electronics.

Don't miss this opportunity to connect with the best minds in the field and take your skills to the next level. Join us today!

- Vakada Rohit (CSE - B)
Coordinator. 
IETE Club
+91 9078529969
11/04/23, 14:41 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:28 - Sooorrrr 🎓: This message was deleted
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:29 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:52 - Sooorrrr 🎓: <Media omitted>
11/04/23, 18:56 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:08 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:08 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:08 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 21:25 - Sooorrrr 🎓: <Media omitted>
11/04/23, 22:01 - Gannu: <Media omitted>
11/04/23, 22:01 - Gannu: <Media omitted>
11/04/23, 22:01 - Gannu: <Media omitted>
11/04/23, 22:01 - Gannu: <Media omitted>
11/04/23, 22:01 - Gannu: <Media omitted>
11/04/23, 23:29 - Sooorrrr 🎓: <Media omitted>
12/04/23, 08:10 - Gannu: Memo and circular are two types of written communication used in organizations, and there are some key differences between them:

Purpose: A memo is a brief message that is used to communicate information within an organization. Memos are usually written to inform or remind employees about a specific topic, such as a change in policy or a new procedure. A circular, on the other hand, is a document that is used to communicate information to a wider audience. Circulations are typically used to provide updates or share important information with clients, customers, or stakeholders.

Recipients: Memos are usually sent to a specific individual or department within an organization, while circulars are sent to a larger audience, such as all employees or customers.

Content: Memos are typically short and to the point, with a clear subject line, brief introduction, and specific details about the topic being discussed. Circulars, on the other hand, may contain more detailed information and may include charts, graphs, or other visual aids to help convey the information.

Frequency: Memos are often used for routine communication within an organization and may be sent on a regular basis, such as weekly or monthly. Circulars, on the other hand, are usually sent less frequently, such as on an as-needed basis.

In summary, memos are brief messages used to communicate information within an organization, while circulars are more comprehensive documents used to communicate information to a wider audience. Memos are typically sent to specific individuals or departments, while circulars are sent to a larger audience. Memos are often used for routine communication within an organization, while circulars are usually sent less frequently.
12/04/23, 09:11 - Sooorrrr 🎓: <Media omitted>
12/04/23, 09:47 - Araviiii 🎓: Come fast
12/04/23, 09:47 - Araviiii 🎓: Mam is taking attendance
12/04/23, 09:49 - Viswaa Ramasubramanian: Ganesh got proxy by someone
12/04/23, 09:49 - Viswaa Ramasubramanian: But he is present
12/04/23, 10:07 - Phoool Gobiiii  🎓: A typical corporate structure may include several departments, each with its specific functions and responsibilities. The specific departments and their functions may vary depending on the organization, industry, and size of the company. However, here are some common departments that are often found in a corporate structure along with their general functions:

Human Resources (HR): Responsible for managing and developing the organization's workforce, including recruitment, hiring, onboarding, employee relations, performance management, training and development, benefits administration, and HR policies and compliance.
Finance and Accounting: Responsible for managing the organization's financial resources, including financial planning, budgeting, financial reporting, financial analysis, payroll, accounts payable, accounts receivable, and tax compliance.
Marketing: Responsible for promoting the organization's products or services, including market research, marketing strategy, branding, advertising, digital marketing, public relations, and customer relationship management.
Sales: Responsible for generating revenue through sales of the organization's products or services, including sales strategy, customer acquisition, account management, sales targets, and sales performance tracking.
Operations: Responsible for managing the day-to-day operations of the organization, including production, supply chain management, logistics, quality control, and process improvement.
Information Technology (IT): Responsible for managing the organization's technology infrastructure, including hardware, software, networks, data management, cybersecurity, IT support, and strategic IT planning.
Legal: Responsible for providing legal counsel and ensuring the organization's compliance with laws and regulations, including contract management, legal research, intellectual property protection, and dispute resolution.
Administration: Responsible for managing administrative tasks and support functions, including office management, facilities management, procurement, vendor management, and administrative policies and procedures.
Research and Development (R&D): Responsible for conducting research and development activities to innovate and improve the organization's products, services, or processes, including product design, prototyping, testing, and technology development.
Customer Service: Responsible for providing customer support, handling inquiries, resolving issues, and managing customer relationships to ensure customer satisfaction.
Corporate Communications: Responsible for managing the organization's internal and external communications, including corporate messaging, public relations, media relations, and crisis communications.
Strategic Planning: Responsible for developing and implementing the organization's long-term strategic plans, including market analysis, business planning, mergers and acquisitions, and strategic partnerships.
It's important to note that the specific departments and their functions can vary widely depending on the organization's size, industry, and structure. Some smaller organizations may have fewer departments, and some larger organizations may have more specialized departments based on their unique needs and operations.
12/04/23, 17:41 - Sooorrrr 🎓: class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data
        self.level=0


class BinaryTree:
    def __init__(self, root):
        self.root = Node(root)
        c=0

    def print_tree(self, traversal_type):
        if traversal_type == "inorder":
            return self.inorder_traversal(self.root, "")
        elif traversal_type == "preorder":
            return self.preorder_traversal(self.root, "")
        elif traversal_type == "postorder":
            return self.postorder_traversal(self.root, "")

        else:
            print("Traversal type " + str(traversal_type) + " is not supported.")
            return False

    def levelprint(self,element):


    def inorder_traversal(self, start, traversal):
        if start:
            traversal = self.inorder_traversal(start.left, traversal)
            traversal += (str(start.data) + "-")
            traversal = self.inorder_traversal(start.right, traversal)
        return traversal

    def preorder_traversal(self, start, traversal):
        if start:
            traversal += (str(start.data) + "-")
            traversal = self.preorder_traversal(start.left, traversal)
            traversal = self.preorder_traversal(start.right, traversal)
        return traversal

    def postorder_traversal(self, start, traversal):
        if start:
            traversal = self.postorder_traversal(start.left, traversal)
            traversal = self.postorder_traversal(start.right, traversal)
            traversal += (str(start.data) + "-")
        return traversal
    # 
    # def levelorder_traversal(self,element):
    #     start=self.root
    #     if(start.data==element):
    #         print(self.level)
    # 
    #         left_level=self.levelorder_traversal(self,)





# Example usage
tree = BinaryTree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)
tree.root.right.left = Node(6)
tree.root.right.right = Node(7)

print(tree.print_tree("inorder"))  # Output: 4-2-5-1-6-3-7
print(tree.print_tree("preorder"))  # Output: 1-2-4-5-3-6-7
print(tree.print_tree("postorder"))  # Output: 4-5-2-6-7-3-1
# tree.levelorder_traversal()
12/04/23, 17:59 - Sooorrrr 🎓: <Media omitted>
12/04/23, 18:06 - Harecharan CSE E Amrita CBE: <Media omitted>
12/04/23, 18:10 - Sooorrrr 🎓: Binary search trees (BSTs) are a type of binary tree that are specifically designed to support efficient searching and sorting operations. In a BST, each node in the tree contains a key value, and the keys of all nodes in the left subtree are smaller than the key of the node, while the keys of all nodes in the right subtree are larger.

This property allows for efficient searching of a key value within the tree. When searching for a key value, the search begins at the root of the tree and proceeds down the left or right subtree depending on whether the key is smaller or larger than the current node's key. This process continues until either the key is found or the search reaches a leaf node, indicating that the key is not in the tree.

BSTs are also useful for efficient insertion and deletion of key values. When inserting a new key value, the search proceeds as in a search operation, but when the search reaches a leaf node, a new node with the new key value is added to the tree. When deleting a key value, the node containing the key is removed from the tree and the remaining nodes are rearranged to maintain the BST property.

The height of a BST can greatly affect its efficiency. If the tree is unbalanced, with one subtree much larger than the other, the search, insertion, and deletion operations can become very inefficient, approaching O(n) complexity in the worst case. To avoid this, various balancing algorithms can be used to maintain a balanced tree structure, such as the AVL tree or the Red-Black tree.

Overall, binary search trees are a powerful data structure for efficient searching, sorting, insertion, and deletion operations, particularly when used with appropriate balancing techniques.
12/04/23, 18:10 - Sooorrrr 🎓: Binary search trees (BSTs) and heaps are both types of binary trees, but they have different characteristics and are used for different purposes.

BSTs are specifically designed to support efficient searching, insertion, and deletion of key-value pairs. Each node in a BST contains a key-value pair, and the tree is organized such that the keys of nodes in the left subtree are smaller than the key of the current node, while the keys of nodes in the right subtree are larger. This property allows for efficient searching and sorting operations, making BSTs useful for many applications in computer science and programming.

Heaps, on the other hand, are specifically designed to support efficient access to the minimum or maximum element in a collection. There are two main types of heaps: min heaps, where the smallest element is stored at the root of the tree, and max heaps, where the largest element is stored at the root. In a heap, the elements are not organized according to any specific ordering, but the tree structure is maintained such that the children of a node are always greater than or equal to (in the case of a min heap) or less than or equal to (in the case of a max heap) the node itself. This property allows for efficient access to the minimum or maximum element in the heap.

Overall, the main difference between BSTs and heaps is their primary purpose. BSTs are used for efficient searching, sorting, insertion, and deletion operations, while heaps are used for efficient access to the minimum or maximum element in a collection.
12/04/23, 18:15 - Sooorrrr 🎓: A heap is a type of binary tree that is specifically designed to support efficient access to the minimum or maximum element in a collection. There are two main types of heaps: min heaps and max heaps.

In a min heap, the smallest element is stored at the root of the tree, and for any given node, the value of its left and right children is greater than or equal to the value of the node itself. This property allows for efficient access to the minimum element in the heap, which is always stored at the root.

In a max heap, the largest element is stored at the root of the tree, and for any given node, the value of its left and right children is less than or equal to the value of the node itself. This property allows for efficient access to the maximum element in the heap, which is always stored at the root.

The key advantage of heaps is their efficiency in accessing the minimum or maximum element in a collection. This operation can be performed in constant time, regardless of the size of the collection, by simply accessing the root of the heap.

Heaps are commonly used in various algorithms and data structures, such as heap sort, priority queues, and graph algorithms. They can be implemented as arrays or as binary trees, and various algorithms exist for constructing, inserting, deleting, and maintaining the heap structure.
12/04/23, 18:21 - Sooorrrr 🎓: <Media omitted>
12/04/23, 18:33 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 18:33 - Viswaa Ramasubramanian: RCB vs LSG verithanam
12/04/23, 18:34 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 18:38 - Harecharan CSE E Amrita CBE: DSA23c - Convert general tree to binary tree
12/04/23, 18:38 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=TE2-Zs2QTTw
12/04/23, 18:57 - Gannu: <Media omitted>
12/04/23, 18:57 - Gannu: <Media omitted>
12/04/23, 18:59 - Shesadriii 🎓: This message was deleted
12/04/23, 18:59 - Shesadriii 🎓: <Media omitted>
12/04/23, 18:59 - Shesadriii 🎓: This message was deleted
12/04/23, 19:18 - Gannu: <Media omitted>
12/04/23, 19:19 - Sanjuuu 🎓: guys we dont have sorting timecomplexity questions
12/04/23, 19:19 - Sanjuuu 🎓: right?
12/04/23, 19:19 - Sanjuuu 🎓: or do we?
12/04/23, 19:22 - Sooorrrr 🎓: we do i guess
12/04/23, 19:25 - Sanjuuu 🎓: Syllabus for tutorial 1

Arrays, Linked Lists, Binary Trees, Heaps
12/04/23, 19:25 - Sanjuuu 🎓: for other classes it was told prior that they have sorting and queue
12/04/23, 19:26 - Sooorrrr 🎓: the question papers for the other sections have sorting
12/04/23, 19:26 - Sooorrrr 🎓: also the main use of binary tree is sorting
12/04/23, 19:26 - Harecharan CSE E Amrita CBE: No studying sorting is not necessary as sir did not say
12/04/23, 19:27 - Sooorrrr 🎓: so doesn't make sense if we don't  have BST
12/04/23, 19:27 - Harecharan CSE E Amrita CBE: If u study then u r a teacherphobic
12/04/23, 19:27 - Sanjuuu 🎓: I meant other sortings...like quick sort
12/04/23, 19:28 - Sanjuuu 🎓: we have heap sort
12/04/23, 19:28 - Harecharan CSE E Amrita CBE: S
12/04/23, 19:28 - Sanjuuu 🎓: but quick sort merge sort radix sort???????
12/04/23, 19:34 - Sooorrrr 🎓: Nope
12/04/23, 19:35 - Gannu: <Media omitted>
12/04/23, 19:59 - Viswaa Ramasubramanian: Ennadhu da idhellam
12/04/23, 20:00 - Viswaa Ramasubramanian: Dei match iruku la marandhe poitan
12/04/23, 20:00 - Viswaa Ramasubramanian: Epdi podhu boiss match
12/04/23, 20:01 - Viswaa Ramasubramanian: Nice decision by RR by sending padikkal one down that's his fav position
12/04/23, 20:01 - Viswaa Ramasubramanian: Hope he also comes back to form
12/04/23, 20:01 - Viswaa Ramasubramanian: Enna da jaddu ipdi podran
12/04/23, 20:02 - Viswaa Ramasubramanian: Ivlo wides ah
12/04/23, 20:08 - Viswaa Ramasubramanian: Ali poiii
12/04/23, 20:09 - Shesadriii 🎓: <Media omitted>
12/04/23, 20:10 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:10 - Viswaa Ramasubramanian: Shittt
12/04/23, 20:10 - Viswaa Ramasubramanian: Padikal outt
12/04/23, 20:16 - Viswaa Ramasubramanian: Enna dha nadhakidhu
12/04/23, 20:21 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:27 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:47 - Viswaa Ramasubramanian: CSK need to get butler wicket asap
12/04/23, 20:47 - Viswaa Ramasubramanian: Illana nakkirum
12/04/23, 20:47 - Phoool Gobiiii  🎓: Soltalla kelambu
12/04/23, 20:48 - Shesadriii 🎓: <Media omitted>
12/04/23, 20:48 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:48 - Gannu: <Media omitted>
12/04/23, 20:49 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:49 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:49 - Shesadriii 🎓: <Media omitted>
12/04/23, 20:49 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:49 - Viswaa Ramasubramanian: You deleted this message
12/04/23, 20:49 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:49 - Shesadriii 🎓: <Media omitted>
12/04/23, 20:50 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:51 - Shesadriii 🎓: Butler ah potachu
12/04/23, 20:51 - Viswaa Ramasubramanian: Wth
12/04/23, 20:51 - Gannu: Eduthachu ippo Enna
12/04/23, 20:51 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:51 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:51 - Gannu: Poda venna
12/04/23, 20:51 - Shesadriii 🎓: Chumma paiyana vilayada vitta overah pesura
12/04/23, 20:52 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:52 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:52 - Viswaa Ramasubramanian: Nalla adhi vangitu pesra pecha parrah
12/04/23, 20:53 - Shesadriii 🎓: <Media omitted>
12/04/23, 20:53 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:53 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 20:54 - Viswaa Ramasubramanian: Fine RR kammiya dhan adichirkanga csk ku nalla chance iruku
12/04/23, 20:54 - Viswaa Ramasubramanian: Lets see how last 3 overs goes
12/04/23, 20:55 - Viswaa Ramasubramanian: Pooran thambi hetmyer epdi veladuranu papom
12/04/23, 21:05 - Viswaa Ramasubramanian: Dear all, as i am sick tutorial 1 scheduled tomorrow is cancelled
12/04/23, 21:05 - Viswaa Ramasubramanian: Podra vediyaaaa
12/04/23, 21:12 - Viswaa Ramasubramanian: Wait what avangalta zampa va
12/04/23, 21:13 - Viswaa Ramasubramanian: Boult illaya innaiki appah csk win da
12/04/23, 21:13 - Shesadriii 🎓 changed this group's settings to allow only admins to send messages to this group
12/04/23, 21:13 - Gannu: Viswaa mssg pannu paapom
12/04/23, 21:13 - Araviiii 🎓: Setha paiya
12/04/23, 21:13 - Shesadriii 🎓: <Media omitted>
12/04/23, 21:14 - Gannu: <Media omitted>
12/04/23, 21:16 - Harecharan CSE E Amrita CBE: This message was deleted
12/04/23, 21:18 - Shesadriii 🎓 changed this group's settings to allow all participants to send messages to this group
12/04/23, 21:19 - Viswaa Ramasubramanian: Take care dhana pottivom
12/04/23, 21:20 - Viswaa Ramasubramanian: Potachu
12/04/23, 21:20 - Shesadriii 🎓: Ok sir, take care sir
12/04/23, 21:20 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 21:21 - Shesadriii 🎓: Vitta bye bye sir solira pora
12/04/23, 21:37 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 21:37 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 21:37 - Viswaa Ramasubramanian: Dei getha iruku la
12/04/23, 21:40 - Viswaa Ramasubramanian: रू तु राज आउट हो गया 🥲
12/04/23, 21:45 - Shesadriii 🎓: Nee adi vanga pora
12/04/23, 22:32 - Viswaa Ramasubramanian: Dube out inime csk nalla veladhum
12/04/23, 22:33 - Viswaa Ramasubramanian: RR tappu pantanga worst choice
12/04/23, 22:33 - Viswaa Ramasubramanian: Motha ali nowww
12/04/23, 22:33 - Viswaa Ramasubramanian: 🥸
12/04/23, 22:34 - Viswaa Ramasubramanian: CSK will win easily now
12/04/23, 22:46 - Viswaa Ramasubramanian: Dhoni show coming sooonnnn innum oru wicket ill
12/04/23, 22:51 - Viswaa Ramasubramanian: Well played convay
12/04/23, 22:51 - Viswaa Ramasubramanian: Thala entryyyyyy ❤‍🔥❤‍🔥❤‍🔥
12/04/23, 22:51 - Viswaa Ramasubramanian: 🔥🔥🔥🔥🔥🔥
12/04/23, 22:51 - Shesadriii 🎓: 💕💕💕
12/04/23, 23:17 - Viswaa Ramasubramanian: Dhoniiiiiiii
12/04/23, 23:17 - Viswaa Ramasubramanian: 🔥🔥🔥🔥🔥🔥🔥🔥🔥
12/04/23, 23:18 - Viswaa Ramasubramanian: Verithanammmmmmm
12/04/23, 23:18 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 23:19 - Viswaa Ramasubramanian: Jaddu to finish the matcg
12/04/23, 23:19 - Viswaa Ramasubramanian: Podraaaaa
12/04/23, 23:20 - Viswaa Ramasubramanian: Enna match dha idhu 4th consecutive thriller match
12/04/23, 23:20 - Viswaa Ramasubramanian: Last ballllll dhoni on strikeeee
12/04/23, 23:21 - Viswaa Ramasubramanian: ❤️
12/04/23, 23:21 - Viswaa Ramasubramanian: Moment
12/04/23, 23:21 - Viswaa Ramasubramanian: <Media omitted>
12/04/23, 23:23 - Viswaa Ramasubramanian: Ada podaaaaaaaaaaaa 
Chaiiiiii seriouslyyyyyy
12/04/23, 23:46 - Viswaa Ramasubramanian: <Media omitted>
13/04/23, 00:01 - Harecharan CSE E Amrita CBE: <Media omitted>
13/04/23, 00:03 - Viswaa Ramasubramanian: Guru shisyan
13/04/23, 00:03 - Harecharan CSE E Amrita CBE: sappitaan
13/04/23, 00:06 - Viswaa Ramasubramanian: Purila
13/04/23, 00:17 - Harecharan CSE E Amrita CBE: <Media omitted>
13/04/23, 05:07 - Viswaa Ramasubramanian: Reached trichy boiss
13/04/23, 07:53 - Viswaa Ramasubramanian: Reached home boisss
13/04/23, 19:22 - Phoool Gobiiii  🎓: Boarded the train, bois ✨
13/04/23, 19:25 - Viswaa Ramasubramanian: Mohit sharma is playing tdy 
Interestingggg
13/04/23, 19:25 - Viswaa Ramasubramanian: Mohit sharma and mohammed shami combo
13/04/23, 19:30 - Araviiii 🎓: dei no audio da
13/04/23, 19:31 - Araviiii 🎓: @916383425519
13/04/23, 23:31 - Shesadriii 🎓: <Media omitted>
14/04/23, 03:45 - Phoool Gobiiii  🎓: Reached home, bois
14/04/23, 18:03 - Sooorrrr 🎓: #include <stdio.h>
#define MAX 100

typedef struct{
    int pid;//it has the process id of the process
    int burst_time;//it has the amount of time needed to execute the process
    int remaining_time;//it has the amount of time remaining after context switch
}Process;

int main(){
    int n; //Number of processes
    int quantum; //time slice
    int i,j;// used in loops
    int current_time=0;//it keeps track of the current time
    int remaining_processes;//it keeps track of the remaining processes
    Process processes[MAX];// array of process structures
    int completion_time[MAX];//array of completion times
    int waiting_time[MAX];//array of waiting times
    printf("Enter the number of processes");
    scanf("%d",&n);
    
    printf("Enter the burst time and arrival time of each process");
    for(i=0;i<n;i++){
        printf("Process id: %d\n",i);
        printf("Enter burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("\n");
        processes[i].pid=i;
        processes[i].remaining_time=processes[i].burst_time;

    }

    printf("Enter the time slice for the round robin scheduling");
    scanf("%d",&quantum);

    remaining_processes=n;// we are assigning the remaining process to the total number of process to be executed

    while(remaining_processes>0){
        for(i=0;i<n;i++){
            if(processes[i].remaining_time>0){//checking whether the process has any remaining time and checking if the process has arrived to the ready queue
                int execution_time;// this is for the amount of time the process executes in that particular time slice
                if(quantum<processes[i].remaining_time){
                    execution_time=quantum;
                }
                else{
                    execution_time=processes[i].remaining_time;
                }
                processes[i].remaining_time=processes[i].remaining_time-execution_time;//remaining process time calculation
                current_time=current_time+execution_time;//current time calculation
                if(processes[i].remaining_time==0){// to check if process has completed
                    completion_time[processes[i].pid]=current_time;//completion time calculation
                    remaining_processes=remaining_processes-1;
                }
            }
        }
    }

    printf("Completion times:\n");

    for(int i=0; i<n;i++){
        printf("Process %d:%d\n",i,completion_time[i]);
        waiting_time[i]=completion_time[i]-processes[i].burst_time;
        printf("Process %d:%d\n",i,waiting_time[i]);
    }
    return 0;
}
14/04/23, 18:05 - Sooorrrr 🎓: Round robin
14/04/23, 21:42 - Araviiii 🎓: <Media omitted>
14/04/23, 21:42 - Sooorrrr 🎓: Thanks
14/04/23, 21:58 - Viswaa Ramasubramanian: soor oru sec match paren
15/04/23, 19:17 - Gannu: Why Study COA? 
Architecture VS organization 
Classic components of a computer 
Significance of ISA 
Types of ISAs 
Design decisions for ISA 
Fixed length VS variable length ISAs, examples 
RISC – Characteristics and examples 
CISC Characteristics 
Byte ordering: Endianness, examples 
Organization of memory, addresses, hex representation and decimal representation of addresses 
HEX and binary notation, conversion 
No of bits required for memory addressing 
Notion of KB, MB, GB etc. 
Byte, Word of memory 
Memory alignment 
MIPS Architecture 
Principles of hardware design and how its reflected in the design of MIPS 

 
MIPS instruction formats 
Addressing modes for MIPS 
MIPS instructions for Arith metic, load/store, Control branch, jump, procedure call 
Converting from High level language to MIPS assembly 
Converting from MIPS assembly to Binary HEX 
Branch target, effective address calculation 
Data path components 
Building a Single cycle data path 
Multi-cycle data path
15/04/23, 19:18 - Harecharan CSE E Amrita CBE: ya why study?
15/04/23, 19:20 - Harecharan CSE E Amrita CBE: guys questions in os related to pipelining anybody knows
15/04/23, 19:25 - Shesadriii 🎓: This message was deleted
15/04/23, 19:25 - Harecharan CSE E Amrita CBE: ?\
15/04/23, 19:26 - Harecharan CSE E Amrita CBE: <Media omitted>
15/04/23, 19:26 - Shesadriii 🎓: ok .
15/04/23, 19:26 - Harecharan CSE E Amrita CBE: ??\
15/04/23, 19:40 - Viswaa Ramasubramanian: Hex representation and decimal na oh andha instruction to binary apram binary to hexa crct ah??
15/04/23, 19:46 - Sooorrrr 🎓: <Media omitted>
15/04/23, 19:46 - Sooorrrr 🎓: scheduling fully
16/04/23, 01:16 - Sooorrrr 🎓: #include <stdio.h>
#include <stdlib.h>
// we assume that the arrival time is 0 for all these processes
int main(){
    int n,i,j;
  
    float avg_wt=0,avg_tat=0;//average waiting and turnaround time
    float total_wt=0,total_tat=0;//total
    printf("Enter the number of processes");
    scanf("%d",&n);

    int burst_time[n],wait_time[n],tat[n];
    int completion_time[n];

    for(int i=0;i<n;i++){
        printf("Enter the burst time of  process %d",i+1);
        scanf("%d",&burst_time[i]);
    }

    //sorting the burst times in ascending order
    for(i=0;i<n-1;i++) {  //sorting the burst times
        for(j=0;j<n-i-1;j++) {
            if(burst_time[j]>burst_time[j+1]){
                int temp=burst_time[j];
                burst_time[j]=burst_time[j+1];
                burst_time[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++) {
        printf("%d",burst_time[i]);
    }
    wait_time[0]=0;
    tat[0]=burst_time[0];
    completion_time[0]=tat[0];
    //calculating the waiting time for all processes
    for(int i=1;i<n;i++) {
        wait_time[i]=wait_time[i-1]+burst_time[i-1];
        tat[i]=wait_time[i]+burst_time[i];
        completion_time[i]=tat[i];
    }

    //calculating the total waiting time and  tat
    for(int i=0;i<n;i++) {
        total_tat+=(tat[i]);
        total_wt+=(wait_time[i]);
    }

    //calculating the average waiting time and average
    avg_wt=total_wt/n;
    avg_tat=total_tat/n;
    
    //printing the waiting times 
    for(int i=0;i<n;i++) {
        
        printf("PID : %d,Burst time:%d,Wait time: %d,Completion time: %d",i+1,burst_time[i],wait_time[i],completion_time[i]);
        printf("\n");
    }

}
16/04/23, 09:20 - Sooorrrr 🎓: <Media omitted>
16/04/23, 09:22 - Viswaa Ramasubramanian: https://amritavishwavidyapeetham-my.sharepoint.com/:p:/r/personal/rr_sathiya_cb_amrita_edu/_layouts/15/Doc.aspx?sourcedoc=%7B0D375EB6-C208-4EDF-B08D-8048DFB260B7%7D&file=Lecture%202%20-%20Fundamentals.pptx&action=edit&mobileredirect=true
16/04/23, 09:37 - Phoool Gobiiii  🎓: <Media omitted>
16/04/23, 09:38 - Viswaa Ramasubramanian: <Media omitted>
16/04/23, 09:48 - Viswaa Ramasubramanian: hierarchy of memory
register
cache
ram
main 
secodary
16/04/23, 09:49 - Sooorrrr 🎓: <Media omitted>
16/04/23, 09:55 - Sooorrrr 🎓: Problem→Algorithm→Program→ISA→Micro architecture → Circuits → Devices
16/04/23, 09:56 - Sooorrrr 🎓: Problem->Algorithm : Software design
16/04/23, 09:56 - Sooorrrr 🎓: Algorithm -> Program : programming and high level
16/04/23, 09:56 - Sooorrrr 🎓: Program-> ISA : Assembly
16/04/23, 09:56 - Sooorrrr 🎓: ISA -> Micro architecture: Processor
16/04/23, 09:57 - Sooorrrr 🎓: Micro arch -> Circuit : Logic/circuit design
16/04/23, 09:57 - Sooorrrr 🎓: Circuits -> Devices : Fabrication
16/04/23, 09:58 - Sooorrrr 🎓: Microarchitecture, also known as computer organization or CPU design, refers to the way a processor's hardware components are designed and interconnected to implement the instruction set architecture (ISA). In other words, microarchitecture is the implementation of the ISA in hardware.

Microarchitecture is concerned with the details of the processor's internal workings, including the data path, control unit, instruction set, caches, registers, pipelines, and buses. It defines how instructions are fetched from memory, decoded, and executed by the processor's hardware.

Microarchitecture design involves trade-offs between performance, power consumption, and cost. Designers must balance these factors to create a processor that meets the performance requirements of the target application while staying within power and cost constraints.

Microarchitecture is an important factor in determining a processor's performance, as it affects the speed, efficiency, and scalability of the processor. For example, a well-designed microarchitecture can improve the processor's clock speed, reduce the number of clock cycles needed to execute instructions, and increase the amount of work done in parallel.
16/04/23, 09:59 - Sooorrrr 🎓: Von Neumann architecture is used more extensively than Harvard architecture because it offers more flexibility and generality in memory usage. It uses a single memory unit for both data and instructions, which allows for easier programming and a more flexible use of memory resources. This means that programmers can write code that can be executed on different hardware platforms without having to rewrite it for each specific platform.

Additionally, von Neumann architecture is simpler and more straightforward to implement than Harvard architecture. It requires fewer hardware components, which makes it easier to design, manufacture, and maintain. This simplicity also makes it more cost-effective, which is an important consideration for many applications.

Another reason why von Neumann architecture is used more extensively is that it has a larger software ecosystem. Many programming languages and operating systems have been designed to work with von Neumann architecture, which makes it easier for programmers to develop software and for users to run it on a wide range of devices.

Overall, while Harvard architecture can offer better performance in certain applications, von Neumann architecture's flexibility, simplicity, and larger software ecosystem make it a more practical and widely used architecture for general-purpose computing.
16/04/23, 10:29 - Araviiii 🎓: <Media omitted>
16/04/23, 11:53 - Araviiii 🎓: 9884838489
16/04/23, 11:56 - Shesadriii 🎓: <Media omitted>
16/04/23, 12:22 - Sooorrrr 🎓: <Media omitted>
16/04/23, 12:27 - Sooorrrr 🎓: The Program Counter (PC) and the Memory Address Register (MAR) are both important components of a computer's Central Processing Unit (CPU), but they have different functions.

The Program Counter is a register that holds the address of the next instruction to be executed in the program. It is a special-purpose register that keeps track of the address of the current instruction and automatically increments it to point to the next instruction in memory after the instruction is fetched. In other words, the Program Counter is responsible for keeping track of the execution flow of a program.

On the other hand, the Memory Address Register (MAR) is a register that holds the address of the memory location that the CPU wants to read from or write to. When the CPU wants to access a specific memory location, it first puts the address of that location into the MAR, and then the memory controller uses that address to fetch or store data at that location.

In summary, the main difference between the Program Counter and the Memory Address Register is that the Program Counter keeps track of the address of the next instruction to be executed, while the Memory Address Register holds the address of the memory location being accessed by the CPU. The Program Counter is used for controlling the execution flow of the program, while the Memory Address Register is used for accessing data from memory.
16/04/23, 12:36 - Shesadriii 🎓: <Media omitted>
16/04/23, 13:44 - Harecharan CSE E Amrita CBE: The Register Transfer Language is the symbolic representation of notations used to specify the sequence of micro-operations. In a computer system, data transfer takes place between processor registers and memory and between processor registers and input-output systems.
16/04/23, 14:19 - Phoool Gobiiii  🎓: https://cs.wellesley.edu/~cs240/f14/lectures/08-machinecode.pdf
17/04/23, 15:28 - Shesadriii 🎓: class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def buildTree(preorder, inorder):
    if not inorder:
        return None
    
    root_val = preorder.pop(0)
    root_index = inorder.index(root_val)
    
    root = TreeNode(root_val)
    root.left = buildTree(preorder, inorder[:root_index])
    root.right = buildTree(preorder, inorder[root_index + 1:])
    
    return root


preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
root = buildTree(preorder, inorder)
print(root.right.left.val)
17/04/23, 16:18 - Sooorrrr 🎓: <Media omitted>
17/04/23, 18:17 - Araviiii 🎓: <Media omitted>
17/04/23, 18:23 - Sanjuuu 🎓: class BSTnode:
    def ___init___(self,data):
        self.data=data
        self.right=None
        self.left=None
    
    def insert(self,val):
        if self.data == val:
            return
        if val < self.data:
            if self.left:
                self.left.insert(val)
            else:
                self.left=BSTnode(val)
        else:
            if self.right:
                self.right.insert(val)
            else:
                self.right=BSTnode(val)
    
    def inOrderTraversal(self):
        elements=[]
        if self.left:
            elements+=self.left.inOrderTraversal()
        elements.append(self.data)
        if self.right:
            elements+=self.right.inOrderTraversal()
        return elements

    def printBST(self, level=0):
        if self.right:
            self.right.printBST(level + 1)
        print(' ' * 4 * level + '->', self.data)
        if self.left:
            self.left.printBST(level + 1)
    
    def height(self):
        right_height,left_height=0,0
        if self is None:
            return 0
        else:
            if self.left:
                left_height = self.left.height()
            if self.right:
                right_height = self.right.height() 
            return 1 + max(left_height, right_height)
    
    def delete(self, val):
        if self is None:
            return None
        
        # Search for the node to delete
        if val < self.data:
            self.left = self.left.delete(val)
        elif val > self.data:
            self.right = self.right.delete(val)
        else: # Node to delete found
            # Case 1: Node has no children
            if self.left is None and self.right is None:
                return None
            
            # Case 2: Node has one child
            if self.left is None:
                return self.right
            if self.right is None:
                return self.left
            
            # Case 3: Node has two children
            # Find the smallest node in the right subtree
            temp = self.right
            while temp.left:
                temp = temp.left
            # Replace the data of the node to delete with the smallest node in the right subtree
            self.data = temp.data
            # Delete the smallest node in the right subtree
            self.right = self.right.delete(temp.data)
        
        return self


def build(e):
    if not e:
        return None
    root = BSTnode(e[0])
    for i in range(1, len(e)):
        root.insert(e[i])
    return root
numbers=[17,4,1,20,9,23,18,34]
n=build(numbers)
print(n.inOrderTraversal())
print(n.height())
n.printBST()
n.delete(23)
n.printBST()
17/04/23, 18:39 - Sanjuuu 🎓: class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, value):
        new_node = Node(value)
            if self.new_node is None:
                self.new_node = new_node
            else:
                queue=[self.root]
                while queue:
                    current_node = queue.pop(0)
                    if current_node.left is None:
                        current_node.left = new_node
                        break
                    elif current_node.right is None:
                        current_node.right = new_node
                        break
                    else:
                        queue.append(current_node.left)
                        queue.append(current_node.right)
complete binary tree
17/04/23, 20:39 - Araviiii 🎓: <Media omitted>
17/04/23, 21:24 - Sooorrrr 🎓: ```class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data
        # self.level=0


class BinaryTree:
    def __init__(self, root):
        self.root = Node(root)
        self.val=None
        # c=0

    def get_root(self):
        return self.root

    def insert_node(self,node,value,subtree):
        start=self.root
        self.search(start,node)
        if self.val is not None:
            if subtree=='l':
                self.val.left=Node(value)
            elif subtree=='r':
                self.val.right=Node(value)
        else:
            print("Node not found")

    def height(self,start):
        if start is None:
            return -1

        else:
            leftheight=self.height(start.left)
            rightheight=self.height(start.right)

        if leftheight>rightheight:
            return leftheight+1

        else:
            return rightheight+1

    def max_value(self):
        start=self.root
        string=self.inorder_traversal(start,"")
        arr=string.split('-')
        print(max(arr))

    def min_value(self):
        start=self.root
        string=self.inorder_traversal(start,"")
        mrr=string.split('-')
        print(min(mrr))




    def search(self, start, node):

        # print(start.data)
        if start.data != node:
            if start.left is not None:
                self.search(start.left, node)
            else:
                return start
            if start.right is not None:
                self.search(start.right, node)
            else:
                return start

        else:
            self.val=start
            return start


    def print_tree(self, traversal_type):
        if traversal_type == "inorder":
            return self.inorder_traversal(self.root, "")
        elif traversal_type == "preorder":
            return self.preorder_traversal(self.root, "")
        elif traversal_type == "postorder":
            return self.postorder_traversal(self.root, "")
        
        else:
            print("Traversal type " + str(traversal_type) + " is not supported.")
            return False

    # def levelprint(self,element):


    def inorder_traversal(self, start, traversal):
        if start:
            traversal = self.inorder_traversal(start.left, traversal)#it breeaks at 4

            traversal += (str(start.data) + "-")
            # print(traversal)
            traversal = self.inorder_traversal(start.right, traversal)
        return traversal

    def preorder_traversal(self, start, traversal):
        if start:
            traversal += (str(start.data) + "-")
            traversal = self.preorder_traversal(start.left, traversal)
            traversal = self.preorder_traversal(start.right, traversal)
        return traversal

    def postorder_traversal(self, start, traversal):
        if start:
            traversal = self.postorder_traversal(start.left, traversal)
            traversal = self.postorder_traversal(start.right, traversal)
            traversal += (str(start.data) + "-")
        return traversal
    #
    # def levelorder_traversal(self,element):
    #     start=self.root
    #     if(start.data==element):
    #         print(self.level)
    #
    #         left_level=self.levelorder_traversal(self,)





# Example usage
tree = BinaryTree(1)

print(tree.print_tree("inorder"))
tree.insert_node(1,2,'l')
tree.insert_node(1,3,'r')
print(tree.print_tree("inorder"))
tree.insert_node(2,5,'l')
tree.insert_node(3,4,'l')
h=tree.height(tree.root)
print("Height is :",h)
# tree.root.left = Node(2)
# tree.root.right = Node(3)
# tree.root.left.left = Node(4)
# tree.root.left.right = Node(5)
# tree.root.right.left = Node(6)
# tree.root.right.right = Node(7)

print(tree.print_tree("inorder"))  # Output: 4-2-5-1-6-3-7
# print(tree.print_tree("preorder"))  # Output: 1-2-4-5-3-6-7
# print(tree.print_tree("postorder"))  # Output: 4-5-2-6-7-3-1
# tree.levelorder_traversal()
tree.max_value()
tree.min_value()```
17/04/23, 22:44 - Phoool Gobiiii  🎓: ```class Node:
    def __init__(self, value):
        self.data = value
        self.left = None
        self.right = None

class BST:
    def __init__(self, root):
        self.root = Node(root)

    def insert(self, value, start):
        if value == start.data:
            print("Duplicacy")
            return

        if value < start.data:
            if start.left:
                self.insert(value, start.left)
            else:
                start.left = Node(value)

        else:
            if start.right:
                self.insert(value, start.right)
            else:
                start.right = Node(value)

    def printtree(self):
        start = self.root
        trav = ""
        final = self.preorder(start, trav)
        print("Preorder: ", final)

    def preorder(self, start, trav):
        if start:
            trav += (str(start.data) + '-')
            trav = self.preorder(start.left, trav)
            trav = self.preorder(start.right, trav)
        return trav


def main():
    tree = BST(17)
    tree.insert(3, tree.root)
    tree.printtree()
    tree.insert(19, tree.root)
    tree.printtree()
    tree.insert(4, tree.root)
    tree.printtree()
    tree.insert(5, tree.root)
    tree.printtree()
    tree.insert(5, tree.root)
    tree.printtree()

main()


```
17/04/23, 23:36 - Phoool Gobiiii  🎓: ```class Queue:
    def __init__(self):
        self.queue = []
        self.index = 0
    def enque(self, val):
        in_sec = (val // 100) % 10
        flag = 0
        if len(self.queue) != 0:
            for i in range(0, len(self.queue)):
                check_sec = (self.queue[i] // 100) % 10
                if check_sec == in_sec:
                    self.queue.insert(i, val)
                    flag = 1
                    break
            if (flag != 1):
                self.queue.insert(0, val)
        else:
            self.queue.insert(0, val)
        self.sorting()

        # print(self.queue)

    def deque(self):

        if len(self.queue) != 0:
            # self.sorting()
            del_item = self.queue.pop()
            print(del_item)

    def mergesort(self, arr):
        if len(arr) <= 1:
            return arr
        else:
            mid = len(arr)//2
            l = arr[:mid]
            r = arr[mid:]
            l = self.mergesort(l)
            r = self.mergesort(r)
            return self.merge(l, r)
    def merge(self, l, r):
        i = 0
        j = 0
        a =[]
        while i < len(l) and j < len(r):
            if l[i] >= r[j]:
                a.append(l[i])
                i+=1
            else:
                a.append(r[j])
                j+=1
        while i < len(l):
            a.append(l[i])
            i += 1

        while j < len(r):
            a.append(r[j])
            j += 1

        return a

    def sorting(self):
        self.dict = {}
        self.dict[self.index] = []
        search = (self.queue[0] // 100) % 10
        self.dict[self.index].append(self.queue[0])
        for i in range(1, len(self.queue)):
            check = (self.queue[i] // 100) % 10
            if check == search:
                self.dict[self.index].append(self.queue[i])
            else:
                self.index += 1
                self.dict[self.index] = []
                self.dict[self.index].append(self.queue[i])
                search = check

        # print(dict)
        self.queue = []
        for key, value in self.dict.items():
            self.queue += self.mergesort(value)

        # print(self.queue)



q = Queue()
q.enque(521)
q.enque(301)
q.deque()
q.enque(310)
q.enque(505)
q.enque(540)
q.enque(500)
q.enque(305)
q.enque(325)
q.enque(320)
q.enque(300)
q.sorting()
q.deque()
q.deque()
q.deque()
q.deque()
q.deque()
q.deque()
q.deque()
q.deque()





# ENQUEUE 505
#
# ENQUEUE 540
#
# ENQUEUE 500
#
# ENQUEUE 305
#
# ENQUEUE 325
#
# ENQUEUE 320
#
# ENQUEUE 300






```
17/04/23, 23:44 - Sooorrrr 🎓: <Media omitted>
18/04/23, 00:25 - Sooorrrr 🎓: ```array=[1,4,8,2,6,3]
print(array)
for i in range(0,len(array)-1):
    for j in range(0,len(array)-i-1):
        if(array[j]>array[j+1]):
            array[j],array[j+1]=array[j+1],array[j]

print(array)
```
18/04/23, 00:26 - Sooorrrr 🎓: bubble sort
18/04/23, 00:30 - Sooorrrr 🎓: Time complexity refers to the amount of time it takes for an algorithm to run as a function of the size of the input. Counting sort is a linear time sorting algorithm, which means that its time complexity grows linearly with the size of the input.

The time complexity of counting sort can be derived as follows:

Counting the frequency of each element in the input: In this step, we iterate through the input array once, and for each element, we increment its corresponding count in the count array. This step takes O(n) time, where n is the size of the input array.
Computing the prefix sums: In this step, we iterate through the count array once, and for each element, we add the value of the previous element to it. This step takes O(k) time, where k is the range of the input values.
Building the output array: In this step, we iterate through the input array once, and for each element, we use its count to determine its position in the output array. This step takes O(n) time.
Therefore, the overall time complexity of counting sort is O(n+k), where n is the size of the input array and k is the range of the input values.

It's important to note that counting sort requires extra space to store the count and prefix sum arrays, which adds to the space complexity of the algorithm. However, the space complexity of counting sort is also O(n+k), which is linear with respect to the size of the input.
18/04/23, 07:51 - Phoool Gobiiii  🎓: ```    def searchNode(self, temp, value):
        if self.root == None:
            print("Tree is empty")

        else:
            if temp.data == value:
                self.flag = True
                self.val = temp
                return

            if self.flag == False and temp.left != None:
                self.searchNode(temp.left, value)

            if self.flag == False and temp.right != None:
                self.searchNode(temp.right, value)```
18/04/23, 08:47 - Harecharan CSE E Amrita CBE: <Media omitted>
18/04/23, 08:50 - Harecharan CSE E Amrita CBE: Certainly! Here's a detailed explanation for each of the time complexities (best case, worst case, and average case) for the sorting algorithms mentioned in the table:

Radix Sort:
Worst Case Time Complexity: O(d * (n + k)) - This occurs when all the input numbers have the same number of digits (d) and need to be sorted at each digit's position. In this case, Radix Sort needs to go through all the n elements for each of the d digits, resulting in a time complexity of O(d * (n + k)), where k is the range of input values.
Best Case Time Complexity: O(d * (n + k)) - This occurs when all the input numbers have the same number of digits (d) and the values are uniformly distributed across the range (k). In this case, Radix Sort still needs to go through all the n elements for each of the d digits, resulting in a time complexity of O(d * (n + k)).
Average Case Time Complexity: O(d * (n + k)) - Radix Sort's time complexity remains the same for the average case as well. It requires going through all the n elements for each of the d digits, resulting in a time complexity of O(d * (n + k)).
Merge Sort:
Worst Case Time Complexity: O(n log n) - This occurs when the input array is completely unsorted, and the merge step needs to be performed at each level of the recursion. In this case, Merge Sort has a time complexity of O(n log n).
Best Case Time Complexity: O(n log n) - This occurs when the input array is already sorted or nearly sorted, and the merge step can be skipped for most of the levels of recursion due to the merging of smaller sorted arrays. In this case, Merge Sort still has a time complexity of O(n log n).
Average Case Time Complexity: O(n log n) - Merge Sort's time complexity remains the same for the average case as well. It requires merging sorted arrays at each level of the recursion, resulting in a time complexity of O(n log n).
Counting Sort:
Worst Case Time Complexity: O(n + k) - This occurs when the input array has a wide range of input values (k), resulting in a larger counting array. In this case, Counting Sort has a time complexity of O(n + k), as it needs to count the occurrences of each element in the input array and then place them in their correct sorted position.
Best Case Time Complexity: O(n + k) - This occurs when the input array has a narrow range of input values (k), resulting in a smaller counting array. In this case, Counting Sort still has a time complexity of O(n + k), as it needs to count the occurrences of each element in the input array and then place them in their correct sorted position.
Average Case Time Complexity: O(n + k) - Counting Sort's time complexity remains the same for the average case as well. It requires counting the occurrences of each element in the input array and then placing them in their correct sorted position, resulting in a time complexity of O(n + k).
Bubble Sort:
Worst Case Time Complexity: O(n^2) - This occurs when the input array is completely unsorted, and multiple swaps are required for each element to reach its correct sorted position. In this case, Bubble Sort has a time complexity of O(n^2), as it needs to compare and swap adjacent elements multiple times.
Best Case Time Complexity: O(n) - This occurs when the input array is already sorted, and no swaps are required. In this case, Bubble Sort has a time



harecharan321@gmail.com
continue 
complexity of O(n), as it needs to compare adjacent elements once and determine that they are already sorted.

Average Case Time Complexity: O(n^2) - Bubble Sort's average time complexity is O(n^2) as well, as it requires multiple swaps for each element on average to reach its correct sorted position.
Selection Sort:
Worst Case Time Complexity: O(n^2) - This occurs when the input array is completely unsorted, and multiple comparisons and swaps are required for each element to reach its correct sorted position. In this case, Selection Sort has a time complexity of O(n^2), as it needs to compare and swap elements multiple times.
Best Case Time Complexity: O(n^2) - Unfortunately, Selection Sort's best case time complexity is still O(n^2), as it always requires scanning the entire unsorted part of the array to find the minimum or maximum element, even if the array is already sorted.
Average Case Time Complexity: O(n^2) - Selection Sort's average time complexity is O(n^2) as well, as it requires multiple comparisons and swaps on average for each element to reach its correct sorted position.
Quick Sort:
Worst Case Time Complexity: O(n^2) - This occurs when the input array is already sorted or nearly sorted, and the pivot chosen is either the minimum or maximum element. In this case, Quick Sort has a time complexity of O(n^2), as it results in highly imbalanced partitions and requires a large number of recursive calls and comparisons.
Best Case Time Complexity: O(n log n) - This occurs when the pivot chosen is the median element, resulting in balanced partitions at each level of recursion. In this case, Quick Sort has a time complexity of O(n log n), which is the best possible time complexity for comparison-based sorting algorithms.
Average Case Time Complexity: O(n log n) - Quick Sort's average time complexity is O(n log n), as it is expected to choose a reasonably good pivot on average, resulting in balanced partitions at each level of recursion.
Insertion Sort:
Worst Case Time Complexity: O(n^2) - This occurs when the input array is completely unsorted, and multiple comparisons and swaps are required for each element to reach its correct sorted position. In this case, Insertion Sort has a time complexity of O(n^2), as it needs to compare and swap elements multiple times.
Best Case Time Complexity: O(n) - This occurs when the input array is already sorted, and no swaps are required. In this case, Insertion Sort has a time complexity of O(n), as it needs to compare adjacent elements once and determine that they are already sorted.
Average Case Time Complexity: O(n^2) - Insertion Sort's average time complexity is O(n^2) as well, as it requires multiple comparisons and swaps on average for each element to reach its correct sorted position.
In summary, while the best case time complexity for some of the sorting algorithms is better than the worst and average case time complexity, most of the sorting algorithms have a worst and average case time complexity of O(n^2), except for Radix Sort and Quick Sort, which have a better average time complexity of O(n + k) and O(n log n) respectively. It's important to consider the time complexity of a sorting algorithm when choosing the appropriate sorting algorithm for a particular use case or input data.
18/04/23, 09:00 - Harecharan CSE E Amrita CBE: Sure! I can provide you with algorithms for various sorting techniques. Please note that these are high-level pseudo-code algorithms and not actual code in any specific programming language.

Bubble Sort Algorithm:
vbnet
Copy code
Algorithm: Bubble Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. Start from the first element of the array.
2. Compare it with the next element.
3. If the current element is greater than the next element, swap them.
4. Move to the next element.
5. Repeat steps 2-4 until the end of the array.
6. After the first pass, the largest element will be at the end of the array.
7. Repeat steps 1-6 for n-1 passes, where n is the number of elements in the array.
8. The array is now sorted in ascending order.
Selection Sort Algorithm:
vbnet
Copy code
Algorithm: Selection Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. Start from the first element of the array.
2. Assume it to be the minimum element.
3. Compare it with the next element.
4. If a smaller element is found, update the minimum element.
5. Move to the next element.
6. Repeat steps 3-5 until the end of the array.
7. Swap the minimum element with the element at the beginning of the unsorted part of the array.
8. Move the boundary of the sorted and unsorted parts of the array one element to the right.
9. Repeat steps 2-8 for n-1 passes, where n is the number of elements in the array.
10. The array is now sorted in ascending order.
Insertion Sort Algorithm:
vbnet
Copy code
Algorithm: Insertion Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. Start from the second element of the array.
2. Pick the element and compare it with the previous element.
3. If the element is smaller, swap it with the previous element.
4. Continue swapping until the element is in its correct sorted position.
5. Move to the next element.
6. Repeat steps 2-5 until the end of the array.
7. The array is now sorted in ascending order.
Merge Sort Algorithm:
sql
Copy code
Algorithm: Merge Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. If the array has only one element, return it as it is already sorted.
2. Divide the array into two halves.
3. Recursively apply merge sort on both halves.
4. Merge the two sorted halves to obtain a single sorted array.
5. Repeat steps 2-4 until the entire array is sorted.
6. The array is now sorted in ascending order.
Quick Sort Algorithm:
sql
Copy code
Algorithm: Quick Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. If the array has fewer than two elements, return it as it is already sorted.
2. Choose a pivot element from the array.
3. Partition the array such that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right.
4. Recursively apply quick sort on the left and right partitions.
5. The array is now sorted in ascending order.
These are some of the commonly used sorting algorithms. There are many other sorting algorithms as well, but these are the basic ones. Please note that these algorithms can be optimized further for performance and memory usage in actual implementation.




harecharan321@gmail.com
radix, counting?
Sure! Here are the algorithms for Radix Sort and Counting Sort:

Radix Sort Algorithm:
sql
Copy code
Algorithm: Radix Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. Find the maximum element in the array to determine the number of digits in the maximum element.
2. Initialize a count array of size 10 (assuming base 10) to store counts for each digit (0-9).
3. For each digit position from the least significant digit to the most significant digit:
    a. Traverse the array and count the occurrences of each digit at the current digit position, and store the counts in the count array.
    b. Modify the count array to contain cumulative counts, i.e., the count of each digit should be updated to the sum of itself and the count of the previous digit.
4. Create a temporary output array of the same size as the input array.
5. Starting from the last digit position:
    a. Traverse the array from the end to the beginning.
    b. For each element, find its corresponding digit at the current digit position.
    c. Use the count array to determine the correct position of the element in the output array based on its digit.
    d. Decrease the count of the corresponding digit in the count array.
    e. Place the element at the determined position in the output array.
6. Copy the sorted elements from the output array to the input array.
7. Repeat steps 3-6 for all digit positions.
8. The array is now sorted in ascending order.
Counting Sort Algorithm:
sql
Copy code
Algorithm: Counting Sort
Input: An array of n elements
Output: Array sorted in ascending order

1. Find the maximum element in the array to determine the range of elements.
2. Create a count array of size equal to the range of elements.
3. Traverse the input array and count the occurrences of each element, storing the counts in the count array.
4. Modify the count array to contain cumulative counts, i.e., the count of each element should be updated to the sum of itself and the count of the previous element.
5. Create a temporary output array of the same size as the input array.
6. Traverse the input array:
    a. For each element, find its count in the count array.
    b. Use the count array to determine the correct position of the element in the output array.
    c. Decrease the count of the element in the count array.
    d. Place the element at the determined position in the output array.
7. Copy the sorted elements from the output array to the input array.
8. The array is now sorted in ascending order.
Note: Radix Sort is a non-comparative sorting algorithm that is particularly useful for sorting elements with multiple digits or keys with multiple properties. Counting Sort is an integer sorting algorithm that is efficient when the range of input elements is small compared to the number of elements. Both Radix Sort and Counting Sort have linear time complexity, making them efficient sorting algorithms for specific use cases.
18/04/23, 09:53 - Viswaa Ramasubramanian: <Media omitted>
18/04/23, 09:58 - Sooorrrr 🎓: ```#counting sort
# def counting_sort(arr):
#     m=max(arr)
#     count=(m+1)*[0]
#     for i in range(len(arr)):
#         count[arr[i]]+=1
#
#     for i in range(1,m+1):
#         count[i]=count[i]+count[i-1]
#
#     sorted_arr=[0]*(len(arr))
#     for i in range(len(arr)-1,-1,-1):
#         index=arr[i]
#         count[index]=count[index]-1
#         sorted_arr[count[index]]=index
#
#     print(sorted_arr)
#
# arr=[1,4,1,2,7,5,2]
# counting_sort(arr)

#radix sort

# def radix_sort(arr):
#     print(arr)
#     m=max(arr)
#     digit=1
#     while m//digit > 0:
#         bucket_arr=[]
#         for i in range(10):
#             bucket_arr.append([])
#
#         for i in range(len(arr)):
#             index=arr[i]//digit
#             bucket_arr[index%10].append(arr[i])
#
#         arr=[]
#         for cont in bucket_arr:
#             for ele in cont:
#                 arr.append(ele)
#         digit=digit*10
#     print(arr)
#
# arr = [170, 45, 75, 90, 802, 24, 2, 66]
# radix_sort(arr)


#merge sort
# def merge_sort(arr):
#     if len(arr)>1:
#         mid=len(arr)//2
#         L=arr[:mid]
#         R=arr[mid:]
#
#         merge_sort(L)
#         merge_sort(R)
#
#         i=j=k=0
#
#         while i<len(L) and j<len(R):
#
#             if L[i]<R[j]:
#                 arr[k]=L[i]
#                 i=i+1
#
#
#             else:
#                 arr[k]=R[j]
#                 j=j+1
#
#             k=k+1
#
#         while i<len(L):
#             arr[k]=L[i]
#             i=i+1
#             k=k+1
#
#         while j<len(R):
#             arr[k]=R[j]
#             j=j+1
#             k=k+1
#
# array=[38,27,43,3,9,82,10]
# print(array)
# merge_sort(array)
# print(array)

#bubble sort
# def bubble_sort(arr):
#     for i in range(len(arr)):
#         for j in range(len(arr)-i-1):
#             if(arr[j]>arr[j+1]):
#                 arr[j],arr[j+1]=arr[j+1],arr[j]
#     print(arr)
#
# array=[1,4,8,2,6,3]
# bubble_sort(array)

#selection sort
# def selection_sort(arr):
#     for i in range(len(arr)-1):
#         min=i
#         for j in range(i+1,len(arr)):
#             if(arr[min]>arr[j]):
#                 min=j
#
#         arr[min],arr[i]=arr[i],arr[min]
#     print(arr)
#
# array=[1,4,8,2,6,3]
# selection_sort(array)

#insertion sort
# def insertion_sort(arr):
#     for i in range(1,len(arr)):
#         temp=arr[i]
#         j=i-1
#         while j>=0 and temp<arr[j]:
#             arr[j+1]=arr[j]
#             j-=1
#         arr[j+1]=temp
#
#     print(arr)
#
# array=[1,4,8,2,6,3]
# insertion_sort(array)

# #quick sort
# def quick_sort(arr):
#     def partition(arr,low,high):
#         pivot=arr[high]
```
18/04/23, 10:02 - Sanjuuu 🎓: max heap
18/04/23, 10:02 - Sanjuuu 🎓: class maxHeap:
    def __init__(self, val):
        self.data = val
        self.right = None
        self.left = None
        
    def insert(self, data):
        if self.data is None:
            self.data = data
        else:
            if data > self.data:
                temp = self.data
                self.data = data
                data = temp
            if self.left is None:
                self.left = maxHeap(data)
            elif self.right is None:
                self.right = maxHeap(data)
            else:
                if self.left.count() <= self.right.count():
                    self.left.insert(data)
                else:
                    self.right.insert(data)
                    
    def delete(self, data):
        if self.data == data:
            if self.left is None and self.right is None:
                self.data = None
            elif self.left is None:
                self.data = self.right.data
                self.left = self.right.left
                self.right = self.right.right
            elif self.right is None:
                self.data = self.left.data
                self.right = self.left.right
                self.left = self.left.left
            else:
                if self.left.count() > self.right.count():
                    max_child = self.left.get_max()
                    self.data = max_child.data
                    self.left.delete(max_child.data)
                else:
                    max_child = self.right.get_max()
                    self.data = max_child.data
                    self.right.delete(max_child.data)
        else:
            if self.left is not None:
                self.left.delete(data)
            if self.right is not None:
                self.right.delete(data)
                
    def search(self, val):
        if self.data == val:
            return True
        elif self.left is not None and self.left.search(val):
            return True
        elif self.right is not None and self.right.search(val):
            return True
        else:
            return False
    
    def printHeap(self, data):
        if self.left is not None:
            self.left.printHeap(data + "\t")
        print(data + str(self.data))
        if self.right is not None:
            self.right.printHeap(data + "\t")
    
    def count(self):
        count = 1
        if self.left is not None:
            count += self.left.count()
        if self.right is not None:
            count += self.right.count()
        return count
    
    def get_max(self):
        if self.right is None:
            return self
        else:
            return self.right.get_max()
18/04/23, 10:25 - Sanjuuu 🎓: # create a new max heap with a root value of 5
heap = maxHeap(5)

# insert some values into the heap
heap.insert(8)
heap.insert(2)
heap.insert(12)
heap.insert(3)
heap.insert(9)
heap.insert(1)
heap.insert(45)
heap.insert(23)
heap.insert(91)
heap.insert(100)

# print the contents of the heap
heap.printHeap("->")

# delete a value from the heap
heap.delete(5)

# print the contents of the heap again
heap.printHeap("")

# search for a value in the heap
if heap.search(9):
    print("9 is in the heap")
else:
    print("9 is not in the heap")
18/04/23, 10:27 - Sooorrrr 🎓: class PriorityQueue:
    def __init__(self):
        self.heap = []

    def parent(self, i):
        return (i - 1) // 2

    def left(self, i):
        return 2 * i + 1

    def right(self, i):
        return 2 * i + 2

    def swap(self, i, j):
        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]

    def push(self, x):
        self.heap.append(x)
        i = len(self.heap) - 1
        while i > 0 and self.heap[self.parent(i)] > self.heap[i]:
            self.swap(i, self.parent(i))
            i = self.parent(i)

    def pop(self):
        if not self.heap:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        root = self.heap[0]
        self.heap[0] = self.heap.pop()
        i = 0
        while (self.left(i) < len(self.heap) and self.heap[i] > self.heap[self.left(i)]) or \
                (self.right(i) < len(self.heap) and self.heap[i] > self.heap[self.right(i)]):
            if self.right(i) < len(self.heap) and self.heap[self.right(i)] < self.heap[self.left(i)]:
                self.swap(i, self.right(i))
                i = self.right(i)
            else:
                self.swap(i, self.left(i))
                i = self.left(i)
        return root

    def peek(self):
        return self.heap[0] if self.heap else None

    def __len__(self):
        return len(self.heap)
18/04/23, 10:59 - Shesadriii 🎓: <Media omitted>
18/04/23, 11:02 - Sanjuuu 🎓: <Media omitted>
18/04/23, 19:12 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:26 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:27 - Sanjuuu 🎓: <Media omitted>
18/04/23, 19:27 - Sanjuuu 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:30 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:31 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:31 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:31 - Sooorrrr 🎓: <Media omitted>
18/04/23, 19:31 - Sooorrrr 🎓: <Media omitted>
18/04/23, 21:00 - Sooorrrr 🎓: <Media omitted>
18/04/23, 21:15 - Harecharan CSE E Amrita CBE: <Media omitted>
18/04/23, 22:04 - Sooorrrr 🎓: In terms of expressive power, Nondeterministic Finite Automata (NFAs) are more expressive than Deterministic Finite Automata (DFAs), meaning that NFAs can recognize a larger class of languages than DFAs.

This is because an NFA can have multiple possible transitions for a given input symbol, while a DFA can have at most one transition for each input symbol in each state. This allows an NFA to "guess" the correct path to take when recognizing a language, and to explore multiple possible paths in parallel.

However, in terms of efficiency, DFAs are generally more efficient than NFAs for recognizing regular languages. This is because DFAs can be implemented more efficiently and require less memory than NFAs.

In practice, most regular expression engines use NFAs internally because they are more convenient to work with and allow for more expressive patterns, but they typically convert the NFA to a DFA for efficient matching of larger inputs
18/04/23, 22:22 - Sooorrrr 🎓: L(r1 + r2) = L(r1) ∪ L(r2): This property states that the language recognized by the regular expression r1 + r2 is the union of the languages recognized by r1 and r2. In other words, if a string is recognized by either r1 or r2, it is in the language recognized by r1 + r2. For example, if r1 = "ab" and r2 = "cd", then the language recognized by r1 + r2 is {ab, cd}.
L(r1 · r2) = L(r1)L(r2): This property states that the language recognized by the regular expression r1 · r2 is the concatenation of the languages recognized by r1 and r2. In other words, if a string can be split into two substrings, one recognized by r1 and the other recognized by r2, then the string is in the language recognized by r1 · r2. For example, if r1 = "a" and r2 = "b", then the language recognized by r1 · r2 is {ab}.
L((r1)) = L(r1): This property states that adding parentheses around a regular expression does not change the language recognized by that expression. In other words, if r1 recognizes a language L, then adding parentheses around r1 does not change L. For example, if r1 = "a+b", then the language recognized by (r1) is the same as the language recognized by r1, which is the set of all strings that contain either an "a" or a "b".
L(r1) = (L(r1)): This property states that the language recognized by the regular expression r1 is the Kleene closure of the language recognized by r1. The Kleene closure of a language L is the set of all strings that can be formed by concatenating any number of strings from L, including the empty string. In other words, if a string can be formed by concatenating any number of strings from the language recognized by r1, including none at all, then it is in the language recognized by r1. For example, if r1 = "ab", then the language recognized by r*1 is {ε, ab, abab, ababab, ...}, where ε represents the empty string.



Surya NS
7. L(r ∗ 1 ) = (L(r1))∗  Explain this
This equation is a property of regular expressions and it states that the language recognized by the regular expression r1 is equal to the Kleene closure of the language recognized by r1, that is (L(r1)).

The regular expression r1 means that we can either have zero or more repetitions of r, followed by a single occurrence of the symbol "1". In other words, any string in the language recognized by r1 can be split into two parts: a prefix consisting of zero or more strings recognized by r1, and a suffix consisting of the single symbol "1".

The Kleene closure of a language L, denoted by L*, is the set of all strings that can be formed by concatenating any number of strings from L, including the empty string. So, (L(r1))* represents the set of all strings that can be formed by concatenating any number of strings recognized by r1, including the empty string.

Therefore, L(r1) is the set of all strings that can be formed by concatenating zero or more strings recognized by r1, followed by the symbol "1". This set is equal to (L(r1)) because any string in L(r*1) can be formed by concatenating any number of strings recognized by r1 (including none), followed by the symbol "1", which is exactly the definition of the Kleene closure of L(r1).

For example, if r1 is the regular expression "a+b", then L(r1) is the set of all strings that contain either "a" or "b". L(r1) is the set of all strings that can be formed by concatenating zero or more strings that contain either "a" or "b", followed by the symbol "1". This includes strings such as "1", "a1", "b1", "aa1", "ab1", "ba1", "bb1", and so on. On the other hand, (L(r1)) is the set of all strings that can be formed by concatenating any number of strings that contain either "a" or "b", including the empty string.
18/04/23, 23:40 - Sooorrrr 🎓: Thompson's rule is a method for constructing a non-deterministic finite automaton (NFA) from a regular expression. The rule states that for any regular expression R, we can construct an NFA with a single initial state and a single final state that recognizes the language represented by R.

The construction of the NFA using Thompson's rule involves the following steps:

If R is the empty string or the symbol "epsilon", construct an NFA with a single initial and final state connected by an epsilon transition.
If R is a single symbol (a), construct an NFA with two states: an initial state connected to a final state by a transition labeled with "a".
If R is the concatenation of two regular expressions R1 and R2, construct NFAs for R1 and R2 using Thompson's rule. Then, add an epsilon transition from the final state of R1 to the initial state of R2, and combine the two NFAs into a single NFA with the initial state of R1 as the initial state and the final state of R2 as the final state.
If R is the union of two regular expressions R1 and R2, construct NFAs for R1 and R2 using Thompson's rule. Then, create a new initial state and add epsilon transitions from this state to the initial states of R1 and R2. Also, create a new final state and add epsilon transitions from the final states of R1 and R2 to this state. The resulting NFA has the new initial state as its initial state and the new final state as its final state.
If R is the Kleene star of a regular expression R1, construct an NFA for R1 using Thompson's rule. Then, add epsilon transitions from the final state of R1 to the initial state of R1, and from the new initial state to the new final state. Finally, make the initial state of R1 and the final state of R1 both accept states.
Thompson's rule provides a simple and systematic way to construct an NFA for any regular expression, which can then be transformed into a deterministic finite automaton (DFA) if needed. This is a fundamental technique in the theory of formal languages and automata.
18/04/23, 23:41 - Sooorrrr 🎓: Sure, let's say we want to construct an NFA for the regular expression R = (a+b)*c. We can apply Thompson's rule to construct the NFA as follows:

R = (a+b)*c is not the empty string or epsilon, so we proceed to step 2.
R is a concatenation of two regular expressions, (a+b)* and c. We apply Thompson's rule to each sub-expression to construct NFAs for (a+b)* and c.
NFA for (a+b)*:
Initial state connected to a final state by an epsilon transition.
A loop on the final state labeled with (a+b).
NFA for c:
Two states, an initial state connected to a final state by a transition labeled with c.
We add an epsilon transition from the final state of (a+b)* to the initial state of c, and combine the two NFAs into a single NFA with the initial state of (a+b)* as the initial state and the final state of c as the final state.
The resulting NFA for R = (a+b)c has three states: an initial state, an intermediate state, and a final state. The initial state is connected to the intermediate state by epsilon transitions labeled with (a+b), and the intermediate state is connected to the final state by a transition labeled with c.

This NFA recognizes the language L(R) = {w | w is a string over {a, b, c} that ends with c}. We can convert this NFA to a DFA using the subset construction algorithm to obtain a deterministic finite automaton that recognizes the same language.
19/04/23, 01:17 - Sooorrrr 🎓: <Media omitted>
19/04/23, 01:19 - Sooorrrr 🎓: <Media omitted>
19/04/23, 01:30 - Sooorrrr 🎓: <Media omitted>
19/04/23, 07:26 - Araviiii 🎓: <Media omitted>
19/04/23, 11:56 - Harecharan CSE E Amrita CBE: <Media omitted>
19/04/23, 12:01 - Sanjuuu 🎓: <Media omitted>
19/04/23, 12:17 - Gannu: <Media omitted>
19/04/23, 12:31 - Shesadriii 🎓: Yappa dei
19/04/23, 12:31 - Shesadriii 🎓: IT canteen khalas
19/04/23, 16:31 - Sooorrrr 🎓: This message was deleted
19/04/23, 16:32 - Sooorrrr 🎓: ```#include <stdio.h>
#define MAX 100

typedef struct{
    int pid;//it has the process id of the process
    int burst_time;//it has the amount of time needed to execute the process
    int remaining_time;//it has the amount of time remaining after context switch
    int arrival_time;//it is the time at which the process in the ready queue
}Process;

int main(){
    int n; //Number of processes
    int quantum; //time slice
    int i,j;// used in loops
    int current_time=0;//it keeps track of the current time
    int remaining_processes;//it keeps track of the remaining processes
    Process processes[MAX];// array of process structures
    int completion_time[MAX];//array of completion times
    printf("Enter the number of processes");
    scanf("%d",&n);
    
    printf("Enter the burst time and arrival time of each process");
    for(i=0;i<n;i++){
        printf("Process id: %d\n",i);
        printf("Enter burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("\n");
        printf("Enter arrival time: \n");
        scanf("%d", &processes[i].arrival_time);
        processes[i].pid=i;
        processes[i].remaining_time=processes[i].burst_time;

    }

    printf("Enter the time slice for the round robin scheduling");
    scanf("%d",&quantum);

    remaining_processes=n;// we are assigning the remaining process to the total number of process to be executed

    while(remaining_processes>0){
        for(i=0;i<n;i++){
            if(processes[i].remaining_time>0 && processes[i].arrival_time<=current_time){//checking whether the process has any remaining time and checking if the process has arrived to the ready queue
                int execution_time;// this is for the amount of time the process executes in that particular time slice
                if(quantum<processes[i].remaining_time){
                    execution_time=quantum;
                }
                else{
                    execution_time=processes[i].remaining_time;
                }
                processes[i].remaining_time=processes[i].remaining_time-execution_time;//remaining process time calculation
                current_time=current_time+execution_time;//current time calculation
                if(processes[i].remaining_time==0){// to check if process has completed
                    completion_time[processes[i].pid]=current_time;//completion time calculation
                    remaining_processes=remaining_processes-1;
                }
            }
        }
    }

    printf("Completion times:\n");

    for(int i=0; i<n;i++){
        printf("Process %d:%d\n",i,completion_time[i]);
    }
    return 0;
}```
19/04/23, 16:32 - Sooorrrr 🎓: Round robin
19/04/23, 16:32 - Sooorrrr 🎓: ```#include <stdio.h>
#include <stdlib.h>
// we assume that the arrival time is 0 for all these processes
int main(){
    int n,i,j;
  
    float avg_wt=0,avg_tat=0;//average waiting and turnaround time
    float total_wt=0,total_tat=0;//total
    printf("Enter the number of processes");
    scanf("%d",&n);

    int burst_time[n],wait_time[n],tat[n];
    int completion_time[n];

    for(int i=0;i<n;i++){
        printf("Enter the burst time of  process %d",i+1);
        scanf("%d",&burst_time[i]);
    }

    //sorting the burst times in ascending order
    for(i=0;i<n-1;i++) {  //sorting the burst times
        for(j=0;j<n-i-1;j++) {
            if(burst_time[j]>burst_time[j+1]){
                int temp=burst_time[j];
                burst_time[j]=burst_time[j+1];
                burst_time[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++) {
        printf("%d",burst_time[i]);
    }
    wait_time[0]=0;
    tat[0]=burst_time[0];
    completion_time[0]=tat[0];
    //calculating the waiting time for all processes
    for(int i=1;i<n;i++) {
        wait_time[i]=wait_time[i-1]+burst_time[i-1];
        tat[i]=wait_time[i]+burst_time[i];
        completion_time[i]=tat[i];
    }

    //calculating the total waiting time and  tat
    for(int i=0;i<n;i++) {
        total_tat+=(tat[i]);
        total_wt+=(wait_time[i]);
    }

    //calculating the average waiting time and average
    avg_wt=total_wt/n;
    avg_tat=total_tat/n;
    
    //printing the waiting times 
    for(int i=0;i<n;i++) {
        
        printf("PID : %d,Burst time:%d,Wait time: %d,Completion time: %d",i+1,burst_time[i],wait_time[i],completion_time[i]);
        printf("\n");
    }

}```
19/04/23, 16:33 - Viswaa Ramasubramanian: ```#include <stdio.h>

// Process structure
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
};

int main() {
    int n, i;
    float total_wait_time = 0, total_turnaround_time = 0;
    struct Process processes[50]; // Array of processes
    int wait_time[50] = {0}; // Array to store waiting times
    int turnaround_time[50] = {0}; // Array to store turnaround times
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    printf("Enter the arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
    }

    // Sort processes by arrival time
    for (i = 0; i < n-1; i++) {
        int j;
        for (j = 0; j < n-i-1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time for each process
    wait_time[0] = 0;
    turnaround_time[0] = processes[0].burst_time;
    for (i = 1; i < n; i++) {
        wait_time[i] = processes[i-1].arrival_time+processes[i-1].burst_time+wait_time[i-1] - processes[i].arrival_time;
		if(wait_time[i]<0){
                wait_time[i]=0;
        }
        turnaround_time[i] = wait_time[i] + processes[i].burst_time;
    }

    // Calculate total waiting time and turnaround time
    for (i = 0; i < n; i++) {
        total_wait_time += wait_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, wait_time[i], turnaround_time[i]);
    }
    printf("Average Waiting Time: %.2f\n", total_wait_time/n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);

    return 0;
}```
19/04/23, 16:33 - Sooorrrr 🎓: SJF without arrival time
19/04/23, 16:33 - Sooorrrr 🎓: ```#With arrival time
#include<stdio.h>
#include<stdlib.h>

struct process {
    int pid;        // process ID
    int bt;         // burst time
    int at;         // arrival time
};

void swap(struct process* a, struct process* b) {
    struct process temp = *a;
    *a = *b;
    *b = temp;
}

void sort(struct process* p, int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (p[j].at > p[j+1].at) {
                swap(&p[j], &p[j+1]);
            }
        }
    }
}

void sjf(struct process* p, int n) {
    int i, j, total_time = 0, avg_wt = 0, avg_tat = 0;
    printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");

    // sort the processes based on their arrival time
    sort(p, n);

    for (i = 0; i < n; i++) {
        int min_bt = p[i].bt, idx = i;
        for (j = i+1; j < n; j++) {
            if (p[j].at <= total_time && p[j].bt < min_bt) {
                min_bt = p[j].bt;
                idx = j;
            }
        }
        total_time += p[idx].bt;
        int wt = total_time - p[idx].at - p[idx].bt;
        int tat = total_time - p[idx].at;
        avg_wt += wt;
        avg_tat += tat;
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[idx].pid, p[idx].bt, p[idx].at, wt, tat);
        swap(&p[i], &p[idx]);
    }

    avg_wt /= n;
    avg_tat /= n;
    printf("\nAverage Waiting Time: %d", avg_wt);
    printf("\nAverage Turnaround Time: %d\n", avg_tat);
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process* p = (struct process*) malloc(n * sizeof(struct process));
    printf("Enter the burst time and arrival time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("P%d: ", i+1);
        scanf("%d %d", &p[i].bt, &p[i].at);
        p[i].pid = i+1;
    }
    sjf(p, n);
    return 0;
}```
19/04/23, 16:34 - Sooorrrr 🎓: SJF with arrival time
19/04/23, 16:34 - Sooorrrr 🎓: ```#include <stdio.h>
#include <stdbool.h>

// Structure to hold process details
typedef struct process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    bool completed;
} process;

int main() {
    int n, i, j, time = 0, min_index;
    float total_turnaround_time = 0, total_waiting_time = 0;

    // Get number of processes from user
    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Create an array of processes
    process p[n];

    // Get process details from user
    for (i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i+1);
        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);
        p[i].id = i+1;
        p[i].remaining_time = p[i].burst_time;
        p[i].completed = false;
    }

    printf("\nPreemptive SJF schedule:\n\n");

    // Run Preemptive SJF scheduling algorithm
    while (true) {
        min_index = -1;
        int min_burst_time = 999999;
        for (i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && p[i].remaining_time < min_burst_time && !p[i].completed) {
                min_burst_time = p[i].remaining_time;
                min_index = i;
            }
        }
        if (min_index == -1) {
            break;
        }
        printf("P%d ", p[min_index].id);
        time++;
        p[min_index].remaining_time--;
        if (p[min_index].remaining_time == 0) {
            p[min_index].completed = true;
            total_turnaround_time += time - p[min_index].arrival_time;
            total_waiting_time += time - p[min_index].arrival_time - p[min_index].burst_time;
        }
    }

    // Calculate and print average turnaround time and waiting time
    float avg_turnaround_time = total_turnaround_time / n;
    float avg_waiting_time = total_waiting_time / n;
    printf("\n\nAverage Turnaround Time: %0.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %0.2f\n", avg_waiting_time);

    return 0;
}```
19/04/23, 16:34 - Sooorrrr 🎓: SRTF
19/04/23, 16:34 - Sooorrrr 🎓: ```#include<stdio.h>
int main()
{
    int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter Total Number of Process:");
    scanf("%d",&n);

    printf("\\nEnter Burst Time and Priority\\n");
    for(i=0;i<n;i++)
    {
        printf("\\nP[%d]\\n",i+1);
        printf("Burst Time:");
        scanf("%d",&bt[i]);
        printf("Priority:");
        scanf("%d",&pr[i]);
        p[i]=i+1;
    }

    //sorting burst times, priority and process number in ascending order using selection sort
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
                pos=j;
        }

        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;

        temp=bt[i];
        bt```
19/04/23, 16:34 - Sooorrrr 🎓: Priority without arrival time
19/04/23, 16:35 - Sooorrrr 🎓: ```#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;        // process ID
    int bt;         // burst time
    int at;         // arrival time
    int priority;   // priority
} Process;

void swap(Process* a, Process* b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort(Process* p, int n) {
    int i, j;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (p[j].priority < p[j+1].priority) {
                swap(&p[j], &p[j+1]);
            } else if (p[j].priority == p[j+1].priority && p[j].at > p[j+1].at) {
                swap(&p[j], &p[j+1]);
            }
        }
    }
}

void priorityScheduling(Process* p, int n) {
    int i, j, total_time = 0, avg_wt = 0, avg_tat = 0;
    printf("Process\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");

    // sort the processes based on their priority and arrival time
    sort(p, n);

    for (i = 0; i < n; i++) {
        total_time += p[i].bt;
        int wt = total_time - p[i].at - p[i].bt;
        int tat = total_time - p[i].at;
        avg_wt += wt;
        avg_tat += tat;
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].bt, p[i].at, p[i].priority, wt, tat);
    }

    avg_wt /= n;
    avg_tat /= n;
    printf("\nAverage Waiting Time: %d", avg_wt);
    printf("\nAverage Turnaround Time: %d\n", avg_tat);
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process* p = (Process*) malloc(n * sizeof(Process));
    printf("Enter the burst time, arrival time, and priority for each process:\n");
    for (i = 0; i < n; i++) {
        printf("P%d: ", i+1);
        scanf("%d %d %d", &p[i].bt, &p[i].at, &p[i].priority);
        p[i].pid = i+1;
    }
    priorityScheduling(p, n);
    return 0;
}```
19/04/23, 16:35 - Sooorrrr 🎓: Priority
19/04/23, 16:35 - Sooorrrr 🎓: #include <stdio.h>

// Process structure
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
};

int main() {
    int n, i;
    float total_wait_time = 0, total_turnaround_time = 0;
    struct Process processes[50]; // Array of processes
    int wait_time[50] = {0}; // Array to store waiting times
    int turnaround_time[50] = {0}; // Array to store turnaround times
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    printf("Enter the arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
    }

    // Sort processes by arrival time
    for (i = 0; i < n-1; i++) {
        int j;
        for (j = 0; j < n-i-1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time for each process
    wait_time[0] = 0;
    turnaround_time[0] = processes[0].burst_time;
    for (i = 1; i < n; i++) {
        wait_time[i] = processes[i-1].arrival_time+processes[i-1].burst_time+wait_time[i-1] - processes[i].arrival_time;
        turnaround_time[i] = wait_time[i] + processes[i].burst_time;
    }

    // Calculate total waiting time and turnaround time
    for (i = 0; i < n; i++) {
        total_wait_time += wait_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, wait_time[i], turnaround_time[i]);
    }
    printf("Average Waiting Time: %.2f\n", total_wait_time/n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);

    return 0;
}
19/04/23, 16:36 - Sooorrrr 🎓: FCFS
19/04/23, 18:00 - Harecharan CSE E Amrita CBE: #include <stdio.h>
#include<string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#define MAX 10

struct meg_buffer{
        long message_type;
        char message_text[100];
}message,message2;

int main(){
        key_t key1;
        key_t key2;
        int msgid1;
        int msgid2;


        key1=ftok("hare",69);
        key2=ftok("sree",11);
        msgid1=msgget(key1,0666|IPC_CREAT);
        msgid2=msgget(key2,0666|IPC_CREAT);

        message.message_type=1;
        message2.message_type=2;


printf("Write the data");

        fgets(message.message_text,MAX,stdin);
scanf("");
        printf("Write the data2");
        fgets(message2.message_text,MAX,stdin);

        msgsnd(msgid1,&message,sizeof(message),0);
        msgsnd(msgid2,&message2,sizeof(message),0);
        msgrcv(msgid1,&message,sizeof(message),0,0);
        msgrcv(msgid2,&message2,sizeof(message),0,0);

printf("data receive is %s\n",message.message_text);
printf("data receive is %s\n",message2.message_text);
return 0;

}
19/04/23, 18:25 - Phoool Gobiiii  🎓: ```#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

struct Buffer{
    long msgtype;
    char msgtext[100];
}message;

void user1(key_t key, int msgqid){
    char input[100];
    while(1){
        if(msgrcv(msgqid, &message, sizeof(message), 1, IPC_NOWAIT) == -1){
            break;
        }
        printf("\n\nUser 2: %s\t\t\t\t", message.msgtext);
    }
    printf("User 1 -- Enter your message: ");
    fgets(input, sizeof(message.msgtext)/sizeof(message.msgtext[0]), stdin);

    if(strcmp(input, "bye\n") == 0){
        printf("Exiting...\n");
        exit(1);
    }
    strncpy(message.msgtext, input, sizeof(message.msgtext)/sizeof(message.msgtext[0]));
    msgsnd(msgqid, &message, sizeof(message), 0);

}

void user2(key_t key, int msgqid){
    char input[100];
    while(1){
        if(msgrcv(msgqid, &message, sizeof(message), 1, IPC_NOWAIT) == -1){
            break;
        }
        printf("\n\nUser 1: %s\t\t\t\t", message.msgtext);
    }
    printf("User 2 -- Enter your message: ");
    fgets(input, sizeof(message.msgtext)/sizeof(message.msgtext[0]), stdin);

    if(strcmp(input, "bye\n") == 0){
        printf("Exiting...\n");
        exit(1);
    }
    strncpy(message.msgtext, input, sizeof(message.msgtext)/sizeof(message.msgtext[0]));
    msgsnd(msgqid, &message, sizeof(message), 0);

}

int main(){
    key_t key;
    int msgqid;

    key = ftok("File", 69);
    msgqid = msgget(key, IPC_CREAT | 0666);
    message.msgtype = 1;

    while(1){
        user2(key, msgqid);
        user1(key, msgqid);
        
    }

    
    
}```
19/04/23, 19:32 - Sanjuuu 🎓: <Media omitted>
19/04/23, 19:32 - Sanjuuu 🎓: <Media omitted>
19/04/23, 19:32 - Sanjuuu 🎓: <Media omitted>
19/04/23, 19:32 - Sanjuuu 🎓: <Media omitted>
19/04/23, 20:49 - Sanjuuu 🎓: <Media omitted>
19/04/23, 20:59 - Sooorrrr 🎓: ```#include <stdio.h>
#include <stdlib.h>
// we assume that the arrival time is 0 for all these processes
int main(){
    int n,i,j;
  
    float avg_wt=0,avg_tat=0;//average waiting and turnaround time
    float total_wt=0,total_tat=0;//total
    printf("Enter the number of processes");
    scanf("%d",&n);

    int burst_time[n],wait_time[n],tat[n];
    int completion_time[n];

    for(int i=0;i<n;i++){
        printf("Enter the burst time of  process %d",i+1);
        scanf("%d",&burst_time[i]);
    }

    //sorting the burst times in ascending order
    for(i=0;i<n-1;i++) {  //sorting the burst times
        for(j=0;j<n-i-1;j++) {
            if(burst_time[j]>burst_time[j+1]){
                int temp=burst_time[j];
                burst_time[j]=burst_time[j+1];
                burst_time[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++) {
        printf("%d",burst_time[i]);
    }
    wait_time[0]=0;
    tat[0]=burst_time[0];
    completion_time[0]=tat[0];
    //calculating the waiting time for all processes
    for(int i=1;i<n;i++) {
        wait_time[i]=wait_time[i-1]+burst_time[i-1];
        tat[i]=wait_time[i]+burst_time[i];
        completion_time[i]=tat[i];
    }

    //calculating the total waiting time and  tat
    for(int i=0;i<n;i++) {
        total_tat+=(tat[i]);
        total_wt+=(wait_time[i]);
    }

    //calculating the average waiting time and average
    avg_wt=total_wt/n;
    avg_tat=total_tat/n;
    
    //printing the waiting times 
    for(int i=0;i<n;i++) {
        
        printf("PID : %d,Burst time:%d,Wait time: %d,Completion time: %d",i+1,burst_time[i],wait_time[i],completion_time[i]);
        printf("\n");
    }

}```
19/04/23, 20:59 - Sooorrrr 🎓: SJF without arrival time
19/04/23, 21:33 - Sooorrrr 🎓: ```#include <stdio.h>

// Process structure
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
};

int main() {
    int n, i;
    float total_wait_time = 0, total_turnaround_time = 0;
    struct Process processes[50]; // Array of processes
    int wait_time[50] = {0}; // Array to store waiting times
    int turnaround_time[50] = {0}; // Array to store turnaround times
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    printf("Enter the arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
    }

    // Sort processes by arrival time
    for (i = 0; i < n-1; i++) {
        int j;
        for (j = 0; j < n-i-1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time for each process
    wait_time[0] = 0;
    turnaround_time[0] = processes[0].burst_time;
    for (i = 1; i < n; i++) {
        wait_time[i] = processes[i-1].arrival_time+wait_time[i-1]+processes[i-1].burst_time - processes[i].arrival_time;
        if(wait_time[i] <0){
            wait_time[i] = 0;
        }
        turnaround_time[i] = wait_time[i] + processes[i].burst_time;
        
    }

    // Calculate total waiting time and turnaround time
    for (i = 0; i < n; i++) {
        total_wait_time += wait_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, wait_time[i], turnaround_time[i]);
    }
    printf("Average Waiting Time: %.2f\n", total_wait_time/n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);

    return 0;
}```
19/04/23, 21:34 - Sooorrrr 🎓: fcfs
19/04/23, 22:25 - Shesadriii 🎓: <Media omitted>
20/04/23, 00:36 - Gannu: ```
20/04/23, 00:37 - Gannu: ```#include <stdio.h>
#define MAX 100

typedef struct{
    int pid;//it has the process id of the process
    int burst_time;//it has the amount of time needed to execute the process
    int remaining_time;//it has the amount of time remaining after context switch
}Process;

int main(){
    int n; //Number of processes
    int quantum; //time slice
    int i;// used in loops
    int current_time=0;//it keeps track of the current time
    int remaining_processes;//it keeps track of the remaining processes
    Process processes[MAX];// array of process structures
    int completion_time[MAX];//array of completion times
    int waiting_time[MAX];//array of waiting times
    int tr_time[MAX];
    printf("Enter the number of processes");
    scanf("%d",&n);
    
    printf("Enter the burst time and arrival time of each process");
    for(i=0;i<n;i++){
        printf("Process id: %d\n",i);
        printf("Enter burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("\n");
        processes[i].pid=i;
        processes[i].remaining_time=processes[i].burst_time;

    }

    printf("Enter the time slice for the round robin scheduling");
    scanf("%d",&quantum);

    remaining_processes=n;// we are assigning the remaining process to the total number of process to be executed

    while(remaining_processes>0){
        for(i=0;i<n;i++){
            if(processes[i].remaining_time>0){//checking whether the process has any remaining time and checking if the process has arrived to the ready queue
                int execution_time;// this is for the amount of time the process executes in that particular time slice
                if(quantum<processes[i].remaining_time){
                    execution_time=quantum;
                }
                else{
                    execution_time=processes[i].remaining_time;
                }
                processes[i].remaining_time=processes[i].remaining_time-execution_time;//remaining process time calculation
                current_time=current_time+execution_time;//current time calculation
                if(processes[i].remaining_time==0){// to check if process has completed
                    completion_time[processes[i].pid]=current_time;//completion time calculation
                    remaining_processes=remaining_processes-1;
                }
            }
        }
    }

    printf("wait  :  completion  :  turnaround\n");

    for(int i=0; i<n;i++){
        printf("process %d:\n",i);
        // printf("Process %d:%d\n",i,completion_time[i]);
        waiting_time[i]=completion_time[i]-processes[i].burst_time;
        tr_time[i]=completion_time[i];
        printf("Process %d  %d  %d\n",waiting_time[i],completion_time[i],tr_time[i]);
    }
    return 0;
}```
20/04/23, 00:42 - Sooorrrr 🎓: <Media omitted>
20/04/23, 00:42 - Sooorrrr 🎓: <Media omitted>
20/04/23, 01:26 - Sooorrrr 🎓: An interrupt service routine (ISR), also known as an interrupt handler, is a software function that is called in response to an interrupt signal from a hardware device. Interrupts are signals generated by hardware devices, such as a keyboard or mouse, to request the attention of the CPU.

When an interrupt occurs, the CPU stops executing its current program and transfers control to the interrupt handler. The interrupt handler then saves the current state of the CPU, processes the interrupt, and returns control back to the interrupted program. The interrupt handler typically performs a specific action related to the interrupt, such as reading data from a device or storing data in memory.

ISRs are an important part of operating systems, because they allow devices to operate asynchronously, without requiring the CPU to constantly poll them for data. By responding to interrupts, devices can notify the CPU when they need attention, allowing the CPU to perform other tasks in the meantime. This improves system efficiency and reduces latency.

ISRs can be either hardware-based or software-based. Hardware interrupts are triggered by external devices, while software interrupts are triggered by software events, such as a system call or a timer interrupt.

In summary, an interrupt service routine is a software function that is called in response to an interrupt signal from a hardware or software device. It allows devices to operate asynchronously and improves system efficiency by reducing latency.
20/04/23, 01:34 - Sooorrrr 🎓: <Media omitted>
20/04/23, 01:34 - Sooorrrr 🎓: <Media omitted>
20/04/23, 01:34 - Sooorrrr 🎓: <Media omitted>
20/04/23, 01:34 - Sooorrrr 🎓: <Media omitted>
20/04/23, 02:53 - Phoool Gobiiii  🎓: ```class Process:
    def __init__(self, pid, arr, burst):
        self.pid = pid
        self.arr = arr
        self.burst = burst
        self.remain = burst
        self.completed = False


n = int(input("Enter the number of processes: "))
proc_list = []
time = 0
for i in range(n):
    print("Enter arrival time of process ", i+1, ": ", end="")
    at = int(input())
    print("Enter burst time of process ", i + 1, ": ", end="")
    bt = int(input())
    proc_list.append(Process(i+1, at, bt))

while True:
    min_index = -1
    min_burst = 1000
    for i in range(n):
        if proc_list[i].arr <= time and proc_list[i].remain < min_burst and not proc_list[i].completed:
            min_burst = proc_list[i].remain
            min_index = i

    if min_index == -1:
        break

    print("P",proc_list[min_index].pid, end=" ")
    time += 1
    proc_list[min_index].remain -= 1
    if proc_list[min_index].remain == 0:
        proc_list[min_index].completed = True

```
20/04/23, 02:53 - Harecharan CSE E Amrita CBE: Introduction to the Operating System, Types of Operating Systems:
An operating system (OS) is a software that acts as an interface between the computer hardware and the user applications. It provides a set of services to the user and manages computer resources such as memory, CPU, and input/output devices. The OS can be classified into different types based on various criteria such as functionality, architecture, and user interface.

Some common types of operating systems are:

Batch Operating System: It executes a batch of jobs without any user interaction.
Time-Sharing Operating System: It allows multiple users to use the system simultaneously.
Real-Time Operating System: It is designed to provide a predictable response time to critical tasks.
Distributed Operating System: It manages a network of computers to work together as a single entity.
Network Operating System: It provides services to clients over a network.
Mobile Operating System: It is designed to run on mobile devices such as smartphones and tablets.
Computer System Operation, Dual Mode Operation, IO Protection, Memory Protection, CPU Protection:
A computer system operates in two modes, user mode and kernel mode. The user mode provides a restricted set of instructions to access computer resources, whereas the kernel mode provides unrestricted access to computer resources. The operating system uses dual mode operation to ensure that the user programs do not interfere with the system's stability and security.

The operating system provides IO protection to prevent user programs from accessing unauthorized IO devices. Memory protection is used to ensure that the user programs cannot access the system's memory outside of their allocated space. CPU protection is used to ensure that the user programs cannot use more CPU time than their allocation.

OS Services, System Calls, System Structures, Virtual Machines:
The operating system provides various services to the user such as file management, process management, memory management, and device management. These services are accessed through system calls, which are interfaces provided by the operating system to the user programs.

The operating system has a complex structure consisting of various components such as kernel, device drivers, file system, and process management system. These components work together to provide the necessary services to the user programs.

Virtual machines are used to create multiple instances of an operating system on a single physical machine. Each virtual machine operates as an independent system with its own set of resources and operating system.

Process Concepts, Process States, PCB, Inter Process Communication (Pipes, Message Queues, Shared Memory):
A process is an instance of a program that is currently executing on the system. The operating system manages the processes to ensure that they do not interfere with each other.

The process can be in various states such as running, ready, blocked, or terminated. The operating system uses a process control block (PCB) to maintain information about each process.

Inter-process communication (IPC) is used to allow processes to communicate with each other. Pipes, message queues, and shared memory are commonly used IPC mechanisms.

Scheduling Concepts, Scheduling Algorithms-FCFS, SJF, SRTF, Priority, RR - (Starvation, Ageing, Waiting Time, TAT, Completion Time, Context Switching in Scheduling). (Code Included):
The operating system uses scheduling algorithms to allocate CPU time to the processes. The scheduling algorithms can be classified into various categories such as non-preemptive, preemptive, and real-time.

Some common scheduling algorithms are:

First-Come-First-Serve (FCFS)
Shortest-Job-First (SJF)
Shortest-Remaining-Time-First (SRTF)
Priority Scheduling
Round Robin (RR)
The scheduling algorithms have various performance metrics such as waiting time, turnaround time, and completion time. Starvation and ageing are common problems associated with scheduling algorithms. Context switching
in scheduling refers to the overhead of saving and restoring the state of a process when switching between different processes.

Here is an example implementation of the Round Robin scheduling algorithm in Python:

python
Copy code
# Initialize the process queue
process_queue = []
total_time = 0
wait_time = 0

# Add processes to the queue
for i in range(num_processes):
    process_queue.append([i+1, burst_time[i]])

# Run the scheduling algorithm
while len(process_queue) != 0:
    # Get the next process in the queue
    process = process_queue.pop(0)

    # Check if the process has finished
    if process[1] <= time_quantum:
        total_time += process[1]
        wait_time += total_time - process[0]
        print(f"Process {process[0]} finished at time {total_time}")
    else:
        total_time += time_quantum
        process[1] -= time_quantum
        process_queue.append(process)

# Calculate the average waiting time
avg_wait_time = wait_time / num_processes
print(f"Average waiting time: {avg_wait_time}")
Scheduling used in the Modern OS:
Modern operating systems use advanced scheduling algorithms to improve the system's performance and responsiveness. Some common scheduling techniques used in modern operating systems are:

Multi-Level Feedback Queue (MLFQ): This scheduling algorithm uses multiple queues with different priorities and time quantum. The processes are moved between different queues based on their performance and CPU usage.
Completely Fair Scheduler (CFS): This scheduling algorithm assigns priorities to each process based on their CPU usage. The process with the least CPU usage is given the highest priority.
Earliest Deadline First (EDF): This scheduling algorithm is used in real-time systems and assigns priorities to the processes based on their deadlines.
Memory Hierarchy:
The memory hierarchy refers to the organization of computer memory into different levels based on their speed, size, and cost. The memory hierarchy typically consists of four levels:

Registers: These are the fastest memory units and are located inside the CPU. They are used to store frequently accessed data and instructions.
Cache: This is a small amount of fast memory located between the CPU and main memory. It is used to reduce the access time to the main memory.
Main Memory: This is the primary memory of the computer and is used to store the program instructions and data.
Secondary Storage: This is the non-volatile memory used for long-term storage of data and programs. Examples of secondary storage include hard disk drives and solid-state drives.
The memory hierarchy is designed to improve the performance and efficiency of the system by reducing the access time to frequently accessed data and instructions. The cache is the most important component of the memory hierarchy and its performance is critical to the system's performance.





harecharan321@gmail.com
continue
Here are some additional subtopics related to the memory hierarchy:

Cache organization: Caches can be organized in different ways such as direct-mapped, set-associative, and fully-associative. The organization affects the cache hit rate and access time.
Memory management: Operating systems manage the main memory by allocating and deallocating memory to different processes. Memory management techniques include paging, segmentation, and virtual memory.
Memory protection: Operating systems provide memory protection by assigning different memory areas to different processes and restricting access to other processes. This prevents processes from accessing each other's memory.
Memory fragmentation: As memory is allocated and deallocated, it can lead to fragmentation where small free memory blocks are scattered across the memory. Memory defragmentation techniques can be used to reclaim the fragmented memory.
Storage devices: Secondary storage devices such as hard disk drives, solid-state drives, and optical drives have different characteristics such as capacity, access time, and transfer rate. These characteristics affect the performance of the system.
Here is a comparison table of the different levels of the memory hierarchy:

Memory Level	Speed	Size	Cost
Registers	Fastest	Smallest	Most expensive
Cache	Fast	Small	Expensive
Main Memory	Moderate	Moderate	Moderate
Secondary Storage	Slowest	Largest	Least expensive
Overall, the memory hierarchy is an important aspect of computer systems and its design can greatly impact the performance and efficiency of the system.
20/04/23, 03:09 - Phoool Gobiiii  🎓: <Media omitted>
20/04/23, 03:11 - Sooorrrr 🎓: <Media omitted>
20/04/23, 03:11 - Sooorrrr 🎓: Spooling (Simultaneous Peripheral Operations On-line) is a technique used by computer operating systems to manage input/output operations from multiple sources such as disk, printer, and network connections.

The spooling process works by taking data from one source and temporarily storing it in a queue on a secondary device such as a hard disk, instead of sending it directly to the target device. The spooled data is then retrieved and sent to the output device in a way that optimizes the use of system resources and minimizes delays.

For example, when printing a document, the data is spooled to the hard disk, allowing the user to continue working while the document is being printed in the background. This frees up the computer's resources and avoids slowing down the system.

Spooling is commonly used in multi-user systems where multiple users need to access shared resources, such as a printer, at the same time. By spooling print jobs, users can submit their documents without waiting for previous print jobs to complete, improving productivity and reducing wait times.




Surya NS
20/04/23, 03:13 - Sooorrrr 🎓: <Media omitted>
20/04/23, 03:13 - Sooorrrr 🎓: <Media omitted>
20/04/23, 03:14 - Phoool Gobiiii  🎓: ```At the very least, we need two separate modes of operation: user mode and kernel mode (also called supervisor mode, system mode, or privileged mode). A bit, called the mode bit, is added to the hardware of the computer to indicate the current mode: kernel (0) or user (1). With the mode bit, we can distinguish between a task that is executed on behalf of the operating system and one that is executed on behalf of the user. When the computer system is executing on behalf of a user application, the system is in user mode. However, when a user application requests a service from the operating system (via a system call), the system must transition from user to kernel mode to fulfill the request. This is shown in Figure 1.10. As we shall see, this architectural enhancement is useful for many other aspects of system operation as well.
At system boot time, the hardware starts in kernel mode. The operating system is then loaded and starts user applications in user mode. Whenever a trap or interrupt occurs, the hardware switches from user mode to kernel mode (that is, changes the state of the mode bit to 0). Thus, whenever the operating system gains control of the computer, it is in kernel mode. The system always switches to user mode (by setting the mode bit to 1) before passing control to a user program.
The dual mode of operation provides us with the means for protecting the operating system from errant users—and errant users from one another. We accomplish this protection by designating some of the machine instructions that may cause harm as privileged instructions. The hardware allows privileged instructions to be executed only in kernel mode. If an attempt is made to execute a privileged instruction in user mode, the hardware does not execute the instruction but rather treats it as illegal and traps it to the operating system.
The instruction to switch to kernel mode is an example of a privileged instruction. Some other examples include I/O control, timer management, and interrupt management. As we shall see throughout the text, there are many additional privileged instructions.```
20/04/23, 09:06 - Shesadriii 🎓: <Media omitted>
20/04/23, 09:59 - Sooorrrr 🎓: #include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 100

struct process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
};

int main() {
    int num_processes, i, j;
    struct process processes[MAX_PROCESSES], temp;
    float avg_waiting_time = 0, avg_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    // Input the processes
    for (i = 0; i < num_processes; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time of process %d: ", processes[i].pid);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time of process %d: ", processes[i].pid);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority of process %d: ", processes[i].pid);
        scanf("%d", &processes[i].priority);
    }

    // Sort the processes by priority
    for (i = 0; i < num_processes - 1; i++) {
        for (j = i + 1; j < num_processes; j++) {
            if (processes[i].priority > processes[j].priority) {
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    processes[0].waiting_time = 0;
    processes[0].turnaround_time = processes[0].burst_time;
    for (i = 1; i < num_processes; i++) {
        processes[i].waiting_time = processes[i - 1].turnaround_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    // Calculate average waiting time and average turnaround time
    for (i = 0; i < num_processes; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
    }
    avg_waiting_time /= num_processes;
    avg_turnaround_time /= num_processes;

    // Output the results
    printf("\nPID\tArrival Time\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < num_processes; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average waiting time: %f\n", avg_waiting_time);
    printf("Average turnaround time: %f\n", avg_turnaround_time);

    return 0;
}
20/04/23, 09:59 - Sooorrrr 🎓: you can remove the arrival time
20/04/23, 09:59 - Sooorrrr 🎓: this is for arrival time 0
20/04/23, 10:01 - Harecharan CSE E Amrita CBE: Sure, let me explain the last three scheduling algorithms used in modern operating systems in more detail.

Multi-Level Queue Scheduling:
Multi-level queue scheduling is a scheduling algorithm that partitions the ready queue into several separate queues, each with its own scheduling algorithm. Processes are then assigned to these queues based on their characteristics, such as priority, CPU burst time, memory requirements, or I/O behavior. The goal of this approach is to provide a better response time, throughput, and fairness by prioritizing certain types of processes.

For example, a system with four queues might have a high-priority queue for interactive processes, a medium-priority queue for batch jobs, a low-priority queue for background tasks, and a system queue for operating system processes. Each queue may use a different scheduling algorithm, such as Round Robin, Priority Scheduling, or Shortest Job First, to determine which process should be executed next. The exact number and characteristics of the queues depend on the specific needs of the system.

Multi-level queue scheduling is used in many modern operating systems, including Unix, Linux, and Windows.

Fair Share Scheduling:
Fair share scheduling is a scheduling algorithm that allocates system resources, such as CPU time, memory, or I/O bandwidth, in a fair and equitable manner among different users or groups of users. This approach is particularly useful in systems with multiple users who have different resource needs and priorities.

In a fair share scheduling system, each user or group is assigned a certain weight or quota, which determines their share of the available resources. The scheduler then assigns resources to each user in proportion to their weight or quota. This means that users with higher weights or quotas will receive a larger share of the resources than those with lower weights or quotas.

For example, if there are two users, Alice and Bob, with weights of 2 and 1, respectively, Alice will receive twice as many resources as Bob. If there are four CPUs, Alice will get two of them, and Bob will get one.

Fair share scheduling is used in many multi-user operating systems, including Unix, Linux, and Windows.

Completely Fair Scheduler (CFS):
The Completely Fair Scheduler (CFS) is a scheduling algorithm used in the Linux kernel. It is designed to provide fair allocation of CPU time to processes, regardless of their priority or resource requirements. It does this by using a red-black tree data structure to keep track of the virtual runtime of each process.

The virtual runtime is the amount of time a process has spent waiting for the CPU, scaled by its priority. The CFS scheduler uses the virtual runtime to determine which process should be executed next. The process with the smallest virtual runtime is selected first. This ensures that each process gets a fair share of CPU time, proportional to its priority.

CFS also supports features such as preemption, load balancing, and control groups (cgroups), which allow administrators to allocate system resources to specific processes or groups of processes.

CFS is widely used in Linux-based operating systems, including Ubuntu, Debian, and Red Hat Enterprise Linux.


Multilevel Feedback Queue
Thread Scheduling(with pcs and scs)
pthread scheduling 
ultiple-Processor Scheduling (with explaining Load Balancing)
NUMA and CPU Scheduling
Multiple-Processor Scheduling

Rate Montonic Scheduling

explanation for each and tell which are all used in modern scheduling


Multilevel Feedback Queue (MLFQ):
Multilevel Feedback Queue is a scheduling algorithm that allows a process to move between different priority queues based on its behavior. The algorithm uses multiple queues with different priorities and time quantum values. Each queue uses a different scheduling algorithm, such as Round Robin or First-Come, First-Serve.

When a process arrives, it is placed in the highest-priority queue. If it uses all of its time slice without blocking, it will be demoted to a lower-priority queue. If a process blocks before using its entire time slice, it will be moved to a higher-priority queue when it becomes ready again. This way, processes that use a lot of CPU time are gradually demoted to lower-priority queues, while processes that block frequently are moved to higher-priority queues.

MLFQ is used in modern operating systems, such as Unix, Linux, and Windows.

Thread Scheduling (with PCS and SCS):
Thread scheduling is the process of assigning CPU time to threads within a process. In modern operating systems, threads are often scheduled independently of processes. There are two types of thread scheduling: Process-Contended Scheduling (PCS) and System-Contended Scheduling (SCS).

PCS is used when multiple threads within the same process compete for CPU time. The scheduler uses a round-robin algorithm to allocate CPU time to each thread. The time slice is usually small, so threads can quickly switch between each other.

SCS is used when threads from different processes compete for CPU time. The scheduler uses a priority-based algorithm to allocate CPU time to each thread. Threads with higher priority are scheduled before threads with lower priority. If multiple threads have the same priority, the scheduler will use a round-robin algorithm to allocate CPU time to each thread.

Thread scheduling is used in many modern operating systems, including Unix, Linux, and Windows.

pthread Scheduling:
pthreads (POSIX Threads) are a type of thread implementation used in Unix and Linux systems. The pthreads library provides functions for creating, managing, and synchronizing threads. The scheduling of pthreads is similar to that of other thread implementations.

The pthread scheduler uses the same scheduling algorithm as the underlying operating system. In Unix and Linux systems, the pthread scheduler is usually implemented as part of the kernel scheduler.

pthreads scheduling is used in many modern Unix and Linux systems.

Multiple-Processor Scheduling (with Load Balancing):
Multiple-Processor Scheduling is a scheduling algorithm used in systems with multiple processors or cores. The goal of this algorithm is to distribute the workload evenly among the processors, to achieve maximum performance and efficiency.

Load Balancing is an important aspect of Multiple-Processor Scheduling. Load balancing refers to the process of distributing the workload among the processors or cores in a way that minimizes idle time and maximizes throughput.

In modern operating systems, load balancing is often performed dynamically, using algorithms that monitor the workload and adjust the distribution of tasks in real-time. Some examples of load balancing algorithms include Round Robin, Weighted Round Robin, and Dynamic Load Balancing.

Multiple-Processor Scheduling is used in many modern operating systems, including Unix, Linux, and Windows.

NUMA and CPU Scheduling:
Non-Uniform Memory Access (NUMA) is a memory architecture used in systems with multiple processors. In a NUMA system, each processor has its own local memory, which is faster to access than remote memory. The goal of NUMA is to reduce the latency of memory access and improve performance.

NUMA-aware CPU scheduling is a scheduling algorithm that takes into account the NUMA architecture of the system when scheduling tasks. The scheduler tries to assign tasks





harecharan321@gmail.com
continue
to processors that have local memory available, to reduce the latency of memory access and improve performance.

NUMA-aware CPU scheduling is used in modern operating systems, such as Linux and Windows, that support NUMA architectures.

Multiple-Processor Scheduling:
Multiple-Processor Scheduling is a scheduling algorithm used in systems with multiple processors or cores. The goal of this algorithm is to distribute the workload evenly among the processors, to achieve maximum performance and efficiency.

This algorithm involves dividing the workload into smaller tasks and assigning them to different processors or cores. The scheduler tries to balance the workload among the processors to maximize the utilization of resources and reduce idle time.

Multiple-Processor Scheduling is used in many modern operating systems, including Unix, Linux, and Windows.

Rate Monotonic Scheduling:
Rate Monotonic Scheduling is a real-time scheduling algorithm used in systems with hard real-time requirements. The algorithm assigns priorities to tasks based on their deadlines, with tasks with shorter deadlines having higher priorities.

In Rate Monotonic Scheduling, tasks are scheduled preemptively, with higher priority tasks interrupting lower priority tasks. The algorithm guarantees that tasks will meet their deadlines if they are scheduled correctly.

Rate Monotonic Scheduling is used in many modern real-time systems, such as aerospace and defense systems, automotive systems, and medical devices.

Overall, Multilevel Feedback Queue, Thread Scheduling, Multiple-Processor Scheduling, and Rate Monotonic Scheduling are commonly used in modern operating systems. NUMA and CPU scheduling are used in systems with NUMA architectures. pthread scheduling is used in Unix and Linux systems that use the pthreads library.
20/04/23, 10:03 - Harecharan CSE E Amrita CBE: Earliest Deadline First Scheduling (EDF)
Proportional Share Scheduling
explanation for each and tell which are all used in modern scheduling

Earliest Deadline First Scheduling (EDF):
Earliest Deadline First Scheduling is a real-time scheduling algorithm used in systems with soft or hard real-time requirements. The algorithm assigns priorities to tasks based on their deadlines, with tasks with earlier deadlines having higher priorities.

In EDF scheduling, tasks are scheduled based on their next deadline, with the task with the earliest deadline being scheduled first. This algorithm ensures that tasks meet their deadlines if they are scheduled correctly.

EDF scheduling is used in many real-time systems, such as telecommunications, industrial automation, and multimedia applications.

Proportional Share Scheduling:
Proportional Share Scheduling is a scheduling algorithm used in systems that require fair sharing of resources among multiple users or processes. The algorithm assigns each user or process a share of the resources based on their priority or weight.

In Proportional Share Scheduling, tasks are scheduled based on their assigned share of the resources. Higher priority or weight tasks receive a larger share of the resources than lower priority or weight tasks.

Proportional Share Scheduling is used in many modern operating systems, including Linux and FreeBSD, to ensure fair sharing of CPU time, memory, and other resources among multiple users or processes.

In conclusion, both Earliest Deadline First Scheduling (EDF) and Proportional Share Scheduling are commonly used in modern operating systems, with EDF scheduling used in real-time systems with soft or hard real-time requirements, and Proportional Share Scheduling used in systems that require fair sharing of resources among multiple users or processes.
20/04/23, 10:08 - Harecharan CSE E Amrita CBE: <Media omitted>
20/04/23, 10:22 - Sooorrrr 🎓: #include <stdio.h>
#define MAX 100

typedef struct{
    int pid;//it has the process id of the process
    int burst_time;//it has the amount of time needed to execute the process
    int remaining_time;//it has the amount of time remaining after context switch
}Process;

int main(){
    int n; //Number of processes
    int quantum; //time slice
    int i,j;// used in loops
    int current_time=0;//it keeps track of the current time
    int remaining_processes;//it keeps track of the remaining processes
    Process processes[MAX];// array of process structures
    int completion_time[MAX];//array of completion times
    int waiting_time[MAX];//array of waiting times
    printf("Enter the number of processes");
    scanf("%d",&n);
    
    printf("Enter the burst time  of each process");
    for(i=0;i<n;i++){
        printf("Process id: %d\n",i);
        printf("Enter burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("\n");
        processes[i].pid=i;
        processes[i].remaining_time=processes[i].burst_time;

    }

    printf("Enter the time slice for the round robin scheduling");
    scanf("%d",&quantum);

    remaining_processes=n;// we are assigning the remaining process to the total number of process to be executed

    while(remaining_processes>0){
        for(i=0;i<n;i++){
            if(processes[i].remaining_time>0){//checking whether the process has any remaining time and checking if the process has arrived to the ready queue
                int execution_time;// this is for the amount of time the process executes in that particular time slice
                if(quantum<processes[i].remaining_time){
                    execution_time=quantum;
                }
                else{
                    execution_time=processes[i].remaining_time;
                }
                processes[i].remaining_time=processes[i].remaining_time-execution_time;//remaining process time calculation
                current_time=current_time+execution_time;//current time calculation
                if(processes[i].remaining_time==0){// to check if process has completed
                    completion_time[processes[i].pid]=current_time;//completion time calculation
                    remaining_processes=remaining_processes-1;
                }
            }
        }
    }

    printf("Completion times:\n");

    for(int i=0; i<n;i++){
        printf("Process %d:%d\n",i,completion_time[i]);
        waiting_time[i]=completion_time[i]-processes[i].burst_time;
        printf("Process %d:%d\n",i,waiting_time[i]);
    }
    return 0;
}
20/04/23, 10:34 - Sooorrrr 🎓: #include <stdio.h>
#include <stdlib.h>
// we assume that the arrival time is 0 for all these processes
int main(){
    int n,i,j;
  
    float avg_wt=0,avg_tat=0;//average waiting and turnaround time
    float total_wt=0,total_tat=0;//total
    printf("Enter the number of processes");
    scanf("%d",&n);

    int burst_time[n],wait_time[n],tat[n];
    int completion_time[n];

    for(int i=0;i<n;i++){
        printf("Enter the burst time of  process %d",i+1);
        scanf("%d",&burst_time[i]);
    }

    //sorting the burst times in ascending order
    for(i=0;i<n-1;i++) {  //sorting the burst times
        for(j=0;j<n-i-1;j++) {
            if(burst_time[j]>burst_time[j+1]){
                int temp=burst_time[j];
                burst_time[j]=burst_time[j+1];
                burst_time[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++) {
        printf("%d",burst_time[i]);
    }
    wait_time[0]=0;
    tat[0]=burst_time[0];
    completion_time[0]=tat[0];
    //calculating the waiting time for all processes
    for(int i=1;i<n;i++) {
        wait_time[i]=wait_time[i-1]+burst_time[i-1];
        tat[i]=wait_time[i]+burst_time[i];
        completion_time[i]=tat[i];
    }

    //calculating the total waiting time and  tat
    for(int i=0;i<n;i++) {
        total_tat+=(tat[i]);
        total_wt+=(wait_time[i]);
    }

    //calculating the average waiting time and average
    avg_wt=total_wt/n;
    avg_tat=total_tat/n;
    
    //printing the waiting times 
    for(int i=0;i<n;i++) {
        
        printf("PID : %d,Burst time:%d,Wait time: %d,Completion time: %d",i+1,burst_time[i],wait_time[i],completion_time[i]);
        printf("\n");
    }

}
20/04/23, 10:34 - Sooorrrr 🎓: SJF
20/04/23, 10:35 - Sooorrrr 🎓: #include <stdio.h>

// Process structure
struct Process {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
};

int main() {
    int n, i;
    float total_wait_time = 0, total_turnaround_time = 0;
    struct Process processes[50]; // Array of processes
    int wait_time[50] = {0}; // Array to store waiting times
    int turnaround_time[50] = {0}; // Array to store turnaround times
    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input process details
    printf("Enter the arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
    }

    // Sort processes by arrival time
    for (i = 0; i < n-1; i++) {
        int j;
        for (j = 0; j < n-i-1; j++) {
            if (processes[j].arrival_time > processes[j+1].arrival_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j+1];
                processes[j+1] = temp;
            }
            else if(processes[j].arrival_time == processes[j+1].arrival_time) {
                if (processes[j].burst_time> processes[j+1].burst_time)
                {
                    /* code */
                    struct Process temp = processes[j];
                    processes[j] = processes[j+1];
                    processes[j+1] = temp;
                }
                
            }
        }
    }

    // Calculate waiting time and turnaround time for each process
    wait_time[0] = 0;
    turnaround_time[0] = processes[0].burst_time;
    for (i = 1; i < n; i++) {
        wait_time[i] = processes[i-1].arrival_time+wait_time[i-1]+processes[i-1].burst_time - processes[i].arrival_time;
        if(wait_time[i] <0){
            wait_time[i] = 0;
        }
        turnaround_time[i] = wait_time[i] + processes[i].burst_time;
        
    }

    // Calculate total waiting time and turnaround time
    for (i = 0; i < n; i++) {
        total_wait_time += wait_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // Output results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, wait_time[i], turnaround_time[i]);
    }
    printf("Average Waiting Time: %.2f\n", total_wait_time/n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);

    return 0;
}
20/04/23, 10:35 - Sooorrrr 🎓: FCFS
20/04/23, 12:09 - Sanjuuu 🎓: <Media omitted>
20/04/23, 12:09 - Sanjuuu 🎓: <Media omitted>
20/04/23, 12:43 - Araviiii 🎓: <Media omitted>
20/04/23, 12:43 - Araviiii 🎓: <Media omitted>
20/04/23, 12:43 - Gannu: <Media omitted>
20/04/23, 12:43 - Gannu: <Media omitted>
20/04/23, 13:00 - Viswaa Ramasubramanian: #include <stdio.h> 

int main() { 
    int i, j, n, bt[10], at[10], bu[10], wa[10], tat[10], t, ct[10], max, completed = 0, time = 0, flag; 
    float awt = 0, att = 0; 

    printf("Enter the number of processes -- "); 
    scanf("%d", &n); 

    for(i = 0; i < n; i++) { 
        printf("\nEnter Arrival Time for process %d -- ", i + 1); 
        scanf("%d", &at[i]); 

        printf("Enter Burst Time for process %d -- ", i + 1); 
        scanf("%d", &bt[i]); 

        bu[i] = bt[i];
        wa[i] = 0;
        tat[i] = 0;
        ct[i] = 0;
    } 

    printf("\nEnter the size of time slice -- "); 
    scanf("%d", &t); 

    while(completed != n) {
        flag = 0;
        for(i = 0; i < n; i++) {
            if(at[i] <= time && bu[i] > 0) {
                flag = 1;
                if(bu[i] <= t) {
                    tat[i] = time + bu[i] - at[i];
                    time += bu[i];
                    bu[i] = 0;
                    completed++;
                } else {
                    bu[i] -= t;
                    time += t;
                }
            }
        }
        if(flag == 0) {
            time++;
        }
    }

    for(i = 0; i < n; i++) { 
        wa[i] = tat[i] - bt[i]; 
        att += tat[i]; 
        awt += wa[i]; 
        ct[i] = tat[i] + at[i];
    } 

    printf("\nThe Average Turnaround time is -- %f", att / n); 
    printf("\nThe Average Waiting time is -- %f ", awt / n); 
    printf("\n\tPROCESS\t ARRIVAL TIME\t BURST TIME \t WAITING TIME\tTURNAROUND TIME\n"); 

    for(i = 0; i < n; i++) 
        printf("\t%d \t %d \t\t %d \t\t %d \t\t %d\n", i + 1, at[i], bt[i], wa[i], tat[i]); 

    return 0;
}
20/04/23, 13:41 - Gannu: <Media omitted>
20/04/23, 17:26 - Shesadriii 🎓: Virat captain boizz
21/04/23, 09:00 - Araviiii 🎓: Sir came bois @918939677049 @917449292156 @918248897225
21/04/23, 12:55 - Shesadriii 🎓: <Media omitted>
21/04/23, 12:58 - Viswaa Ramasubramanian: Aathu aathu nalla aathu
Pathu pathu video va pathu
🕺🏻🕺🏻
21/04/23, 13:00 - Viswaa Ramasubramanian: <Media omitted>
21/04/23, 19:17 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:19 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:19 - Gannu: <Media omitted>
21/04/23, 19:19 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:20 - Gannu: <Media omitted>
21/04/23, 19:21 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:22 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:23 - Shesadriii 🎓: <Media omitted>
21/04/23, 19:27 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:28 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:28 - Araviiii 🎓: <Media omitted>
21/04/23, 19:29 - Harecharan CSE E Amrita CBE: Reached home da boys
21/04/23, 19:29 - Shesadriii 🎓: <Media omitted>
21/04/23, 19:30 - Harecharan CSE E Amrita CBE: <Media omitted>
21/04/23, 19:30 - Araviiii 🎓: K
21/04/23, 19:30 - Gannu: <Media omitted>
21/04/23, 19:33 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:33 - Gannu: <Media omitted>
21/04/23, 19:34 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 19:34 - Phoool Gobiiii  🎓: <Media omitted>
21/04/23, 20:11 - Harecharan CSE E Amrita CBE: <Media omitted>
21/04/23, 20:14 - Harecharan CSE E Amrita CBE: <Media omitted>
22/04/23, 05:39 - Phoool Gobiiii  🎓: Reached home ✨
22/04/23, 08:27 - Shesadriii 🎓: Reached home an hour ago
22/04/23, 08:31 - Shesadriii 🎓: <Media omitted>
22/04/23, 08:38 - Gannu: Reached home 🏡
22/04/23, 08:41 - Sooorrrr 🎓: Reached🏠
22/04/23, 08:45 - Araviiii 🎓: Reached home bois
22/04/23, 19:17 - Shesadriii 🎓: MF KL Rahul Choker.....
23/04/23, 21:19 - Harecharan CSE E Amrita CBE: <Media omitted>
25/04/23, 17:20 - Sooorrrr 🎓: <Media omitted>
25/04/23, 19:03 - Shesadriii 🎓: <Media omitted>
25/04/23, 20:47 - Shesadriii 🎓: Damn guys.....A2B was way way better than aryas.....let's try it out next time
25/04/23, 20:53 - Viswaa Ramasubramanian: What u had ??
25/04/23, 20:57 - Shesadriii 🎓: Same stuff.....soup and roti
25/04/23, 21:09 - Shesadriii 🎓: Pochu pochu .....ball six-ku pochu
25/04/23, 21:54 - Shesadriii 🎓: <Media omitted>
26/04/23, 07:20 - Shesadriii 🎓: Me come home complete
27/04/23, 10:17 - Araviiii 🎓: https://amritavishwavidyapeetham-my.sharepoint.com/:x:/g/personal/cb_en_u4cse21417_cb_students_amrita_edu/EflB51gI3I5CocLIZReR4MQBG0vcP-prNjgLltWQ4FqBog?e=7NKstp
27/04/23, 10:17 - Araviiii 🎓: Dei ennalu panu
27/04/23, 10:17 - Araviiii 🎓: I can't open it
27/04/23, 10:17 - Araviiii 🎓: Ennaku *
27/04/23, 10:17 - Harecharan CSE E Amrita CBE: cheri da i was doing it for u just now
27/04/23, 10:18 - Harecharan CSE E Amrita CBE: ENNA WORKSHOP UNAKU
27/04/23, 10:51 - Araviiii 🎓: Smart money
27/04/23, 12:11 - Harecharan CSE E Amrita CBE: <Media omitted>
27/04/23, 12:13 - Shesadriii 🎓: <Media omitted>
27/04/23, 12:48 - Viswaa Ramasubramanian: <Media omitted>
27/04/23, 12:48 - Viswaa Ramasubramanian: <Media omitted>
27/04/23, 16:12 - Viswaa Ramasubramanian: Hi guys we need to upload the crew member details in the Anokha app as well as the website so pls do fill the form below and also share among ur grps.......
27/04/23, 16:12 - Viswaa Ramasubramanian: https://forms.office.com/r/NR6rNVD0WD
27/04/23, 16:12 - Viswaa Ramasubramanian: pls fill it by 5pm today
27/04/23, 16:12 - Viswaa Ramasubramanian: Fill this form
27/04/23, 16:12 - Viswaa Ramasubramanian: Boiss fill it now itself
27/04/23, 16:17 - Harecharan CSE E Amrita CBE: KKKKKKKKOKOKOKOK
27/04/23, 16:21 - Sanjuuu 🎓: Team name?
27/04/23, 16:22 - Araviiii 🎓: I think it is hospitality?
27/04/23, 16:22 - Araviiii 🎓: I am not sure
27/04/23, 16:22 - Sanjuuu 🎓: Just hospitality?
27/04/23, 16:22 - Sanjuuu 🎓: Did u not fill it?
27/04/23, 16:22 - Araviiii 🎓: Not yet
27/04/23, 16:24 - Araviiii 🎓: Amrita email ID?
27/04/23, 16:24 - Araviiii 🎓: I forgot the format
27/04/23, 16:33 - Phoool Gobiiii  🎓: rollno@cb.students.amrita.edu
27/04/23, 19:19 - Sanjuuu 🎓: Guys come to raaga
27/04/23, 19:19 - Sanjuuu 🎓: It will be good
27/04/23, 19:24 - Sanjuuu 🎓: <Media omitted>
27/04/23, 19:28 - Sanjuuu 🎓: Entire crowd chanting csk
27/04/23, 19:28 - Sanjuuu 🎓: Now dhoni
27/04/23, 19:30 - Sanjuuu 🎓: This message was deleted
27/04/23, 19:39 - Sanjuuu 🎓: <Media omitted>
27/04/23, 19:43 - Sanjuuu 🎓: Ram it is grand
27/04/23, 19:43 - Sanjuuu 🎓: <Media omitted>
27/04/23, 19:43 - Phoool Gobiiii  🎓: I’m coming
27/04/23, 19:43 - Phoool Gobiiii  🎓: I’m having dinner then I’ll be there
27/04/23, 19:43 - Sanjuuu 🎓: Quick
27/04/23, 19:43 - Sanjuuu 🎓: They are closing
27/04/23, 19:43 - Sanjuuu 🎓: That's why
27/04/23, 19:43 - Sanjuuu 🎓: ☠️
27/04/23, 19:44 - Phoool Gobiiii  🎓: What why?
27/04/23, 19:44 - Sooorrrr 🎓: Meaning?
27/04/23, 19:44 - Sanjuuu 🎓: The doors
27/04/23, 20:40 - Phoool Gobiiii  🎓: <Media omitted>
27/04/23, 20:58 - Phoool Gobiiii  🎓: <Media omitted>
27/04/23, 21:23 - Sanjuuu 🎓: Guys anyone still here?
27/04/23, 21:23 - Shesadriii 🎓: 🤚
27/04/23, 21:23 - Phoool Gobiiii  🎓: Me
27/04/23, 21:24 - Sanjuuu 🎓: Where?
27/04/23, 21:25 - Phoool Gobiiii  🎓: Front row
27/04/23, 21:26 - Sanjuuu 🎓: Tf.....srsly
27/04/23, 21:26 - Phoool Gobiiii  🎓: Yes
27/04/23, 21:26 - Sanjuuu 🎓: I'm in the last
27/04/23, 21:26 - Sanjuuu 🎓: Row
27/04/23, 21:26 - Phoool Gobiiii  🎓: Come to the front
27/04/23, 21:26 - Phoool Gobiiii  🎓: Quick
27/04/23, 21:26 - Sanjuuu 🎓: Cmg
27/04/23, 23:34 - Phoool Gobiiii  🎓: Tmrw 9:30 - code fathers @919840365293 @918939677049
27/04/23, 23:35 - Phoool Gobiiii  🎓: Greetings Participants,  
 We are delighted to have you all participating in Code Father. We would like to share the rules of the event before the start of the event.

The event consists of 5 rounds, spanning 2 days (28th and 29th of April).

Day 1 : 
 Session 1 : (9.30 A.M - 12.00 P.M)
    Round 1 - Logical Reasoning 
    Round 2 - Fast typing (3 internal rounds)

 Session 2 : (1.30 P.M - 4.30 P.M)
    Round 3 - UI Design


=> All teams are expected to be present at the venue by 9:15 A.M. Participants entering after 9:40 A.M will not be allowed to participate in the event.

=> Participants can choose to bring their own laptops, or use the computers at the venue.
28/04/23, 07:32 - Phoool Gobiiii  🎓: Greetings participants, 

For the UI design round scheduled for tomorrow (session 2), we are kindly requesting you to create an account on figma(at least one from each team). 
Figma is a UI/UX design tool which is necessary to proceed with that round. The link to sign up is provided below. Sorry for the delayed information.  

Good luck!

https://www.figma.com/signup
28/04/23, 07:32 - Phoool Gobiiii  🎓: @918939677049 @919840365293
28/04/23, 11:41 - Phoool Gobiiii  🎓: <Media omitted>
28/04/23, 11:41 - Phoool Gobiiii  🎓: <Media omitted>
28/04/23, 18:11 - Sanjuuu 🎓: Bois come fast
28/04/23, 18:12 - Sanjuuu 🎓: I have one seat
28/04/23, 18:12 - Sanjuuu 🎓: With me
28/04/23, 18:14 - Sanjuuu 🎓: Mudhal nee mudivum nee actress is here I think
28/04/23, 18:16 - Gannu: Yesss cominggg
28/04/23, 18:32 - Sanjuuu 🎓: Anyone?
28/04/23, 18:33 - Gannu: <Media omitted>
28/04/23, 18:37 - Araviiii 🎓: Where are u guys
28/04/23, 18:38 - Gannu: Back entrance
28/04/23, 18:38 - Gannu: <Media omitted>
28/04/23, 18:38 - Araviiii 🎓: Same
28/04/23, 18:38 - Sanjuuu 🎓: Come to the last row of chairs
28/04/23, 18:38 - Sanjuuu 🎓: I have one place
28/04/23, 18:38 - Sanjuuu 🎓: I'm getting screwed g for hogging it
28/04/23, 18:38 - Sanjuuu 🎓: Pls someone come
28/04/23, 18:39 - Araviiii 🎓: Dei iniya unkaru
28/04/23, 18:39 - Araviiii 🎓: There is a huge crowd behind u
28/04/23, 18:40 - Araviiii 🎓: They won't allow
28/04/23, 18:40 - Sanjuuu 🎓: Np
28/04/23, 18:40 - Sanjuuu 🎓: I've held the place
28/04/23, 18:40 - Araviiii 🎓: It is too tough
28/04/23, 18:48 - Harecharan CSE E Amrita CBE: U sat there?
29/04/23, 09:57 - Gannu: <Media omitted>
29/04/23, 10:15 - Gannu: <Media omitted>
29/04/23, 10:15 - Harecharan CSE E Amrita CBE: gommala
29/04/23, 15:50 - Harecharan CSE E Amrita CBE: Everyone is coming to room before concert right?
29/04/23, 15:50 - Harecharan CSE E Amrita CBE: Where is everyone *
29/04/23, 15:52 - Viswaa Ramasubramanian: Yes
29/04/23, 15:52 - Viswaa Ramasubramanian: We  will be leaving room at 4:40
30/04/23, 00:40 - Sanjuuu 🎓: Bois apply pass monday morning 9 am
30/04/23, 00:40 - Sanjuuu 🎓: Don't forget
30/04/23, 09:14 - Phoool Gobiiii  🎓: All applied passes?
30/04/23, 09:14 - Harecharan CSE E Amrita CBE: <Media omitted>
30/04/23, 09:15 - Phoool Gobiiii  🎓: Gethu nae nee
30/04/23, 09:15 - Shesadriii 🎓: <Media omitted>
30/04/23, 09:20 - Harecharan CSE E Amrita CBE: Cuz I touch grass
30/04/23, 09:21 - Shesadriii 🎓: <Media omitted>
30/04/23, 17:17 - Shesadriii 🎓: MSD !!
30/04/23, 17:18 - Gannu: Always 🤙
30/04/23, 19:16 - Shesadriii 🎓: Ah boiz
30/04/23, 19:16 - Shesadriii 🎓: Matc is stressful huh
01/05/23, 09:46 - Shesadriii 🎓: If.....hare is going to brooks , will he become.....hare-y brooks ?
01/05/23, 10:09 - Sooorrrr 🎓: He might
01/05/23, 21:38 - Viswaa Ramasubramanian: <Media omitted>
01/05/23, 21:52 - Sooorrrr 🎓: <Media omitted>
02/05/23, 05:51 - Phoool Gobiiii  🎓: Guys kindly note the procedure for applying OD for participating in events/workshops:

1. Go to CMS

2. Click on Students > View Students

3. In the navbar visible below, select More > Apply On-duty - Anokha

4. Select Technical events & workshops (department) in the Anokha departments section

5. Select the time slot and course faculty whom you are applying to

6. Enter the course name in the subject field

7. Click apply
02/05/23, 05:51 - Phoool Gobiiii  🎓: Code Fathers @919840365293 @918939677049
02/05/23, 18:39 - Harecharan CSE E Amrita CBE: <Media omitted>
02/05/23, 18:39 - Harecharan CSE E Amrita CBE: <Media omitted>
02/05/23, 18:39 - Harecharan CSE E Amrita CBE: <Media omitted>
02/05/23, 18:39 - Harecharan CSE E Amrita CBE: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:43 - Gannu: <Media omitted>
02/05/23, 18:56 - Shesadriii 🎓: <Media omitted>
02/05/23, 18:58 - Shesadriii 🎓: <Media omitted>
02/05/23, 22:02 - Harecharan CSE E Amrita CBE: https://link.clashroyale.com/invite/friend/en?tag=GGVG090R&token=crpww74e&platform=android
02/05/23, 22:05 - Harecharan CSE E Amrita CBE: https://link.clashroyale.com/invite/friend/en?tag=GGVG090R&token=crpww74e&platform=android
04/05/23, 09:30 - Phoool Gobiiii  🎓: <Media omitted>
04/05/23, 22:13 - Sooorrrr 🎓: <Media omitted>
05/05/23, 09:32 - Harecharan CSE E Amrita CBE: https://equatorial-copper-752.notion.site/Teamspace-Home-858fa33ee86a4adf8336fa8dc7a38ce1
05/05/23, 21:12 - Sooorrrr 🎓: <Media omitted>
05/05/23, 21:23 - Phoool Gobiiii  🎓: Bois bus trip started.. no problem getting to the stop on time ✨
05/05/23, 21:38 - Sooorrrr 🎓: 👍
06/05/23, 08:14 - Gannu: Reached home 🏠
06/05/23, 08:16 - Sooorrrr 🎓: Reached 🏠
06/05/23, 08:17 - Shesadriii 🎓: Reached home 2 hrs ago 🏡
06/05/23, 08:18 - Araviiii 🎓: Reached home bois 💙
06/05/23, 08:20 - Harecharan CSE E Amrita CBE: Flex àa
06/05/23, 08:21 - Shesadriii 🎓: Bruh.....I forgot to send a mssg lol
06/05/23, 08:22 - Harecharan CSE E Amrita CBE: Veetuky pona, engala ella maranthure
06/05/23, 08:22 - Shesadriii 🎓: 😒
06/05/23, 17:44 - Shesadriii 🎓: <Media omitted>
06/05/23, 17:46 - Shesadriii 🎓: Required : 99 runs from 100 balls 😀
06/05/23, 17:47 - Shesadriii 🎓: <Media omitted>
07/05/23, 07:26 - Shesadriii 🎓: <Media omitted>
08/05/23, 09:46 - Shesadriii 🎓: When are you guys coming?
08/05/23, 10:25 - Gannu: Tmrw mrng:)
09/05/23, 19:03 - Sooorrrr 🎓: <Media omitted>
09/05/23, 19:32 - Shesadriii 🎓: <Media omitted>
11/05/23, 16:46 - Sooorrrr 🎓: <Media omitted>
11/05/23, 18:34 - Gannu: <Media omitted>
11/05/23, 18:34 - Gannu: <Media omitted>
11/05/23, 22:06 - Harecharan CSE E Amrita CBE: <Media omitted>
11/05/23, 23:03 - Harecharan CSE E Amrita CBE: <Media omitted>
12/05/23, 16:04 - Sooorrrr 🎓: <Media omitted>
12/05/23, 16:43 - Gannu: <Media omitted>
12/05/23, 23:31 - Gannu: <Media omitted>
13/05/23, 00:08 - Shesadriii 🎓: <Media omitted>
13/05/23, 05:59 - Araviiii 🎓: <Media omitted>
13/05/23, 08:45 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 08:52 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 08:52 - Sooorrrr 🎓: <Media omitted>
13/05/23, 12:36 - Sooorrrr 🎓 added Hari Kesav CSE E Amrita CBE and Vickssss 🎓
13/05/23, 16:23 - Vickssss 🎓: someone pls put proxy for me
13/05/23, 16:23 - Vickssss 🎓: in c20 attendance list
13/05/23, 16:23 - Vickssss 🎓: plzzzzz
13/05/23, 16:23 - Viswaa Ramasubramanian: You deleted this message
13/05/23, 17:10 - Viswaa Ramasubramanian: due to c20 event tdy dinner time has been extended from 8pm to 9:45
13/05/23, 17:11 - Viswaa Ramasubramanian: 7pm*
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:12 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:13 - Phoool Gobiiii  🎓: <Media omitted>
13/05/23, 21:13 - Phoool Gobiiii  🎓: <Media omitted>
14/05/23, 14:05 - Gannu: https://skribbl.io/?0YCGB9oc
14/05/23, 14:09 - Gannu: https://skribbl.io/?H0Cq4ZfZ
15/05/23, 14:40 - Harecharan CSE E Amrita CBE: q1) write a c program to show savings account detail in a bank 
shared memory will conduct the info of the savings acc. they will be depositing money, demonstrate it, solve it using shared memory and thread concepts 


q2) write a c program to implement matrix multiplication using thread concept
15/05/23, 14:45 - Vickssss 🎓: aama
15/05/23, 14:47 - Harecharan CSE E Amrita CBE: loosu i typed it here as a reminder, not as a question
15/05/23, 15:00 - Araviiii 🎓: New to grp da konchum time kudu, odana thitatha 🤣 , paiya 👦🏻 phazagipan
15/05/23, 15:01 - Harecharan CSE E Amrita CBE: ok da
18/05/23, 14:14 - Gannu: <Media omitted>
19/05/23, 18:50 - Shesadriii 🎓: <Media omitted>
19/05/23, 18:50 - Shesadriii 🎓: <Media omitted>
19/05/23, 18:50 - Shesadriii 🎓: <Media omitted>
19/05/23, 19:40 - Shesadriii 🎓: Reached Home 🙂 🏠
19/05/23, 21:03 - Araviiii 🎓: <Media omitted>
19/05/23, 21:04 - Araviiii 🎓: Atlast 👍🏻
20/05/23, 08:33 - Viswaa Ramasubramanian: Reached home 🏠
20/05/23, 09:09 - Sooorrrr 🎓: Reached🏠
20/05/23, 09:15 - Gannu: Reached homeee
20/05/23, 16:24 - Shesadriii 🎓: Oh god
20/05/23, 16:24 - Shesadriii 🎓: CSK .......they are destroying
20/05/23, 16:24 - Shesadriii 🎓: 3 sixes !!!
20/05/23, 16:24 - Shesadriii 🎓: 116 for no loss
22/05/23, 11:28 - Phoool Gobiiii  🎓: https://youtu.be/YMyofREc5Jk
22/05/23, 11:28 - Shesadriii 🎓: Ted talks ??!??
22/05/23, 11:29 - Phoool Gobiiii  🎓: For business comm
24/05/23, 13:10 - Sooorrrr 🎓: <Media omitted>
24/05/23, 13:10 - Sooorrrr 🎓: <Media omitted>
24/05/23, 13:12 - Shesadriii 🎓: Finally hare committed
24/05/23, 22:26 - Gannu: .text
.globl main 
main:
	li $v0 5
	syscall
	move $t0 $v0 #n
	li $t1 0 #i
	li $t3 0 #index
	loop2:
		beq $t1 $t0 exit1
		li $v0 5
		syscall
		move $t2 $v0
		sw $t2 arr($t3)
		addi $t3 $t3 4
		addi $t1 $t1 1
		j loop
	exit1:
		li $t1 0 #i
		li $t3 0 #index
		loop1:
			beq $t1 $t0 exit
			lw $t4 arr($t3)
			sw $t4 arrn($t3)
			lw $t5 arrn($t3)
			li $v0 1
			move $a0 $t5
			syscall
			addi $t3 $t3 4
			addi $t1 $t1 1
			j loop1
	exit:
		li $v0 10
		syscall
.data
arr:.space 1000	
arrn:.space 1000
24/05/23, 23:00 - Gannu: .text
.globl main
main:
	li $v0 5
	syscall
	move $t0 $v0 #n
	li $t1 0
	li $t3 0
	loop:
		beq $t1 $t0 prin
		li $v0 5
		syscall
		move $t2 $v0
		sw $t2 a($t3)
		addi $t3 $t3 4
		addi $t1 $t1 1
		j loop
	prin:
		li $t1 0
		li $t3 0
		loop1:
		beq $t1 $t0 exit
		lw $t4 a($t3)
		li $v0 1
		move $a0 $t4
		syscall
		addi $t3 $t3 4
		addi $t1 $t1 1
		j loop1
	exit:
		li $v0 10
		syscall
.data
a: .space 100
25/05/23, 13:50 - Sooorrrr 🎓: <Media omitted>
25/05/23, 13:51 - Araviiii 🎓: Ghee rice
25/05/23, 13:51 - Phoool Gobiiii  🎓: Kachori 2
Horlicks 1
25/05/23, 13:51 - Sooorrrr 🎓: Do you have the time though
25/05/23, 13:52 - Harecharan CSE E Amrita CBE: Why da r u depressed
25/05/23, 13:52 - Harecharan CSE E Amrita CBE: Order snacks
25/05/23, 17:42 - Shesadriii 🎓: You could get up to ₹150 worth of cashback offers https://gpay.app.goo.gl/7hXgdT
26/05/23, 14:15 - Shesadriii 🎓: <Media omitted>
26/05/23, 15:53 - Shesadriii 🎓: Reached home boiz
26/05/23, 16:10 - Shesadriii 🎓: <Media omitted>
27/05/23, 14:25 - Araviiii 🎓: <Media omitted>
27/05/23, 14:25 - Araviiii 🎓: kadu Mala aaru
27/05/23, 15:01 - Viswaa Ramasubramanian: Palakkad pungaaaa
27/05/23, 15:01 - Viswaa Ramasubramanian: enga namba porom palakkadukuu
27/05/23, 15:01 - Harecharan CSE E Amrita CBE: Du du du du du dora Du du du du du dora
27/05/23, 15:48 - Araviiii 🎓: <Media omitted>
27/05/23, 15:48 - Araviiii 🎓: <Media omitted>
27/05/23, 15:48 - Araviiii 🎓: <Media omitted>
28/05/23, 23:24 - Gannu: Dear  Students,
Aptitude Internal exam 2 is scheduled (30/05/23) during our class time.

Kindly bring your laptop💻 with fully charged. 

*Topic:* Data Interpretation, Binary Logic, Logical connectives, Seating Arrangement, Sequencing and scheduling, Equations. 

*Pattern:* 25 Questions >> 40 Minutes.

Note: *Calculator & Chat GPT is ❌not allowed*👍🏻
Bring rough paper 📋and pen 🖊️,

Kindly check your *AUMS LOGIN CREDENTIALS* before come to the exam hall.

*Regards*
Aptitude Team 🙏🏻
29/05/23, 19:01 - Harecharan CSE E Amrita CBE: <Media omitted>
29/05/23, 19:01 - Araviiii 🎓: MBA or main canteen?
29/05/23, 19:02 - Hari Kesav CSE E Amrita CBE: Obviously mba
29/05/23, 19:02 - Araviiii 🎓: 1 chocos and 1 butter milk
29/05/23, 19:03 - Araviiii 🎓: U are ryt bro
31/05/23, 22:08 - Araviiii 🎓: Boiss
31/05/23, 22:08 - Araviiii 🎓: I have applied pass
31/05/23, 22:08 - Araviiii 🎓: Not forget to apply it
31/05/23, 22:09 - Araviiii 🎓: Dont*
02/06/23, 11:07 - Araviiii 🎓: Guys nandhini is in bay 6
02/06/23, 11:39 - Harecharan CSE E Amrita CBE: Lemon juice now available behind canteen outside
02/06/23, 11:39 - Harecharan CSE E Amrita CBE: Quick
02/06/23, 11:43 - Vickssss 🎓: https://gp.ngrok.dev/rateIT/index_ASC23APR17.php
02/06/23, 13:09 - Sanjuuu 🎓: https://gp.ngrok.dev/rateIT/index_IOT_MISC_3.php
02/06/23, 13:10 - Sanjuuu 🎓: Give 5 stars if possible
02/06/23, 13:10 - Harecharan CSE E Amrita CBE: whose it is?
02/06/23, 13:40 - Sanjuuu 🎓: A friend
03/06/23, 07:44 - Viswaa Ramasubramanian: Reached home boisss
03/06/23, 08:00 - Sooorrrr 🎓: Reached🏠
03/06/23, 08:10 - Gannu: Reached home 🏡
03/06/23, 08:24 - Araviiii 🎓: Reached home 🏡
03/06/23, 21:42 - Harecharan CSE E Amrita CBE: <Media omitted>
04/06/23, 15:35 - Sanjuuu 🎓: Guys anyone up for attending ARR concert?
04/06/23, 15:35 - Sanjuuu 🎓: 122th August
04/06/23, 15:35 - Sanjuuu 🎓: 12th*
04/06/23, 15:35 - Sanjuuu 🎓: In chennai
04/06/23, 15:35 - Sanjuuu 🎓: I'm going
04/06/23, 15:37 - Harecharan CSE E Amrita CBE: i cant come da and that too in chennai
04/06/23, 15:37 - Gannu: <Media omitted>
04/06/23, 15:37 - Gannu: <Media omitted>
04/06/23, 21:38 - Araviiii 🎓: <Media omitted>
04/06/23, 21:39 - Harecharan CSE E Amrita CBE: Ivalavu Ella avana padika venaamnu solda
04/06/23, 21:39 - Harecharan CSE E Amrita CBE: Enaku Baku Baku nu iruku
05/06/23, 14:47 - Araviiii 🎓: anyone set 3?
07/06/23, 10:12 - Phoool Gobiiii  🎓: https://turingmachinesimulator.com
08/06/23, 18:43 - Harecharan CSE E Amrita CBE: <Media omitted>
08/06/23, 20:59 - Araviiii 🎓: <Media omitted>
12/06/23, 20:46 - Sooorrrr 🎓: <Media omitted>
13/06/23, 12:12 - Sooorrrr 🎓: <Media omitted>
13/06/23, 13:23 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 16:11 - Vickssss 🎓: <Media omitted>
13/06/23, 19:01 - Shesadriii 🎓: https://youtube.com/shorts/dKF1RmGppa4?feature=share
14/06/23, 10:45 - Shesadriii 🎓: <Media omitted>
15/06/23, 15:32 - Shesadriii 🎓: Call me if anyone comes out
16/06/23, 08:17 - Sooorrrr 🎓: Reached 🏠
16/06/23, 08:37 - Gannu: Reached home 🏠
16/06/23, 12:43 - Harecharan CSE E Amrita CBE: COA WEIGHTAGE
QUIZ 5 5
TUTORIAL 5
LAB 10 10 10 
MIDTERM 20
ENDSEM 35 
TOTal 100
16/06/23, 12:43 - Harecharan CSE E Amrita CBE: weightatge
17/06/23, 14:10 - Shesadriii 🎓: <Media omitted>
17/06/23, 14:11 - Phoool Gobiiii  🎓: <Media omitted>
17/06/23, 14:12 - Phoool Gobiiii  🎓: Very small but compact
17/06/23, 14:17 - Shesadriii 🎓: That's qhat
17/06/23, 14:17 - Shesadriii 🎓: She
17/06/23, 14:18 - Harecharan CSE E Amrita CBE: <Media omitted>
17/06/23, 14:18 - Harecharan CSE E Amrita CBE: <Media omitted>
17/06/23, 14:18 - Harecharan CSE E Amrita CBE: <Media omitted>
17/06/23, 14:18 - Harecharan CSE E Amrita CBE: <Media omitted>
17/06/23, 16:06 - Sanjuuu 🎓: bois dont forget the avp presentation on monday
18/06/23, 21:23 - Viswaa Ramasubramanian: <Media omitted>
19/06/23, 11:04 - Araviiii 🎓: <Media omitted>
19/06/23, 11:06 - Araviiii 🎓: <Media omitted>
19/06/23, 11:19 - Araviiii 🎓: <Media omitted>
19/06/23, 11:19 - Araviiii 🎓: <Media omitted>
20/06/23, 08:18 - Sanjuuu 🎓: https://amritavishwavidyapeetham-my.sharepoint.com/:v:/g/personal/cb_en_u4cse21453_cb_students_amrita_edu/ESat8KRxdSdMuxs9kmcWCMgBry9W9uFjB_P9YwbYsZ2Exw?e=XtJNWi
20/06/23, 09:53 - Sooorrrr 🎓: <Media omitted>
20/06/23, 12:38 - Sanjuuu 🎓: <Media omitted>
20/06/23, 12:41 - Araviiii 🎓: This message was deleted
20/06/23, 12:45 - Araviiii 🎓: This message was deleted
20/06/23, 12:45 - Araviiii 🎓: <Media omitted>
20/06/23, 17:26 - Viswaa Ramasubramanian: Boisss
20/06/23, 17:26 - Viswaa Ramasubramanian: Call me once ur dsa eval gets over
20/06/23, 18:13 - Shesadriii 🎓: Time : 6:05 pm ( eval got over )
Did we call ? *NO*
20/06/23, 18:14 - Viswaa Ramasubramanian: Ippah enna solla vara
20/06/23, 18:14 - Viswaa Ramasubramanian: Mudinjiricha illYa??
20/06/23, 18:14 - Araviiii 🎓: S got over
20/06/23, 18:14 - Araviiii 🎓: Unnaakula call Pana mudiyathu nu shreyas solra
20/06/23, 18:15 - Araviiii 🎓: Y anything imp?
20/06/23, 18:17 - Viswaa Ramasubramanian: Nothing raaa
21/06/23, 01:43 - Gannu: https://youtu.be/sb4jo4P4ZLI
21/06/23, 21:01 - Gannu: <Media omitted>
21/06/23, 21:01 - Gannu: <Media omitted>
21/06/23, 21:01 - Gannu: <Media omitted>
21/06/23, 21:01 - Gannu: <Media omitted>
21/06/23, 21:01 - Gannu: <Media omitted>
21/06/23, 22:12 - Harecharan CSE E Amrita CBE: <Media omitted>
22/06/23, 14:05 - Harecharan CSE E Amrita CBE: <Media omitted>
22/06/23, 20:46 - Gannu: <Media omitted>
23/06/23, 08:34 - Sooorrrr 🎓: Certainly! Here are the general rules for capitalization of sentences:

The first word of a sentence is always capitalized.
Example: The cat is sitting on the mat.
Proper nouns, which are specific names of people, places, organizations, and things, are capitalized.
Example: I visited Paris last summer.
The pronoun "I" is always capitalized, regardless of its position in a sentence.
Example: I enjoy reading books.
The first word in a quotation or direct speech is capitalized.
Example: She said, "I'll be there in a minute."
The first word after a colon (:) is capitalized if it introduces a complete sentence.
Example: There is one thing I value most: Time.
Capitalize the first word of each item in a list if each item is a complete sentence or follows a colon.
Example: The requirements for this project are as follows:
- Submit your proposal by Friday.
- Include a detailed budget.
Capitalize proper adjectives, which are adjectives derived from proper nouns.
Example: Italian cuisine is famous worldwide.
The first and last words of titles and subtitles, as well as important words within them, are usually capitalized. However, short prepositions (e.g., "in," "on," "at") and articles (e.g., "a," "an," "the") are not capitalized unless they are the first or last word of the title.
Example: "The Catcher in the Rye" by J.D. Salinger
It's important to note that these rules are general guidelines and may vary in specific cases or writing styles. Always consult the appropriate style guide or follow the specific instructions given to you for any formal writing assignments.
23/06/23, 14:02 - Gannu: <Media omitted>
23/06/23, 15:11 - Vickssss 🎓: <Media omitted>
23/06/23, 23:29 - Sooorrrr 🎓: <Media omitted>
23/06/23, 23:40 - Sooorrrr 🎓: https://drive.google.com/drive/folders/1OrXqhpEpicePPQhY8n49RuNxN1CSiv8v?usp=sharing

All PPTs of Chapters 1-10 of AVP Mahabharata course are available for download at this link
24/06/23, 08:02 - Sooorrrr 🎓: <Media omitted>
24/06/23, 08:37 - Sooorrrr 🎓: https://www.youtube.com/watch?v=p2zMXSXhZ9M
24/06/23, 09:15 - Viswaa Ramasubramanian: <Media omitted>
24/06/23, 09:50 - Sooorrrr 🎓: <Media omitted>
24/06/23, 19:19 - Viswaa Ramasubramanian: <Media omitted>
24/06/23, 19:20 - Phoool Gobiiii  🎓: Ram - ghee roast, Tropicana (not chilled)
Surya - porottas, mushroom, buttermilk
24/06/23, 19:20 - Shesadriii 🎓: Ghee roast ,
24/06/23, 19:20 - Shesadriii 🎓: Buttermilk
24/06/23, 19:22 - Viswaa Ramasubramanian: Anyone gobi manchurian??
24/06/23, 19:22 - Shesadriii 🎓: Sss
24/06/23, 19:22 - Shesadriii 🎓: 1
24/06/23, 19:22 - Viswaa Ramasubramanian: Ok
24/06/23, 19:23 - Araviiii 🎓: for me one ghee roast
24/06/23, 19:23 - Araviiii 🎓: I am coming
24/06/23, 19:23 - Viswaa Ramasubramanian: Ok
25/06/23, 10:24 - Sooorrrr 🎓: <Media omitted>
25/06/23, 10:24 - Sooorrrr 🎓: <Media omitted>
25/06/23, 10:24 - Sooorrrr 🎓: <Media omitted>
25/06/23, 11:35 - Harecharan CSE E Amrita CBE: <Media omitted>
25/06/23, 11:35 - Harecharan CSE E Amrita CBE: <Media omitted>
25/06/23, 11:36 - Harecharan CSE E Amrita CBE: explain me afterwards da gys
25/06/23, 11:49 - Sanjuuu 🎓: can anyone send the maths textbook
25/06/23, 11:49 - Sanjuuu 🎓: the p1 p2 portions one
25/06/23, 12:30 - Harecharan CSE E Amrita CBE: <Media omitted>
25/06/23, 12:56 - Araviiii 🎓: <Media omitted>
25/06/23, 12:56 - Araviiii 🎓: Dei IT pola da
25/06/23, 13:05 - Viswaa Ramasubramanian: <Media omitted>
25/06/23, 13:06 - Shesadriii 🎓: 8 chapati 2 paneer
25/06/23, 13:07 - Phoool Gobiiii  🎓: Chapati - 7
Panner - 3
Onion vada - 3
Swiss roll 1
Ram + Aravindh + Surya
25/06/23, 19:23 - Araviiii 🎓: <Media omitted>
25/06/23, 19:23 - Araviiii 🎓: Say fast guys
25/06/23, 19:23 - Harecharan CSE E Amrita CBE: Gobi roast
25/06/23, 19:24 - Sooorrrr 🎓: Battura channa masala 
Gobi roast
Buttermilk
25/06/23, 19:24 - Araviiii 🎓: It is crowded here
25/06/23, 19:24 - Sooorrrr 🎓: For me and aravindh
25/06/23, 19:25 - Phoool Gobiiii  🎓: Gobi roast - 1
Battura - 8
Chana 3
Rose milk 1
Buttermilk 1
Ram + Viswaa + Shrey + Ganesh
25/06/23, 19:26 - Araviiii 🎓: All Butter milk is changed to rose milk
25/06/23, 19:26 - Araviiii 🎓: Since Butter milk isn't there
26/06/23, 14:29 - Harecharan CSE E Amrita CBE: what about the reference book for coa ? u guys have it?
26/06/23, 17:19 - Viswaa Ramasubramanian: <Media omitted>
26/06/23, 18:59 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=oETOwVBzu1s
26/06/23, 18:59 - Harecharan CSE E Amrita CBE: thank me later
26/06/23, 19:13 - Harecharan CSE E Amrita CBE: 😊
27/06/23, 15:50 - Harecharan CSE E Amrita CBE: <Media omitted>
27/06/23, 15:51 - Araviiii 🎓: sathiyama theriyathu
27/06/23, 23:31 - Harecharan CSE E Amrita CBE: <Media omitted>
28/06/23, 19:10 - Viswaa Ramasubramanian: <Media omitted>
28/06/23, 19:14 - Phoool Gobiiii  🎓: Porotta 3
Kadai mushroom 1
Tropicana 1
Chettinad 5
Ghee roast 2
Butter milk 1
Mango 1
Orange 1
Chocos 1
28/06/23, 19:15 - Viswaa Ramasubramanian: Porotta 3
Kadai mushroom 1
Tropicana 1
Chettinad 6
Ghee roast 4
Butter milk 2
Mango 1
Orange 1
Chocos 1
28/06/23, 19:18 - Viswaa Ramasubramanian: <Media omitted>
28/06/23, 19:18 - Viswaa Ramasubramanian: Mango juice not available
29/06/23, 09:39 - Araviiii 🎓: Guys, ping me once if u are applying "DAY PASS".
29/06/23, 09:40 - Phoool Gobiiii  🎓: I'm applying now
29/06/23, 09:40 - Phoool Gobiiii  🎓: Do it
29/06/23, 09:40 - Araviiii 🎓: k
29/06/23, 11:41 - Shesadriii 🎓: <Media omitted>
29/06/23, 15:11 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 15:11 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 15:11 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 15:11 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 17:47 - Araviiii 🎓: dei
29/06/23, 17:47 - Harecharan CSE E Amrita CBE: what
29/06/23, 17:47 - Araviiii 🎓: timings sollu-nga da
29/06/23, 19:06 - Araviiii 🎓: dei sollungada
29/06/23, 19:08 - Shesadriii 🎓: 12pm
29/06/23, 19:08 - Shesadriii 🎓: Saturday
29/06/23, 19:17 - Araviiii 🎓: k
29/06/23, 22:36 - Harecharan CSE E Amrita CBE: A European roulette wheel has 18 red slots, 18
black slots, and 1 green slot.
It is reasonable to assume that the ball is equally
likely to land in any of the 37 slots.
What is the probability that the first time the
ball lands in a red slot occurs on the 5th spin?
29/06/23, 22:36 - Harecharan CSE E Amrita CBE: <Media omitted>
29/06/23, 22:36 - Harecharan CSE E Amrita CBE: What is the probability the first time the ball
lands in a red slot occurs at some point after the
sixth spin?
29/06/23, 22:44 - Harecharan CSE E Amrita CBE: <Media omitted>
29/06/23, 22:44 - Harecharan CSE E Amrita CBE: https://youtu.be/Jm_Ch-iESBg?t=750
29/06/23, 22:59 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 22:59 - Phoool Gobiiii  🎓: <Media omitted>
29/06/23, 23:15 - Sooorrrr 🎓: <Media omitted>
29/06/23, 23:15 - Sooorrrr 🎓: <Media omitted>
30/06/23, 01:13 - Sooorrrr 🎓: <Media omitted>
30/06/23, 01:13 - Sooorrrr 🎓: <Media omitted>
30/06/23, 01:13 - Sooorrrr 🎓: <Media omitted>
01/07/23, 08:09 - Araviiii 🎓: Guys
01/07/23, 08:09 - Araviiii 🎓: Is the pass got proved?
01/07/23, 08:44 - Shesadriii 🎓: Yeah
01/07/23, 10:01 - Araviiii 🎓: <Media omitted>
01/07/23, 10:03 - Sooorrrr 🎓: Dosa - 1 set
Sukku coffee- 1
Idli - 1 set
Egg dosa- 1 set
02/07/23, 00:15 - Sanjuuu 🎓: import turtle

class Graph:
    def __init__(self):
        self.graph = {}

    def add_vertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def add_edge(self, vertex1, vertex2):
        if vertex1 in self.graph and vertex2 in self.graph:
            self.graph[vertex1].append(vertex2)
            self.graph[vertex2].append(vertex1)

    def get_vertices(self):
        return list(self.graph.keys())

    def get_edges(self):
        edges = []
        for vertex in self.graph:
            for adjacent_vertex in self.graph[vertex]:
                if (adjacent_vertex, vertex) not in edges:
                    edges.append((vertex, adjacent_vertex))
        return edges

    def get_adjacent_vertices(self, vertex):
        if vertex in self.graph:
            return self.graph[vertex]
        return []

    def bfs(self, vertex):
        visited = [vertex]
        queue = [vertex]
        while queue:
            head = queue.pop(0)
            if self.graph[head] == []:
                break
            else:
                for adjacent_vertex in self.graph[head]:
                    if adjacent_vertex not in visited:
                        visited.append(adjacent_vertex)
                        queue.append(adjacent_vertex)
        return visited

    def dfs(self, vertex):
        visited = [vertex]
        self.dfs_helper(vertex, visited)
        return visited

    def dfs_helper(self, vertex, visited):
        for adjacent_vertex in self.graph[vertex]:
            if adjacent_vertex not in visited:
                visited.append(adjacent_vertex)
                self.dfs_helper(adjacent_vertex, visited)

    def draw_graph(self):
        screen = turtle.Screen()
        screen.setup(800, 600)
        pen = turtle.Turtle()
        pen.speed(5)

        # Determine the position for each vertex
        positions = self.calculate_positions()

        # Draw edges
        for vertex, adjacent_vertices in self.graph.items():
            x1, y1 = positions[vertex]
            for adjacent_vertex in adjacent_vertices:
                x2, y2 = positions[adjacent_vertex]
                pen.penup()
                pen.goto(x1, y1)
                pen.pendown()
                pen.goto(x2, y2)

        # Draw vertices
        for vertex, position in positions.items():
            x, y = position
            pen.penup()
            pen.goto(x, y - 10)  # Position the turtle slightly above the vertex
            pen.pendown()
            pen.write(str(vertex), align="center", font=("Arial", 12, "normal"))

        pen.hideturtle()
        turtle.done()

    def calculate_positions(self):
        num_vertices = len(self.graph)
        positions = {}
        angle = 360 / num_vertices
        radius = 200

        for i, vertex in enumerate(self.graph.keys()):
            x = radius * turtle.math.sin(turtle.math.radians(i * angle))
            y = radius * turtle.math.cos(turtle.math.radians(i * angle))
            positions[vertex] = (x, y)

        return positions


# Example usage
graph = Graph()

# adding vertices
graph.add_vertex(1)
graph.add_vertex(2)
graph.add_vertex(3)
graph.add_vertex(4)
graph.add_vertex(5)
graph.add_vertex(6)
graph.add_vertex(7)
graph.add_edge(1,4)
graph.add_edge(1,5)
graph.add_edge(1,2)
graph.add_edge(2,1)
graph.add_edge(6,7)
graph.add_edge(2,6)
graph.add_edge(2,3)

print("Vertices:", graph.get_vertices())

# Perform a depth-first search from vertex '1'
# dfs_result = graph.dfs(1)
# print("DFS:", dfs_result)

# Draw the graph
graph.draw_graph()
02/07/23, 10:13 - Sanjuuu 🎓: topological sorting code anyone?
02/07/23, 19:09 - Phoool Gobiiii  🎓: <Media omitted>
02/07/23, 23:20 - Araviiii 🎓: https://www.javatpoint.com/avl-tree
02/07/23, 23:40 - Gannu: https://www.youtube.com/watch?v=YWqla0UX-38&ab_channel=Jenny%27sLecturesCSIT
03/07/23, 11:50 - Sooorrrr 🎓: <Media omitted>
03/07/23, 11:52 - Sanjuuu 🎓: <Media omitted>
03/07/23, 12:44 - Shesadriii 🎓: INF = 9999

def printSolution(nV,distance):                     
    for i in range(nV):                            
        for j in range(nV):
            if (distance[i][j] == INF):
                print("INF", end =" ")
            else:
                print(distance[i][j], end =" ")
        print(" ")
        
def floydWarshall(nV,G):
    distance = G                            # Time complexity is O(V^3)
    for k in range(nV):                     # Space complexity is O(V^2)   
        for i in range(nV):
            for j in range(nV):
                distance[i][j] = min(distance[i][j] , distance[i][k] + distance[k][j])
                
    printSolution(nV,distance)

G=[[0,8,INF,1],
   [INF,0,1,INF],
   [4,INF,0,INF],
   [INF,2,9,1]
   ]

floydWarshall(4,G)
03/07/23, 13:06 - Harecharan CSE E Amrita CBE: class MinHeap:
    def __init__(self):
        self.heap = []
    
    def parent(self, i):
        return (i - 1) // 2
    
    def left_child(self, i):
        return (2 * i) + 1
    
    def right_child(self, i):
        return (2 * i) + 2
    
    def has_parent(self, i):
        return self.parent(i) >= 0
    
    def has_left_child(self, i):
        return self.left_child(i) < len(self.heap)
    
    def has_right_child(self, i):
        return self.right_child(i) < len(self.heap)
    
    def swap(self, i, j):
        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]
    
    def heapify_up(self, i):
        while (self.has_parent(i) and self.heap[i] < self.heap[self.parent(i)]):
            parent_index = self.parent(i)
            self.swap(i, parent_index)
            i = parent_index
    
    def heapify_down(self, i):
        while self.has_left_child(i):
            smallest_child_index = self.left_child(i)
            if self.has_right_child(i) and self.heap[self.right_child(i)] < self.heap[smallest_child_index]:
                smallest_child_index = self.right_child(i)
            
            if self.heap[i] < self.heap[smallest_child_index]:
                break
            
            self.swap(i, smallest_child_index)
            i = smallest_child_index
    
    def insert(self, item):
        self.heap.append(item)
        self.heapify_up(len(self.heap) - 1)
    
    def extract_min(self):
        if len(self.heap) == 0:
            raise IndexError("Heap is empty")
        
        min_item = self.heap[0]
        last_item = self.heap.pop()
        
        if len(self.heap) > 0:
            self.heap[0] = last_item
            self.heapify_down(0)
        
        return min_item
    
    def peek_min(self):
        if len(self.heap) == 0:
            raise IndexError("Heap is empty")
        
        return self.heap[0]
    
    def is_empty(self):
        return len(self.heap) == 0
heap = MinHeap()
heap.insert(5)
heap.insert(3)
heap.insert(7)
print(heap.extract_min())  # Output: 3
print(heap.peek_min())     # Output: 5
print(heap.is_empty())     # Output: False
03/07/23, 13:29 - Phoool Gobiiii  🎓: Bois venue?
03/07/23, 16:35 - Araviiii 🎓: Ab 2 FF lab 2
03/07/23, 16:40 - Shesadriii 🎓: Ab2 FF lab 2
Hope it is helpful 😊
03/07/23, 22:41 - Phoool Gobiiii  🎓: <Media omitted>
03/07/23, 22:42 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 12:22 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 12:34 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 14:56 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 14:56 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 14:56 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 14:56 - Phoool Gobiiii  🎓: <Media omitted>
04/07/23, 18:46 - Harecharan CSE E Amrita CBE: <Media omitted>
04/07/23, 18:56 - Sanjuuu 🎓: <Media omitted>
04/07/23, 18:56 - Sanjuuu 🎓: can anyone minimize this and send sol
04/07/23, 23:51 - Harecharan CSE E Amrita CBE: <Media omitted>
05/07/23, 01:51 - Phoool Gobiiii  🎓: <Media omitted>
05/07/23, 01:51 - Phoool Gobiiii  🎓: <Media omitted>
05/07/23, 01:51 - Phoool Gobiiii  🎓: <Media omitted>
05/07/23, 01:51 - Phoool Gobiiii  🎓: <Media omitted>
05/07/23, 04:45 - Hari Kesav CSE E Amrita CBE: <Media omitted>
05/07/23, 08:00 - Araviiii 🎓: <Media omitted>
05/07/23, 11:27 - Shesadriii 🎓: <Media omitted>
05/07/23, 13:05 - Shesadriii 🎓: <Media omitted>
05/07/23, 13:07 - Sooorrrr 🎓: Chapati paneer mutter
05/07/23, 13:07 - Sooorrrr 🎓: 2 samosa
05/07/23, 13:07 - Shesadriii 🎓: 3 chapati , mutter panneer and butter mlk
05/07/23, 13:08 - Harecharan CSE E Amrita CBE: Schezwan 1/2
05/07/23, 21:42 - Sooorrrr 🎓: <Media omitted>
06/07/23, 11:23 - Gannu: https://www.easycodingzone.com/2021/07/c-program-of-disk-scheduling-algorithms.html
06/07/23, 11:25 - Gannu: https://www.youtube.com/playlist?list=PL8tc66sMn9Kjt2Wf5H9O-TMqZFQukoCQ1
06/07/23, 11:28 - Gannu: https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/
06/07/23, 11:38 - Araviiii 🎓: <Media omitted>
06/07/23, 11:39 - Araviiii 🎓: <Media omitted>
06/07/23, 11:39 - Araviiii 🎓: Remember this bois
06/07/23, 11:39 - Araviiii 🎓: That's my bed
06/07/23, 11:40 - Araviiii 🎓: And my suitcase
06/07/23, 11:46 - Araviiii 🎓: Bois today evening 5 30 pm cloak room will be open again if we come again as a grp and not by single person ...and we need to inform to our warden ..
06/07/23, 12:45 - Harecharan CSE E Amrita CBE: <Media omitted>
06/07/23, 13:35 - Phoool Gobiiii  🎓: # Deadlock summary

A deadlocked state occurs when two or more processes are waiting indeﬁnitely for an event that can be caused only by one of the waiting processes. There are three principal methods for dealing with deadlocks:

- Use some protocol to prevent or avoid deadlocks, ensuring that the system will never enter a deadlocked state.
- Allow the system to enter a deadlocked state, detect it, and then recover.
- Ignore the problem altogether and pretend that deadlocks never occur in the system.

The third solution is the one used by most operating systems, including Linux and Windows.

A deadlock can occur only if four necessary conditions hold simultaneously in the system: mutual exclusion, hold and wait, no preemption, and circular wait. To prevent deadlocks, we can ensure that at least one of the necessary conditions never holds.

A method for avoiding deadlocks, rather than preventing them, requires that the operating system have a priori information about how each process will utilize system resources. The banker’s algorithm, for example, requires a priori information about the maximum number of each resource class that each process may request. Using this information, we can deﬁne a deadlockavoidance algorithm.

If a system does not employ a protocol to ensure that deadlocks will never occur, then a detection-and-recovery scheme may be employed. A deadlockdetection algorithm must be invoked to determine whether a deadlock has occurred. If a deadlock is detected, the system must recover either by terminating some of the deadlocked processes or by preempting resources from some of the deadlocked processes.

Where preemption is used to deal with deadlocks, three issues must be addressed: selecting a victim, rollback, and starvation. In a system that selects victims for rollback primarily on the basis of cost factors, starvation may occur, and the selected process can never complete its designated task.

Researchers have argued that none of the basic approaches alone is appropriate for the entire spectrum of resource-allocation problems in operating systems. The basic approaches can be combined, however, allowing us to select an optimal approach for each class of resources in a system.
06/07/23, 13:41 - Harecharan CSE E Amrita CBE: This message was deleted
06/07/23, 15:44 - Harecharan CSE E Amrita CBE: <Media omitted>
06/07/23, 18:45 - Viswaa Ramasubramanian: ```
# Python3 implementation of FIFO page
# replacement in Operating Systems.
from queue import Queue

# Function to find page faults using FIFO
def pageFaults(pages, n, capacity):
	
	# To represent set of current pages.
	# We use an unordered_set so that we
	# quickly check if a page is present
	# in set or not
	s = set()

	# To store the pages in FIFO manner
	indexes = Queue()

	# Start from initial page
	page_faults = 0
	for i in range(n):
		
		# Check if the set can hold
		# more pages
		if (len(s) < capacity):
			
			# Insert it into set if not present
			# already which represents page fault
			if (pages[i] not in s):
				s.add(pages[i])

				# increment page fault
				page_faults += 1

				# Push the current page into
				# the queue
				indexes.put(pages[i])

		# If the set is full then need to perform FIFO
		# i.e. remove the first page of the queue from
		# set and queue both and insert the current page
		else:
			
			# Check if current page is not
			# already present in the set
			if (pages[i] not in s):
				
				# Pop the first page from the queue
				val = indexes.queue[0]

				indexes.get()

				# Remove the indexes page
				s.remove(val)

				# insert the current page
				s.add(pages[i])

				# push the current page into
				# the queue
				indexes.put(pages[i])

				# Increment page faults
				page_faults += 1

	return page_faults

# Driver code
if __name__ == '__main__':
	pages = [7, 0, 1, 2, 0, 3, 0,
				4, 2, 3, 0, 3, 2]
	n = len(pages)
	capacity = 4
	print(pageFaults(pages, n, capacity))

# This code is contributed by PranchalK
```
06/07/23, 18:45 - Viswaa Ramasubramanian: ```
import array

def optimalPage(pg, pn, fn):
	"""
	Function to find the optimal page replacement
	using the optimal page replacement algorithm
	"""
	# Create an array for given number of
	# frames and initialize it as empty.
	fr = array.array('i', [-1] * fn)

	# Traverse through page reference array
	# and check for miss and hit.
	hit = 0
	for i in range(pn):
		# Page found in a frame : HIT
		found = False
		for j in range(fn):
			if fr[j] == pg[i]:
				hit += 1
				found = True
				break

		if found:
			continue

		# Page not found in a frame : MISS

		# If there is space available in frames.
		emptyFrame = False
		for j in range(fn):
			if fr[j] == -1:
				fr[j] = pg[i]
				emptyFrame = True
				break

		if emptyFrame:
			continue

		# Find the page to be replaced.
		farthest = -1
		replaceIndex = -1
		for j in range(fn):
			k = i + 1
			while(k < pn):
				if fr[j] == pg[k]:
					if k > farthest:
						farthest = k
						replaceIndex = j
					break
				k += 1
			if k == pn:
				replaceIndex = j
				break
		fr[replaceIndex] = pg[i]

	print("No. of hits =", hit)
	print("No. of misses =", pn - hit)

if __name__ == "__main__":
	pg = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]
	pn = len(pg)
	fn = 4
	optimalPage(pg, pn, fn)
```
06/07/23, 18:45 - Viswaa Ramasubramanian: ```
# Python3 program for page replacement algorithm

# Driver code
capacity = 4
processList = [ 7, 0, 1, 2, 0, 3, 0,
				4, 2, 3, 0, 3, 2]
				
# List of current pages in Main Memory
s = []

pageFaults = 0
# pageHits = 0

for i in processList:

	# If i is not present in currentPages list
	if i not in s:

		# Check if the list can hold equal pages
		if(len(s) == capacity):
			s.remove(s[0])
			s.append(i)

		else:
			s.append(i)

		# Increment Page faults
		pageFaults +=1

	# If page is already there in
	# currentPages i.e in Main
	else:
		
		# Remove previous index of current page
		s.remove(i)

		# Now append it, at last index
		s.append(i)
	
print("{}".format(pageFaults))

# This code is contributed by mahi_07
```
06/07/23, 18:45 - Viswaa Ramasubramanian: ```# Banker's Algorithm

# Driver code:
if __name__=="__main__":
	
	# P0, P1, P2, P3, P4 are the Process names here
	n = 5 # Number of processes
	m = 3 # Number of resources
	
	# Allocation Matrix
	alloc = [[0, 1, 0 ],[ 2, 0, 0 ],
			[3, 0, 2 ],[2, 1, 1] ,[ 0, 0, 2]]
	
	# MAX Matrix
	max = [[7, 5, 3 ],[3, 2, 2 ],
			[ 9, 0, 2 ],[2, 2, 2],[4, 3, 3]]
	
	avail = [3, 3, 2] # Available Resources
	
	f = [0]*n
	ans = [0]*n
	ind = 0
	for k in range(n):
		f[k] = 0
		
	need = [[ 0 for i in range(m)]for i in range(n)]
	for i in range(n):
		for j in range(m):
			need[i][j] = max[i][j] - alloc[i][j]
	y = 0
	for k in range(5):
		for i in range(n):
			if (f[i] == 0):
				flag = 0
				for j in range(m):
					if (need[i][j] > avail[j]):
						flag = 1
						break
				
				if (flag == 0):
					ans[ind] = i
					ind += 1
					for y in range(m):
						avail[y] += alloc[i][y]
					f[i] = 1
					
	print("Following is the SAFE Sequence")
	
	for i in range(n - 1):
		print(" P", ans[i], " ->", sep="", end="")
	print(" P", ans[n - 1], sep="")

# This code is contributed by SHUBHAMSINGH10
```
06/07/23, 18:45 - Viswaa Ramasubramanian: ```
// Banker's Algorithm
#include <stdio.h>
int main()
{
	// P0, P1, P2, P3, P4 are the Process names here

	int n, m, i, j, k;
	n = 5; // Number of processes
	m = 3; // Number of resources
	int alloc[5][3] = { { 0, 1, 0 }, // P0 // Allocation Matrix
						{ 2, 0, 0 }, // P1
						{ 3, 0, 2 }, // P2
						{ 2, 1, 1 }, // P3
						{ 0, 0, 2 } }; // P4

	int max[5][3] = { { 7, 5, 3 }, // P0 // MAX Matrix
					{ 3, 2, 2 }, // P1
					{ 9, 0, 2 }, // P2
					{ 2, 2, 2 }, // P3
					{ 4, 3, 3 } }; // P4

	int avail[3] = { 3, 3, 2 }; // Available Resources

	int f[n], ans[n], ind = 0;
	for (k = 0; k < n; k++) {
		f[k] = 0;
	}
	int need[n][m];
	for (i = 0; i < n; i++) {
		for (j = 0; j < m; j++)
			need[i][j] = max[i][j] - alloc[i][j];
	}
	int y = 0;
	for (k = 0; k < 5; k++) {
		for (i = 0; i < n; i++) {
			if (f[i] == 0) {

				int flag = 0;
				for (j = 0; j < m; j++) {
					if (need[i][j] > avail[j]){
						flag = 1;
						break;
					}
				}

				if (flag == 0) {
					ans[ind++] = i;
					for (y = 0; y < m; y++)
						avail[y] += alloc[i][y];
					f[i] = 1;
				}
			}
		}
	}

	int flag = 1;
	
	for(int i=0;i<n;i++)
	{
	if(f[i]==0)
	{
		flag=0;
		printf("The following system is not safe");
		break;
	}
	}
	
	if(flag==1)
	{
	printf("Following is the SAFE Sequence\n");
	for (i = 0; i < n - 1; i++)
		printf(" P%d ->", ans[i]);
	printf(" P%d", ans[n - 1]);
	}
	

	return (0);

	// This code is contributed by Deep Baldha (CandyZack)
}
```
07/07/23, 00:29 - Gannu: <Media omitted>
07/07/23, 01:14 - Phoool Gobiiii  🎓: <Media omitted>
07/07/23, 10:40 - Vickssss 🎓: ```#OPTIMAL PAGE REPLACEMENT
def optimal_page_replacement(pages, frames):
    page_faults = 0
    memory = []

    for page in pages:
        if page not in memory:
            page_faults += 1
            if len(memory) < frames:
                memory.append(page)
            else:
                indices = []
                for frame in memory:
                    if frame in pages[pages.index(page):]:
                        indices.append(pages.index(frame, pages.index(page)))
                    else:
                        indices.append(len(pages))
                page_to_replace = memory[indices.index(max(indices))]
                memory[memory.index(page_to_replace)] = page

    return page_faults


pages = [7,0,1,2,0,3,0,4,2,3,0,3,1,2,0]
frames = 3

page_faults = optimal_page_replacement(pages, frames)
print("Page faults:", page_faults)
```
07/07/23, 10:40 - Vickssss 🎓: This message was deleted
07/07/23, 10:41 - Vickssss 🎓: ```#lru
def lru(pages, capacity):
    cache = set()
    lru_queue = []
    
    hit = 0
    miss = 0
    
    for page in pages:
        if len(cache) < capacity:
            if page in cache:
                hit += 1
                lru_queue.remove(page)
            else:
                miss += 1
                cache.add(page)
        else:
            if page in cache:
                hit += 1
                lru_queue.remove(page)
            else:
                miss += 1
                removed_page = lru_queue.pop(0)
                cache.remove(removed_page)
                cache.add(page)
        
        lru_queue.append(page)
    
    hit_ratio = hit / len(pages)
    miss_ratio = miss / len(pages)
    
    print("Hit Ratio:", hit_ratio)
    print("Miss Ratio:", miss_ratio)

pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 1, 2, 0]
capacity = 3
lru(pages, capacity)
```
07/07/23, 10:41 - Vickssss 🎓: ```#fifo
def fifo():
    n=int(input("enter no of pages:"))
    m=int(input("ENter no of frames in main memory:"))
    l=[0]*m
    frontptr=0
    hits,miss=0,0
    for _ in range(n):
        val=int(input("Enter page number:"))
        if val in l:
            hits+=1
        else:
            miss+=1
            l[frontptr]=val
            frontptr=(frontptr+1)%m
    
    print("hit ratio=",(hits/(hits+miss)))
    print(hits)


fifo()```
07/07/23, 10:50 - Vickssss 🎓: ```#bankers simplified
07/07/23, 10:50 - Vickssss 🎓: def bankers(available,maximum,allocated):
    processes=len(maximum)
    resources=len(available)

    need=[]
    for i in range(processes):
        need.append([maximum[i][j]-allocated[i][j] for j in range(resources)])
    
    finished=[False]*processes
    sequence=[]
    work=available
    while True:
        found=False
        for i in range(processes):
            if not finished[i] and all(need[i][j] <= work[j] for j in range(resources)):
                for j in range(resources):
                    work[j]+=allocated[i][j]
                finished[i]=True
                sequence.append(i)
                found=True
                break
        if not found:
            break
    if all(finished):
        print("order of execution is:",sequence)
    else:
        print("there is a deadlock")

available_resources = [3, 3, 2]  # Available instances of each resource
maximum_allocation = [[7, 5, 3], [3, 2, 2], [9, 0, 2], [2, 2, 2], [4, 3, 3]]  # Maximum resource requirements for each process
current_allocation = [[0, 1, 0], [2, 0, 0], [3, 0, 2], [2, 1, 1], [0, 0, 2]]  # Currently allocated resources to each process
bankers(available_resources, maximum_allocation, current_allocation)```
07/07/23, 10:51 - Vickssss 🎓: ```bankers simplified
def bankers(available,maximum,allocated):
    processes=len(maximum)
    resources=len(available)

    need=[]
    for i in range(processes):
        need.append([maximum[i][j]-allocated[i][j] for j in range(resources)])
    
    finished=[False]*processes
    sequence=[]
    work=available
    while True:
        found=False
        for i in range(processes):
            if not finished[i] and all(need[i][j] <= work[j] for j in range(resources)):
                for j in range(resources):
                    work[j]+=allocated[i][j]
                finished[i]=True
                sequence.append(i)
                found=True
                break
        if not found:
            break
    if all(finished):
        print("order of execution is:",sequence)
    else:
        print("there is a deadlock")

available_resources = [3, 3, 2]  # Available instances of each resource
maximum_allocation = [[7, 5, 3], [3, 2, 2], [9, 0, 2], [2, 2, 2], [4, 3, 3]]  # Maximum resource requirements for each process
current_allocation = [[0, 1, 0], [2, 0, 0], [3, 0, 2], [2, 1, 1], [0, 0, 2]]  # Currently allocated resources to each process
bankers(available_resources, maximum_allocation, current_allocation)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#fcfs disk scheduling
def fcfs(initial,requests):
    overhead=0
    head=initial
    for track in requests:
        overhead+=abs(head-track)
        head=track
    
    print("Overhead=",overhead,"ns")

tracks=[82,170,43,140,24,16,190]
head=50
fcfs(head,tracks)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#SSTF disk scheduling

def SSTF(head,tracks):
    min_tracks=[]
    max_tracks=[]
    for track in tracks:
        if track<head:
            min_tracks.append(track)
        else:
            max_tracks.append(track)
    min_tracks.sort(reverse=True)
    max_tracks.sort()
    cur_track=head
    overhead=0
    for track in min_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    
    for track in max_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    
    print("Overhead=",overhead,"ns")

tracks=[82,170,43,140,24,16,190]
head=50
SSTF(head,tracks)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#SCAN disk scheduling algorithm
def SCAN(head,tracks,last_track):
    overhead=0
    min_tracks=[]
    max_tracks=[]
    cur_track=head
    for track in tracks:
        if track<head:
            min_tracks.append(track)
        else:
            max_tracks.append(track)
    min_tracks.sort(reverse=True)
    max_tracks.sort()
    cur_track=head
    overhead=0
    for track in max_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    
    overhead+=abs(cur_track-last_track)
    cur_track=last_track
    for track in min_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track

    print("Overhead=",overhead,"ns")

tracks=[82,170,43,142,24,16,190]
head=50
SCAN(head,tracks,199)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#look disk scheduling algorithm
def LOOK(head,tracks):
    overhead=0
    min_tracks=[]
    max_tracks=[]
    cur_track=head
    for track in tracks:
        if track<head:
            min_tracks.append(track)
        else:
            max_tracks.append(track)
    min_tracks.sort(reverse=True)
    max_tracks.sort()
    cur_track=head
    overhead=0
    for track in max_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    

    for track in min_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track

    print("Overhead=",overhead,"ns")

tracks=[82,170,43,142,24,16,190]
head=50
LOOK(head,tracks)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#CSCAN disk scheduling algorithm
def CSCAN(initial_track,head,tracks,last_track):
    overhead=0
    min_tracks=[]
    max_tracks=[]
    cur_track=head
    for track in tracks:
        if track<head:
            min_tracks.append(track)
        else:
            max_tracks.append(track)
    min_tracks.sort()
    max_tracks.sort()
    cur_track=head
    overhead=0
    for track in max_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    
    overhead+=abs(initial_track-last_track)+abs(cur_track-last_track)
    cur_track=initial_track
    for track in min_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track

    print("Overhead=",overhead,"ns")

tracks=[82,170,43,142,24,16,190]
head=50
CSCAN(0,head,tracks,199)```
07/07/23, 11:20 - Viswaa Ramasubramanian: ```#clook disk scheduling algorithm
def CLOOK(head,tracks):
    overhead=0
    min_tracks=[]
    max_tracks=[]
    cur_track=head
    for track in tracks:
        if track<head:
            min_tracks.append(track)
        else:
            max_tracks.append(track)
    min_tracks.sort()
    max_tracks.sort()
    cur_track=head
    overhead=0
    for track in max_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track
    for track in min_tracks:
        overhead+=abs(cur_track-track)
        cur_track=track

    print("Overhead=",overhead,"ns")

tracks=[82,170,43,142,24,16,190]
head=50
CLOOK(head,tracks)```
07/07/23, 11:29 - Vickssss 🎓: ```#sleeping barber
import threading
import time

chairs = 5

waitingRoom = threading.Lock()
barber_sem = threading.Semaphore(0)
customer_sem = threading.Semaphore(0)
cust_wait = 0

def barber():
    while True:
        customer_sem.acquire()
        waitingRoom.acquire()
        global cust_wait
        cust_wait -= 1
        barber_sem.release()
        waitingRoom.release()

        print("Barber is cutting hair")
        time.sleep(2)

def customers(cust_id):
    global cust_wait
    waitingRoom.acquire()
    if cust_wait < chairs:
        cust_wait += 1
        customer_sem.release()
        waitingRoom.release()
        barber_sem.acquire()
        print(f"Customer {cust_id} is getting a haircut")
        time.sleep(2)
    else:
        waitingRoom.release()
        print(f"Customer {cust_id} is leaving without getting a haircut")
        customer_sem.release()

bthread = threading.Thread(target=barber)
bthread.start()

customers_threads = []
for i in range(7):
    cthread = threading.Thread(target=customers, args=(i,))
    customers_threads.append(cthread)
    cthread.start()

for cthread in customers_threads:
    cthread.join()

bthread.join()```
07/07/23, 17:37 - Shesadriii 🎓: Adios Amigo ! See ya'll next sem
07/07/23, 17:44 - Harecharan CSE E Amrita CBE: Bye da 🥲🥲🥲
07/07/23, 18:50 - Viswaa Ramasubramanian: <Media omitted>
07/07/23, 18:51 - Harecharan CSE E Amrita CBE: Bye da enzoy
07/07/23, 18:54 - Viswaa Ramasubramanian: Train eriyachuuuu 🕺
07/07/23, 19:07 - Sooorrrr 🎓: B140 3rd floor
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:08 - Sooorrrr 🎓: <Media omitted>
07/07/23, 19:11 - Viswaa Ramasubramanian: Enna karumam da idhu
07/07/23, 19:40 - Phoool Gobiiii  🎓: Bye bois
07/07/23, 19:40 - Phoool Gobiiii  🎓: I’ve left
07/07/23, 19:40 - Phoool Gobiiii  🎓: 😘
07/07/23, 21:02 - Viswaa Ramasubramanian: <Media omitted>
07/07/23, 21:03 - Phoool Gobiiii  🎓: Bande Vaarat
07/07/23, 21:03 - Viswaa Ramasubramanian: 🤣
07/07/23, 23:42 - Viswaa Ramasubramanian: Train eritan boissss
08/07/23, 05:42 - Gannu: <Media omitted>
08/07/23, 06:00 - Gannu: <Media omitted>
08/07/23, 06:24 - Phoool Gobiiii  🎓: Surya looks like the host in YouTube videos who welcomes the viewers 😂
08/07/23, 07:42 - Araviiii 🎓: Reached home bois
08/07/23, 07:49 - Viswaa Ramasubramanian: Yesssss soooor on 🔥🔥
08/07/23, 07:49 - Viswaa Ramasubramanian: <Media omitted>
08/07/23, 07:50 - Viswaa Ramasubramanian: <Media omitted>
08/07/23, 07:53 - Shesadriii 🎓: Reached home safely boiz
08/07/23, 08:11 - Viswaa Ramasubramanian: Reached Home boiss
08/07/23, 09:28 - Gannu: <Media omitted>
08/07/23, 09:28 - Gannu: 129 kmph
08/07/23, 10:15 - Harecharan CSE E Amrita CBE: Train looks neat
08/07/23, 10:22 - Phoool Gobiiii  🎓: <Media omitted>
08/07/23, 10:24 - Harecharan CSE E Amrita CBE: This message was deleted
08/07/23, 10:25 - Harecharan CSE E Amrita CBE: <Media omitted>
08/07/23, 13:07 - Gannu: Reached home 🏡
08/07/23, 13:07 - Sanjuuu 🎓: <Media omitted>
08/07/23, 13:09 - Gannu: That new one ah ?
08/07/23, 13:09 - Sanjuuu 🎓: There is only one in tn
08/07/23, 13:09 - Harecharan CSE E Amrita CBE: is that mithesh
08/07/23, 13:10 - Gannu: Even I felt that 😂
08/07/23, 13:10 - Harecharan CSE E Amrita CBE: <Media omitted>
08/07/23, 13:10 - Sanjuuu 🎓: Yes
08/07/23, 13:10 - Sanjuuu 🎓: Totally coincide tal
08/07/23, 14:03 - Sooorrrr 🎓: Reached 🏠
08/07/23, 17:55 - Phoool Gobiiii  🎓: Reached home 2hrs back 🏠
08/07/23, 21:31 - Sanjuuu 🎓: Reached home
09/07/23, 02:02 - Shesadriii 🎓: <Media omitted>
09/07/23, 04:31 - Shesadriii 🎓: <Media omitted>
10/07/23, 14:22 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=ofTb57aZHZs&list=TLPQMTAwNzIwMjPiHI8HSf2jPA&index=21
12/07/23, 13:23 - Araviiii 🎓: bois don't forgot to pay the fees
12/07/23, 13:23 - Harecharan CSE E Amrita CBE: very good da reminding everyone
13/07/23, 21:10 - Harecharan CSE E Amrita CBE: <Media omitted>
14/07/23, 10:23 - Sooorrrr 🎓: <Media omitted>
14/07/23, 10:23 - Sooorrrr 🎓: 😅😅😂😂😂
14/07/23, 10:29 - Sooorrrr 🎓: <Media omitted>
14/07/23, 10:38 - Shesadriii 🎓: Pre release
14/07/23, 10:39 - Sooorrrr 🎓: Yep
14/07/23, 10:39 - Sooorrrr 🎓: Germany nearly escaped witnessing the fireworks
15/07/23, 08:11 - Vickssss 🎓: <Media omitted>
15/07/23, 08:22 - Sanjuuu 🎓: This is actually a vdo from the game "detroit: become human"
15/07/23, 08:22 - Sanjuuu 🎓: Its not real
15/07/23, 08:22 - Sanjuuu 🎓: But the game is real good
15/07/23, 08:24 - Sanjuuu 🎓: One of my favorite games
15/07/23, 09:10 - Vickssss 🎓: Oho....
15/07/23, 09:31 - Harecharan CSE E Amrita CBE: Last part where she says soul
.. that was scary
17/07/23, 10:11 - Harecharan CSE E Amrita CBE: <Media omitted>
17/07/23, 10:11 - Harecharan CSE E Amrita CBE: <Media omitted>
17/07/23, 10:12 - Shesadriii 🎓: Sus
17/07/23, 10:12 - Harecharan CSE E Amrita CBE: enakunnu mattum ega irunthu daa intha scammer la kelambi varaanga 😢
17/07/23, 10:14 - Hari Kesav CSE E Amrita CBE: Unnoda munji ya pathaka avalavu nalaven mathri theriya la da
21/07/23, 09:04 - Harecharan CSE E Amrita CBE: reminder.....tmrw course booking
21/07/23, 12:17 - Sanjuuu 🎓: Yep
21/07/23, 12:17 - Sanjuuu 🎓: Its at 1 pm
21/07/23, 12:17 - Sanjuuu 🎓: Check outlook
21/07/23, 12:25 - Araviiii 🎓: So tmrw 1pm course register starts not at 10 am
21/07/23, 12:26 - Viswaa Ramasubramanian: <Media omitted>
21/07/23, 12:56 - Harecharan CSE E Amrita CBE: Thanks i was thinking it was still at 10 am
22/07/23, 11:32 - Sanjuuu 🎓: <Media omitted>
22/07/23, 12:52 - Shesadriii 🎓: Wake up fellas...….Its time !
22/07/23, 12:52 - Harecharan CSE E Amrita CBE: yeahhhhh
22/07/23, 12:52 - Araviiii 🎓: Yep
22/07/23, 12:54 - Viswaa Ramasubramanian: <Media omitted>
22/07/23, 12:55 - Sanjuuu 🎓: aums became so choppy in the last 5 mins
22/07/23, 12:55 - Shesadriii 🎓: Bruhh
22/07/23, 12:55 - Viswaa Ramasubramanian: oru loosu nambikai summa summa open panni pathuthu irukan open ayirukumo oru vela 5 mins munnadi paniruvanungalo nu
22/07/23, 12:57 - Sanjuuu 🎓: is the website smooth?
22/07/23, 12:57 - Shesadriii 🎓: I'm safari, yes
22/07/23, 12:57 - Shesadriii 🎓: In*
22/07/23, 12:57 - Viswaa Ramasubramanian: Kadaku modaka iruku
22/07/23, 12:57 - Gannu: 😂😂
22/07/23, 12:57 - Araviiii 🎓: Oh...Mac product
22/07/23, 12:57 - Viswaa Ramasubramanian: Ennada mac vangitiya
22/07/23, 12:58 - Shesadriii 🎓: iPad
22/07/23, 12:58 - Araviiii 🎓: 😆
22/07/23, 12:58 - Shesadriii 🎓: Innum illa
22/07/23, 12:58 - Viswaa Ramasubramanian: dei
22/07/23, 12:58 - Viswaa Ramasubramanian: page unresponsive nu varudhu
22/07/23, 13:01 - Araviiii 🎓: Dei course a verala da
22/07/23, 13:01 - Sanjuuu 🎓: not yet
22/07/23, 13:01 - Sooorrrr 🎓: it came
22/07/23, 13:01 - Araviiii 🎓: Wait...how to do course registration
22/07/23, 13:01 - Sooorrrr 🎓: done
22/07/23, 13:01 - Phoool Gobiiii  🎓: Registration done boisss ✨
22/07/23, 13:01 - Araviiii 🎓: Dei then tell.me
22/07/23, 13:01 - Sooorrrr 🎓: <Media omitted>
22/07/23, 13:01 - Araviiii 🎓: <Media omitted>
22/07/23, 13:01 - Sooorrrr 🎓: well go to course registration aums
22/07/23, 13:01 - Araviiii 🎓: Help me bois
22/07/23, 13:02 - Sooorrrr 🎓: scroll down
22/07/23, 13:02 - Phoool Gobiiii  🎓: Scroll
22/07/23, 13:02 - Phoool Gobiiii  🎓: And zoom out a lil bit if needed
22/07/23, 13:02 - Sooorrrr 🎓: only 8 courses right
22/07/23, 13:02 - Viswaa Ramasubramanian: total 8 courses dhana??
22/07/23, 13:02 - Viswaa Ramasubramanian: yess
22/07/23, 13:02 - Phoool Gobiiii  🎓: Yes
22/07/23, 13:02 - Viswaa Ramasubramanian: ok done
22/07/23, 13:03 - Sooorrrr 🎓: <Media omitted>
22/07/23, 13:03 - Harecharan CSE E Amrita CBE: its onnn
22/07/23, 13:03 - Harecharan CSE E Amrita CBE: <Media omitted>
22/07/23, 13:03 - Viswaa Ramasubramanian: <Media omitted>
22/07/23, 13:03 - Harecharan CSE E Amrita CBE: yeah babyyyy!!!!!
22/07/23, 13:03 - Sanjuuu 🎓: <Media omitted>
22/07/23, 13:04 - Araviiii 🎓: <Media omitted>
22/07/23, 13:04 - Harecharan CSE E Amrita CBE: check in view course regis
22/07/23, 13:04 - Phoool Gobiiii  🎓: Yes
22/07/23, 13:04 - Harecharan CSE E Amrita CBE: for conformation
22/07/23, 13:04 - Araviiii 🎓: Okie
22/07/23, 13:04 - Sooorrrr 🎓: you going for time series aravindh?
22/07/23, 13:04 - Harecharan CSE E Amrita CBE: sry in track regis
22/07/23, 13:05 - Araviiii 🎓: This message was deleted
22/07/23, 13:05 - Araviiii 🎓: S
22/07/23, 13:05 - Shesadriii 🎓: Done boiz
22/07/23, 13:05 - Harecharan CSE E Amrita CBE: done boiz
22/07/23, 13:05 - Harecharan CSE E Amrita CBE: everyone got their desired course aa
22/07/23, 13:05 - Gannu: iPad?
22/07/23, 13:05 - Araviiii 🎓: I got
22/07/23, 13:05 - Araviiii 🎓: I think so
22/07/23, 13:05 - Phoool Gobiiii  🎓: 👍🏼
22/07/23, 13:05 - Viswaa Ramasubramanian: haaa
22/07/23, 13:06 - Hari Kesav CSE E Amrita CBE: 👍🏻
22/07/23, 13:06 - Sooorrrr 🎓: who and all chose dl?
22/07/23, 13:06 - Sooorrrr 🎓: who and all chose ai?
22/07/23, 13:06 - Sooorrrr 🎓: who chose time series?
22/07/23, 13:06 - Viswaa Ramasubramanian: 🙋🏻‍♂
22/07/23, 13:07 - Sooorrrr 🎓: what did you choose?
22/07/23, 13:07 - Araviiii 🎓: 🖖🏻
22/07/23, 13:07 - Hari Kesav CSE E Amrita CBE: A.I
22/07/23, 13:07 - Sooorrrr 🎓: what did hare and vicks choose?
22/07/23, 13:07 - Phoool Gobiiii  🎓: 👍🏼
22/07/23, 13:07 - Viswaa Ramasubramanian: unoda crypto kanavu enna achu
22/07/23, 13:07 - Vickssss 🎓: <Media omitted>
22/07/23, 13:08 - Araviiii 🎓: Dei athu maths-aa da without ram and surya I can't pluck a hair
22/07/23, 13:08 - Araviiii 🎓: So went to time series da
22/07/23, 13:08 - Sooorrrr 🎓: bro time series involves more maths
22/07/23, 13:08 - Phoool Gobiiii  🎓: Yeah that too
22/07/23, 13:09 - Araviiii 🎓: Semma da Nala timing la kunda 💣  poda
22/07/23, 13:09 - Viswaa Ramasubramanian: yesss probability and random process dhan adhoda main pre requisite
22/07/23, 13:09 - Shesadriii 🎓: Mee
22/07/23, 13:09 - Araviiii 🎓: Tha pathukalam
22/07/23, 13:09 - Viswaa Ramasubramanian: but enna crypto verum maths idhu konjam lab lam serndhu irukum
22/07/23, 13:09 - Viswaa Ramasubramanian: so *tha pathukooo
22/07/23, 13:09 - Hari Kesav CSE E Amrita CBE: A.I
22/07/23, 13:10 - Araviiii 🎓: Nala love failure-aa cross pantu vanthuta  

I'm experienced bro..
22/07/23, 13:10 - Phoool Gobiiii  🎓: 👀
22/07/23, 13:10 - Sooorrrr 🎓: <Media omitted>
22/07/23, 13:10 - Araviiii 🎓: Na sonna nee namba matta
22/07/23, 13:10 - Viswaa Ramasubramanian: <Media omitted>
22/07/23, 13:11 - Araviiii 🎓: Yea yea dw man pathukalam
22/07/23, 13:11 - Sooorrrr 🎓: enjoy with probability
22/07/23, 13:11 - Sooorrrr 🎓: anyways all the best for it
22/07/23, 13:11 - Viswaa Ramasubramanian: I remember this naa idhu pakrapa probabilithy class la thoongitu irundhan
Ram enta sonnan appavae thoongama irundhirkalamla nu
22/07/23, 13:11 - Sooorrrr 🎓: you will enjoy the course
22/07/23, 13:11 - Araviiii 🎓: And also atb for ur elective also
22/07/23, 13:12 - Araviiii 🎓: This is for everyone
22/07/23, 13:12 - Viswaa Ramasubramanian: AI kum probability and random process reqd laa
Also linear algebra and multivariable calculus
22/07/23, 13:12 - Viswaa Ramasubramanian: Papom enna nadahkidhu nu
22/07/23, 13:12 - Araviiii 🎓: Hmm....
22/07/23, 13:12 - Phoool Gobiiii  🎓: Yes.. for both AI and NNDL
22/07/23, 13:13 - Viswaa Ramasubramanian: Yess
22/07/23, 13:13 - Sooorrrr 🎓: <Media omitted>
22/07/23, 13:15 - Viswaa Ramasubramanian: hmm
22/07/23, 13:15 - Viswaa Ramasubramanian: anyone took digital image processing??
22/07/23, 13:15 - Sooorrrr 🎓: <Media omitted>
22/07/23, 13:15 - Sooorrrr 🎓: no i guess
22/07/23, 13:15 - Sooorrrr 🎓: not from our gang
22/07/23, 13:16 - Viswaa Ramasubramanian: ohh ok
22/07/23, 13:16 - Viswaa Ramasubramanian: soor namba room number enna??
22/07/23, 13:16 - Sanjuuu 🎓: <Media omitted>
22/07/23, 13:16 - Viswaa Ramasubramanian: 53 or 53?
22/07/23, 13:16 - Viswaa Ramasubramanian: ensoyyy dei marandhutan andha seeds name edho solluvangale
22/07/23, 13:16 - Viswaa Ramasubramanian: adhu ennadhu
22/07/23, 13:16 - Sooorrrr 🎓: Deep Learning and Neural Networks
NS Surya
Ramnaresh Ulaganathan
K Ganesh
Shreyas V
22/07/23, 13:16 - Sooorrrr 🎓: Sanjay Balamurugan
22/07/23, 13:16 - Viswaa Ramasubramanian: 52?
22/07/23, 13:16 - Sooorrrr 🎓: i guess 53
22/07/23, 13:17 - Sooorrrr 🎓: Sanju you took dl right?
22/07/23, 13:17 - Viswaa Ramasubramanian: AI
Viswaa
Harecharan
Harikesav
Vignesh
22/07/23, 13:17 - Sanjuuu 🎓: Yep
22/07/23, 13:17 - Sooorrrr 🎓: aravii - timeseries
22/07/23, 13:17 - Sooorrrr 🎓: Lets rock this time
22/07/23, 13:17 - Sanjuuu 🎓: Chiya seeds?
22/07/23, 13:17 - Shesadriii 🎓: 💐🎂🥳
22/07/23, 13:17 - Viswaa Ramasubramanian: 🤜🏻🤛🏻
22/07/23, 13:17 - Sooorrrr 🎓: and when are the 4th sem results coming out?
22/07/23, 13:17 - Viswaa Ramasubramanian: ahhh yess yes andha seed dhan
22/07/23, 13:17 - Viswaa Ramasubramanian: peru marandhutan
22/07/23, 13:17 - Sooorrrr 🎓: by the end of this month?
22/07/23, 13:18 - Viswaa Ramasubramanian: don't think so
22/07/23, 13:18 - Viswaa Ramasubramanian: last time also late achu la
22/07/23, 13:18 - Sooorrrr 🎓: hmmm
22/07/23, 13:18 - Viswaa Ramasubramanian: sonna time ku late ah vandhichu nu this time date announce panla pola
22/07/23, 13:18 - Viswaa Ramasubramanian: kudiye seekaram date announce pannuvanga nenaikiran
22/07/23, 13:18 - Sooorrrr 🎓: yeah
22/07/23, 14:14 - Viswaa Ramasubramanian: https://www.youtube.com/shorts/VjGyEYDHP1c

hostel video kedaichirichuuu
22/07/23, 14:16 - Gannu: 😍
24/07/23, 11:17 - Gannu: <Media omitted>
24/07/23, 13:35 - Araviiii 🎓: Dei tell.him tuck out the shirt 👕 da
24/07/23, 13:48 - Phoool Gobiiii  🎓: <Media omitted>
24/07/23, 18:45 - Sanjuuu 🎓: <Media omitted>
24/07/23, 19:43 - Araviiii 🎓: <Media omitted>
24/07/23, 19:43 - Araviiii 🎓: did we study anything related to that?
24/07/23, 19:46 - Viswaa Ramasubramanian: nope
24/07/23, 19:53 - Araviiii 🎓: K
24/07/23, 21:31 - Shesadriii 🎓: Twitter is officially now " *X* "
24/07/23, 21:32 - Araviiii 🎓: Elon chumma-aa eruka matana
24/07/23, 21:32 - Shesadriii 🎓: It's now *useful* as he terms
24/07/23, 21:33 - Shesadriii 🎓: It's like an everything app.....u can order food, book cabs , etc and etc in a single app
24/07/23, 21:33 - Araviiii 🎓: <Media omitted>
24/07/23, 21:33 - Araviiii 🎓: Hmm...let's see
25/07/23, 09:58 - Harecharan CSE E Amrita CBE: <Media omitted>
26/07/23, 19:33 - Araviiii 🎓: <Media omitted>
26/07/23, 19:33 - Araviiii 🎓: All pass bois 🔥🔥🔥
26/07/23, 19:34 - Araviiii 🎓: Let's goo
26/07/23, 19:39 - Sanjuuu 🎓: 12 hrs classes
26/07/23, 19:39 - Sanjuuu 🎓: 👀
26/07/23, 19:39 - Viswaa Ramasubramanian: Adhu sure ah da?
26/07/23, 19:39 - Araviiii 🎓: I think its rumour da
26/07/23, 19:39 - Viswaa Ramasubramanian: Anbazhagan sir tah kethiya
26/07/23, 19:40 - Viswaa Ramasubramanian: Nono it's true dhan
26/07/23, 19:40 - Viswaa Ramasubramanian: But nambaliku time table vandhadhan teriyum
26/07/23, 19:40 - Sanjuuu 🎓: Yea
26/07/23, 19:40 - Viswaa Ramasubramanian: But num of class kammi dhana so neraya free slots irukum ig in btw
26/07/23, 19:40 - Sanjuuu 🎓: Atleast that's what the notice says in outlook
26/07/23, 19:40 - Viswaa Ramasubramanian: Yess
26/07/23, 19:41 - Sanjuuu 🎓: Yea
26/07/23, 19:41 - Viswaa Ramasubramanian: But ya first slot daily illama irundha nalla irukum
26/07/23, 19:41 - Viswaa Ramasubramanian: Mostly some faculties will change if they have first slot to some free slots most ah
26/07/23, 19:42 - Viswaa Ramasubramanian: So prashna mostly irukadhu
26/07/23, 19:42 - Sanjuuu 🎓: Imagine if they fully pack it everyday
26/07/23, 19:42 - Viswaa Ramasubramanian: Avlodhan gali dhan
26/07/23, 19:42 - Sanjuuu 🎓: To finish 5th sem fast
26/07/23, 19:42 - Viswaa Ramasubramanian: Also pathana this time total 6 labs
26/07/23, 19:42 - Viswaa Ramasubramanian: Adhuvum correct dhan
26/07/23, 19:42 - Sanjuuu 🎓: And give us time for internships
26/07/23, 19:42 - Viswaa Ramasubramanian: As per calender decemeber la endsem
26/07/23, 19:42 - Sanjuuu 🎓: That could be
26/07/23, 19:43 - Viswaa Ramasubramanian: Yess
26/07/23, 19:43 - Viswaa Ramasubramanian: Calender padhi may end 3rd yr over
26/07/23, 19:43 - Sanjuuu 🎓: I'm in besant Nagar Beach btw
26/07/23, 19:43 - Viswaa Ramasubramanian: Semma enjoyyy
26/07/23, 19:44 - Sanjuuu 🎓: I was stepping in the beach and a certain someone calls me to ask my result
26/07/23, 19:44 - Viswaa Ramasubramanian: I am travelling in bus listening to old songsss
26/07/23, 19:44 - Sanjuuu 🎓: I had no idea result was out
26/07/23, 19:44 - Sanjuuu 🎓: 👀👀👀
26/07/23, 19:44 - Viswaa Ramasubramanian: Actaully nethiki f sec bharath sonnan enta
26/07/23, 19:44 - Viswaa Ramasubramanian: Result innaiki nu
26/07/23, 19:44 - Viswaa Ramasubramanian: I taught fake news nu
26/07/23, 19:45 - Viswaa Ramasubramanian: Epdi ivlo seekarama nu
26/07/23, 19:45 - Sanjuuu 🎓: Anyways not bad
26/07/23, 19:45 - Viswaa Ramasubramanian: 8th dhan exams mudinjidhu
26/07/23, 19:45 - Viswaa Ramasubramanian: Yepp
26/07/23, 19:45 - Sanjuuu 🎓: So no problem
26/07/23, 19:45 - Viswaa Ramasubramanian: Just time table vanta andha timing issues ennanu clear ayirum
26/07/23, 19:46 - Viswaa Ramasubramanian: 9 slots na 5pm
I plan epdi 12 slots 6:15 pm
26/07/23, 19:47 - Viswaa Ramasubramanian: So slots hours kammi panna porangala enna
See first slot ah setha
Till 5 10 slots
5 to 5 40 11th
5 40 to 6 20
Ama correct ah dhan varudhu
26/07/23, 19:47 - Viswaa Ramasubramanian: 🙃
26/07/23, 21:12 - Araviiii 🎓: Dei I asked a senior they said that it's is a rule in clg that the class should end by 5pm .....
26/07/23, 21:12 - Araviiii 🎓: So I don't think they will have 9 slots and all
26/07/23, 21:12 - Araviiii 🎓: Anyway let's see when the timetable is circulated
26/07/23, 21:15 - Viswaa Ramasubramanian: Hmm seri
27/07/23, 08:20 - Sanjuuu 🎓: In our college?
27/07/23, 08:21 - Sanjuuu 🎓: If its a rule made by our college... then they can change that whenever they want
27/07/23, 08:43 - Araviiii 🎓: Hmm..erukalam
27/07/23, 17:43 - Sanjuuu 🎓: Guyss
27/07/23, 17:43 - Sanjuuu 🎓: I think
27/07/23, 17:43 - Sanjuuu 🎓: Our hostels are not ready yet
27/07/23, 17:43 - Sanjuuu 🎓: <Media omitted>
27/07/23, 17:44 - Sanjuuu 🎓: So we'll have solo rooms???
27/07/23, 17:44 - Sanjuuu 🎓: Or it's just a mistake
27/07/23, 17:44 - Sanjuuu 🎓: No idea
27/07/23, 18:00 - Viswaa Ramasubramanian: Adhu anga tappah potrikanga
27/07/23, 18:00 - Viswaa Ramasubramanian: Room num paru it's same as agastya
27/07/23, 18:01 - Sanjuuu 🎓: Maybe room number not yet updated
27/07/23, 18:01 - Sanjuuu 🎓: 👀
27/07/23, 18:01 - Viswaa Ramasubramanian: Wait but kashyapa nu onnu innum system la varama irundhirkalamla
27/07/23, 18:01 - Sanjuuu 🎓: Maybe
27/07/23, 18:02 - Viswaa Ramasubramanian: See for us agastya annexe nu kuda dhan podama irundhanga starting la
27/07/23, 18:02 - Sanjuuu 🎓: Solo rooms vandha nalla irukkum
27/07/23, 18:02 - Sanjuuu 🎓: Even if it's for few days
27/07/23, 18:02 - Viswaa Ramasubramanian: Yaa but nachiketas la mee and eee 4th yr
27/07/23, 18:02 - Sanjuuu 🎓: Its a big hostel
27/07/23, 18:03 - Sanjuuu 🎓: Lots of rooms
27/07/23, 18:03 - Viswaa Ramasubramanian: Hmm terila papom
27/07/23, 18:03 - Sanjuuu 🎓: I hope
27/07/23, 18:03 - Viswaa Ramasubramanian: Let's see
27/07/23, 21:04 - Viswaa Ramasubramanian: Profs and IF needed, CIR appo mattum
27/07/23, 21:05 - Viswaa Ramasubramanian: Asked my frnd abt that 8 am stuff he said it's not for us
27/07/23, 22:34 - Sanjuuu 🎓: Oh
27/07/23, 22:34 - Sanjuuu 🎓: Okay
30/07/23, 17:49 - Viswaa Ramasubramanian: <Media omitted>
30/07/23, 17:50 - Viswaa Ramasubramanian: but anga first yr ellarum continue panna poranga
30/07/23, 17:50 - Viswaa Ramasubramanian: adhaan ig system la innum kashyapa illa
30/07/23, 17:50 - Gannu: Namma Warden dhaan already sollitaanga la
30/07/23, 17:50 - Gannu: So it should be Kashyapa
30/07/23, 17:50 - Viswaa Ramasubramanian: yes we will go with that only
30/07/23, 17:51 - Viswaa Ramasubramanian: kashyapa dhan
30/07/23, 17:51 - Gannu: Yess
30/07/23, 17:51 - Viswaa Ramasubramanian: abishek avanga room lam munnadiye check panirdhan
30/07/23, 17:51 - Viswaa Ramasubramanian: @CRs tah dhan timetable pathi kekanum pola
30/07/23, 17:51 - Viswaa Ramasubramanian: @918248897225 👀
30/07/23, 17:53 - Sanjuuu 🎓: Let me know what the CRs tell you
30/07/23, 17:54 - Gannu: Yes yess
30/07/23, 17:56 - Viswaa Ramasubramanian: 😂😂😅
30/07/23, 17:56 - Viswaa Ramasubramanian: Sure 👍
30/07/23, 17:58 - Viswaa Ramasubramanian: Let me know what the CRs tell you
30/07/23, 17:58 - Viswaa Ramasubramanian: Idhu dhan andha CR paiya anupchan da @918248897225
30/07/23, 18:01 - Viswaa Ramasubramanian: @918248897225 Chaala enna manushan
Evlo periya padhavila irundhitu ipdi down to earth ah behave panrapla
Namballa oruthan nu nirubikrapla
01/08/23, 10:48 - Vickssss 🎓: have you guys reached the campus safely?
01/08/23, 11:50 - Viswaa Ramasubramanian: Yesss
02/08/23, 14:18 - Shesadriii 🎓: Department of Computer Science and Engineering 

19CSE301 Computer Networks  

Lab 1 

 Networking Commands 

Practice the following commands and write down the observations in your observation notebook: 

ping  

ipconfig  

ipconfig /all  

ipconfig /release 

ipconfig /renew 

arp –a 

hostname 

nbtstat –a 

pathping 

route 

tracert 

sfc/scannow 

net view 

net user 

gpupdate/force 

systeminfo 

nbtstat 

getmac
02/08/23, 14:18 - Viswaa Ramasubramanian: <Media omitted>
03/08/23, 12:27 - Gannu: <Media omitted>
03/08/23, 20:10 - Vickssss 🎓: <Media omitted>
03/08/23, 20:10 - Vickssss 🎓: <Media omitted>
03/08/23, 20:10 - Vickssss 🎓: <Media omitted>
03/08/23, 20:10 - Vickssss 🎓: <Media omitted>
03/08/23, 20:10 - Vickssss 🎓: <Media omitted>
03/08/23, 20:28 - Sooorrrr 🎓: Thanks  for the books mate
03/08/23, 20:28 - Sooorrrr 🎓: 👍
03/08/23, 20:36 - Harecharan CSE E Amrita CBE: https://intranet.cb.amrita.edu/2023/Live-in-labs.pdf
03/08/23, 21:04 - Viswaa Ramasubramanian: <Media omitted>
03/08/23, 22:17 - Sooorrrr 🎓: <Media omitted>
03/08/23, 22:21 - Harecharan CSE E Amrita CBE: <Media omitted>
03/08/23, 22:26 - Sooorrrr 🎓: <Media omitted>
04/08/23, 00:10 - Gannu: <Media omitted>
04/08/23, 00:10 - Gannu: lec 2
04/08/23, 08:04 - Harecharan CSE E Amrita CBE: https://teams.microsoft.com/l/meetup-join/19%3aV1l0KkjfqU80mv-fD1G24ztWmRyDPuGk3TRrDob1_CA1%40thread.tacv2/1691079283769?context=%7b%22Tid%22%3a%2200f9cda3-075e-44e5-aa0b-aba3add6539f%22%2c%22Oid%22%3a%22819cbd87-5439-4389-9a01-c204433f9025%22%7d
04/08/23, 08:15 - Sooorrrr 🎓: https://sites.google.com/view/amritaevs/home
04/08/23, 08:15 - Shesadriii 🎓: https://sites.google.com/view/amritaevs/home
04/08/23, 08:30 - Vickssss 🎓: Dei is sir talking or just sitting muted?
04/08/23, 08:31 - Harecharan CSE E Amrita CBE: Muted
04/08/23, 11:56 - Araviiii 🎓: <Media omitted>
04/08/23, 14:47 - Harecharan CSE E Amrita CBE: from google.colab import drive
drive.mount('/content/drive')
04/08/23, 14:51 - Vickssss 🎓: <Media omitted>
04/08/23, 20:30 - Shesadriii 🎓: Reached home 2hrs ago boiz
04/08/23, 21:02 - Araviiii 🎓: Bois passed approved for me
04/08/23, 21:02 - Araviiii 🎓: Pass*
06/08/23, 07:32 - Araviiii 🎓: <Media omitted>
06/08/23, 09:24 - Vickssss 🎓: Happy friendship day Bois....
06/08/23, 09:25 - Harecharan CSE E Amrita CBE: Wish you the same
06/08/23, 10:14 - Shesadriii 🎓: Happy friendship day boiz ☺️
06/08/23, 10:14 - Harecharan CSE E Amrita CBE: Happy friendship day da
06/08/23, 10:51 - Gannu: happy friendship day ✨
06/08/23, 11:25 - Araviiii 🎓: Happy friendship day boisssss
06/08/23, 23:15 - Sooorrrr 🎓: <Media omitted>
06/08/23, 23:16 - Sooorrrr 🎓: <Media omitted>
06/08/23, 23:17 - Sooorrrr 🎓: <Media omitted>
06/08/23, 23:17 - Sooorrrr 🎓: <Media omitted>
06/08/23, 23:28 - Viswaa Ramasubramanian: <Media omitted>
07/08/23, 17:02 - Viswaa Ramasubramanian: boysss
07/08/23, 17:02 - Viswaa Ramasubramanian: thookam varudhuuu
08/08/23, 11:40 - Viswaa Ramasubramanian: <Media omitted>
08/08/23, 11:41 - Vickssss 🎓: Bro WTF?
08/08/23, 11:41 - Viswaa Ramasubramanian: 🖕🏻
08/08/23, 11:45 - Vickssss 🎓: <Media omitted>
08/08/23, 11:46 - Viswaa Ramasubramanian: <Media omitted>
08/08/23, 11:46 - Vickssss 🎓: <Media omitted>
08/08/23, 11:46 - Viswaa Ramasubramanian: <Media omitted>
08/08/23, 11:46 - Vickssss 🎓: <Media omitted>
08/08/23, 11:46 - Viswaa Ramasubramanian: <Media omitted>
08/08/23, 12:07 - Shesadriii 🎓: <Media omitted>
08/08/23, 12:09 - Viswaa Ramasubramanian: <Media omitted>
08/08/23, 12:10 - Viswaa Ramasubramanian: Siruthai siva mariye iruku daa
09/08/23, 20:15 - Harecharan CSE E Amrita CBE: https://forms.office.com/pages/responsepage.aspx?id=o835AF4H5USqC6ujrdZTn1hAio2W1xZKmfQxMz9i1f1UNVgzWUFWOUNMOTlKR0w5Tk8xRUIzRU9BUC4u
09/08/23, 20:16 - Harecharan CSE E Amrita CBE: guys even if u don't watch anime ….its ok just fill the forms
10/08/23, 14:41 - Sanjuuu 🎓: <Media omitted>
10/08/23, 14:42 - Vickssss 🎓: https://www.geeksforgeeks.org/quick-sort/
10/08/23, 15:01 - Vickssss 🎓: ```# Python3 implementation of QuickSort


# Function to find the partition position
def partition(array, low, high):

	# Choose the rightmost element as pivot
	pivot = array[high]

	# Pointer for greater element
	i = low - 1

	# Traverse through all elements
	# compare each element with pivot
	for j in range(low, high):
		if array[j] <= pivot:

			# If element smaller than pivot is found
			# swap it with the greater element pointed by i
			i = i + 1

			# Swapping element at i with element at j
			(array[i], array[j]) = (array[j], array[i])
		print(array)

	# Swap the pivot element with
	# the greater element specified by i
	(array[i + 1], array[high]) = (array[high], array[i + 1])
	

	# Return the position from where partition is done
	return i + 1


# Function to perform quicksort
def quicksort(array, low, high):
	if low < high:

		# Find pivot element such that
		# element smaller than pivot are on the left
		# element greater than pivot are on the right
		pi = partition(array, low, high)

		# Recursive call on the left of pivot
		quicksort(array, low, pi - 1)

		# Recursive call on the right of pivot
		quicksort(array, pi + 1, high)


# Driver code
if __name__ == '__main__':
	array = [2,8,7,1,3,5,6,4]
	N = len(array)

	# Function call
	quicksort(array, 0, N - 1)
	print('Sorted array:')
	for x in array:
		print(x, end=" ")

# This code is contributed by Adnan Aliakbar
```
10/08/23, 15:07 - Vickssss 🎓: ```At the start of each iteration of the partitioning loop, elements in the range low to i-1 are less than the pivot, and elements in the range i to j-1 are greater than or equal to the pivot.``` <This message was edited>
10/08/23, 15:08 - Sanjuuu 🎓: This message was deleted
10/08/23, 15:08 - Sanjuuu 🎓: without comments
10/08/23, 15:09 - Sanjuuu 🎓: def partition(array, low, high):
    pivot = array[high]
    i = low - 1
    for j in range(low, high):
        if array[j] <= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])
        print(array)
    (array[i + 1], array[high]) = (array[high], array[i + 1])
    return i + 1

def quicksort(array, low, high):
    if low < high:
        pi = partition(array, low, high)
        quicksort(array, low, pi - 1)
        quicksort(array, pi + 1, high)

if ___name___ == '___main___':
    array = [2,8,7,1,3,5,6,4]
    N = len(array)
    quicksort(array, 0, N - 1)
    print('Sorted array:')
    for x in array:
        print(x, end=" ")
10/08/23, 15:09 - Sanjuuu 🎓: ```def partition(array, low, high):
    pivot = array[high]
    i = low - 1
    for j in range(low, high):
        if array[j] <= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])
        print(array)
    (array[i + 1], array[high]) = (array[high], array[i + 1])
    return i + 1

def quicksort(array, low, high):
    if low < high:
        pi = partition(array, low, high)
        quicksort(array, low, pi - 1)
        quicksort(array, pi + 1, high)

if __name__ == '__main__':
    array = [2,8,7,1,3,5,6,4]
    N = len(array)
    quicksort(array, 0, N - 1)
    print('Sorted array:')
    for x in array:
        print(x, end=" ")
``` <This message was edited>
10/08/23, 15:10 - Harecharan CSE E Amrita CBE: nothing
10/08/23, 15:11 - Viswaa Ramasubramanian: Thanks for the code <This message was edited>
10/08/23, 15:12 - Harecharan CSE E Amrita CBE: its ok <This message was edited>
10/08/23, 15:12 - Vickssss 🎓: This message was deleted
10/08/23, 15:15 - Sanjuuu 🎓: ```def partition(a,l,u):
    p=a[l]
    start=l
    end=u
    while(start<end):
        while(a[start]<=p):
            start+=1
        while(a[end]>p):
            end-=1
        if start<end:
            a[start],a[end]=a[end],a[start]
    a[l],a[end]=a[end],a[l]
    return end
def quicksort(arr,l,u):
    if l<u:
        loc=partition(arr,l,u)
        quicksort(arr,l,loc-1)
        quicksort(arr,loc+1,u)``` <This message was edited>
10/08/23, 15:27 - Sanjuuu 🎓: for _ in range(int(input())):    
    pn=[2,3,9]
    c=0
    a,b=map(int,input().split())
    for i in range(a,b+1):
        if i%10 in pn:
            # print(a%10)
            c+=1
    print(c)
10/08/23, 15:29 - Vickssss 🎓: ```#include <iostream>
using namespace std;

int main() {
	// your code goes here
	int t,l,r;
	cin>>t;
	while(t>0){
	    cin>>l>>r;
	int tot=0;
	for(int i=l;i<=r;i++){
	    if(i%10==2 || i%10==3 || i%10==9){
	        tot++;
	    }
	}
	cout<<tot<<endl;
	t--;
    }
	return 0;
}
```
10/08/23, 18:58 - Araviiii 🎓: <Media omitted>
10/08/23, 21:18 - Araviiii 🎓: Guys gud news
10/08/23, 21:18 - Araviiii 🎓: Router is being setting up in 2nd floor
10/08/23, 21:26 - Sanjuuu 🎓: ✨
11/08/23, 08:04 - Harecharan CSE E Amrita CBE: Vadai irukuu
11/08/23, 08:08 - Vickssss 🎓: Dei unga room number enna da?
11/08/23, 08:08 - Harecharan CSE E Amrita CBE: E 136
11/08/23, 08:08 - Harecharan CSE E Amrita CBE: 3rd floor
11/08/23, 08:08 - Harecharan CSE E Amrita CBE: Enter and take right hand side stairs
11/08/23, 08:11 - Vickssss 🎓: Ok
11/08/23, 08:12 - Viswaa Ramasubramanian: Anga oruthan thoongitu irupan so kathama poo
11/08/23, 08:55 - Gannu: <Media omitted>
11/08/23, 08:55 - Sooorrrr 🎓: Microprocessor, microcontroller, and DSP (Digital Signal Processor) are all types of integrated circuits designed for specific computing tasks. Here's a breakdown of their key differences:

Microprocessor:

Functionality: A microprocessor is the central processing unit (CPU) of a computer system. It is responsible for executing instructions and performing general-purpose computations.
Usage: Microprocessors are commonly used in general-purpose computing devices like desktop computers, laptops, servers, and some embedded systems where computation power and versatility are essential.
Features: Microprocessors are equipped with arithmetic logic units (ALUs), control units, and various registers. They rely on external components for memory, I/O, timers, etc.
Flexibility: Microprocessors offer greater flexibility for a wide range of applications but may require additional external components to create a complete system.
Example: Intel Core series, AMD Ryzen series.
Microcontroller:

Functionality: A microcontroller is a compact integrated circuit that combines a microprocessor core with memory (RAM and ROM/Flash) and various peripherals (timers, I/O ports, ADC/DAC, etc.).
Usage: Microcontrollers are designed for embedded systems and applications where control, real-time operation, and interaction with the physical world are crucial.
Features: Microcontrollers are highly integrated and self-contained, making them suitable for standalone control applications with minimal external components.
Simplicity: Microcontrollers are simpler to use due to their integrated nature, but they might have limited processing power compared to microprocessors.
Example: Arduino, PIC, AVR.
DSP (Digital Signal Processor):

Functionality: A DSP is designed to efficiently process digital signals such as audio, video, and sensor data. It excels at performing mathematical operations on streaming data.
Usage: DSPs are commonly used in applications that require real-time signal processing, like audio processing, image processing, telecommunications, and control systems.
Features: DSPs are optimized for tasks like filtering, modulation, demodulation, and other signal manipulation tasks. They often have specialized instructions for these operations.
Performance: DSPs offer high processing power for specific signal processing tasks but may not be as versatile as microprocessors for general computations.
Example: Texas Instruments TMS320 series, Analog Devices ADSP series.
In summary, the main differences between microprocessors, microcontrollers, and DSPs lie in their intended applications, integration levels, processing capabilities, and the types of tasks they are optimized for. Choosing the right type depends on the specific requirements of your project or application.
11/08/23, 09:48 - Harecharan CSE E Amrita CBE: for DAA is anyone  not with a pair?
11/08/23, 12:06 - Sooorrrr 🎓: <Media omitted>
11/08/23, 12:09 - Araviiii 🎓: Gobo fried rice -2
12/08/23, 12:24 - Harecharan CSE E Amrita CBE: <Media omitted>
12/08/23, 12:24 - Harecharan CSE E Amrita CBE: This message was deleted
13/08/23, 08:20 - Araviiii 🎓: Teached home bois
13/08/23, 08:20 - Araviiii 🎓: Reached *
13/08/23, 08:25 - Sooorrrr 🎓: Reached 🏠bois
13/08/23, 12:08 - Shesadriii 🎓: <Media omitted>
13/08/23, 14:00 - Vickssss 🎓: Reached home 15 mins ago bois
14/08/23, 14:24 - Araviiii 🎓: It looks like nthg is happening in clg tdy ...thank God, we took a holiday 🙏🏻 also my elective is not there 🤩
14/08/23, 16:03 - Sanjuuu 🎓: <Media omitted>
14/08/23, 16:40 - Shesadriii 🎓: Inshallah
15/08/23, 00:39 - Sooorrrr 🎓: happy independence day boys
15/08/23, 00:39 - Sooorrrr 🎓: <Media omitted>
15/08/23, 00:40 - Shesadriii 🎓: Happy Independence day : )
15/08/23, 07:34 - Vickssss 🎓: Happy independence day🇮🇳
15/08/23, 07:35 - Araviiii 🎓: Happy independence day bois 🇮🇳🇮🇳🇮🇳
15/08/23, 08:32 - Phoool Gobiiii  🎓: Happy Independence Day 🇮🇳❤️
15/08/23, 11:34 - Araviiii 🎓: <Media omitted>
15/08/23, 11:35 - Viswaa Ramasubramanian: 🤧
15/08/23, 11:37 - Harecharan CSE E Amrita CBE: boysss … tell me some good phone under 15000
15/08/23, 11:37 - Harecharan CSE E Amrita CBE: my phone makar panna aarambithiruchuu
15/08/23, 11:37 - Araviiii 🎓: Switch to Samsung da
15/08/23, 11:38 - Araviiii 🎓: Buy Any series u want
15/08/23, 11:38 - Harecharan CSE E Amrita CBE: Im already in Samsung da 😂
15/08/23, 11:38 - Harecharan CSE E Amrita CBE: Galaxy S9+
15/08/23, 11:38 - Araviiii 🎓: Ohh....😅
15/08/23, 11:38 - Araviiii 🎓: Then switch to M series in samsung
15/08/23, 11:38 - Viswaa Ramasubramanian: U can go with samsung M seriesss
15/08/23, 11:39 - Shesadriii 🎓: Poco X5
15/08/23, 11:39 - Viswaa Ramasubramanian: Same timingg
16/08/23, 11:10 - Vickssss 🎓: Boys my treat today
16/08/23, 11:11 - Gannu: 🥲
16/08/23, 14:19 - Araviiii 🎓: dei Bois mam came @917449292156 @919840365293 @919941614061
16/08/23, 14:41 - Araviiii 🎓: sry da viswaa nee pona tha pakala
16/08/23, 14:41 - Viswaa Ramasubramanian: Paravala beta
16/08/23, 15:25 - Sanjuuu 🎓: <Media omitted>
17/08/23, 14:22 - Sanjuuu 🎓: <Media omitted>
17/08/23, 14:40 - Vickssss 🎓: ```def mergeSort(arr):
    global ctr
    if len(arr)>1:
        mid = len(arr)//2
        l_arr = arr[:mid]
        r_arr = arr[mid:]
        mergeSort(l_arr)
        mergeSort(r_arr)

        i=j=0

        while i<len(l_arr) and j<len(r_arr):
            if l_arr[i]>r_arr[j]:
                ctr+=1
                j+=1
            else:
                i+=1```
17/08/23, 14:55 - Shesadriii 🎓: def mergeSort(l, low, high, invCount):
    if low < high:
        mid = (low + high) // 2
        invCount = mergeSort(l, low, mid, invCount)
        invCount = mergeSort(l, mid + 1, high, invCount)
        invCount = merge(l, low, mid, high, invCount)
    return invCount

def merge(l, low, mid, high, invCount):
    i, j = low, mid + 1
    res = []
    while i <= mid and j <= high:
        if l[i] <= l[j]:
            res.append(l[i])
            i += 1
        else:
            res.append(l[j])
            j += 1
            invCount += mid - i + 1
    while i <= mid:
        res.append(l[i])
        i += 1
    while j <= high:
        res.append(l[j])
        j += 1
    for i in range(len(res)):
        l[low + i] = res[i]
    return invCount

n=int(input())
l = list(map(int, input().split(', ')))
invCount = mergeSort(l, 0, len(l) - 1, 0)
print(invCount)
17/08/23, 15:08 - Sanjuuu 🎓: ```
def merge_inversion_count(arr):
    global count
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        
        merge_inversion_count(left_half)
        merge_inversion_count(right_half)
        
        i, j, k = 0, 0, 0
        
        while i < len(left_half) and j < len(right_half):
            if left_half[i] <= right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
                count += len(left_half) - i  # Count inversions
            k += 1
        
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1
        
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

def inversion_count(arr):
    global count
    count = 0
    merge_inversion_count(arr)
    return count

n = int(input())
arr = list(map(int, input().split(",")))
result = inversion_count(arr)
print(result)

```
17/08/23, 15:09 - Vickssss 🎓: ```def extractAreacode(no, d):
    return int(no // pow(10, d - 1)) % 10

def countingSortByDigit(arr, digitpos):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        digit = extractAreacode(arr[i], digitpos)
        count[digit] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        digit = extractAreacode(arr[i], digitpos)
        output[count[digit] - 1] = arr[i]
        count[digit] -= 1
        i -= 1

    for i in range(n):
        arr[i] = output[i]

def radixSort(arr, maxdigits):
    for digitpos in range(maxdigits, 0, -1):
        countingSortByDigit(arr, digitpos)

def getPhoneNumbers():
    phone = []
    noOfElements = int(input())
    while noOfElements > 0:
        element = int(input())
        phone.append(element)
        noOfElements -= 1
    maxdigits = len(str(max(phone)))
    radixSort(phone, maxdigits)

    print(phone)

def main():
    getPhoneNumbers()

if __name__ == '__main__':
    main()
```
17/08/23, 15:15 - Harecharan CSE E Amrita CBE: This message was deleted
17/08/23, 15:16 - Harecharan CSE E Amrita CBE: This message was deleted
17/08/23, 15:16 - Harecharan CSE E Amrita CBE: buckets = [[] for _ in range(10)]  # Create 10 buckets for each possible digit
    
    # Distribute phone numbers into buckets based on the current digit position
    for phone in list:
        area_code = extractAreacode(phone, digitpos)
        buckets[area_code].append(phone)
    
    list.clear()  # Clear the list for reordering
    
    # Append phone numbers back to the list in sorted order
    for bucket in buckets:
        list.extend(bucket)
    
    print(list)  # Print the array after each pass
17/08/23, 19:41 - Sanjuuu 🎓: Manchurian in mess bois
17/08/23, 19:41 - Sanjuuu 🎓: 👀
18/08/23, 11:17 - Vickssss 🎓: <Media omitted>
18/08/23, 11:44 - Shesadriii 🎓: <Media omitted>
18/08/23, 14:34 - Sanjuuu 🎓: ```
import pandas as pd
from sqlalchemy import create_engine

# Create an in-memory SQLite database engine
engine = create_engine('sqlite:///:memory:')

# Define and populate the 'my_table' table
data = pd.read_csv('iris.csv')
df = pd.DataFrame(data)
df.to_sql('my_table', engine, index=False)

# Read data from the 'my_table' table using different methods
result1 = pd.read_sql("SELECT * FROM my_table;", engine)
result2 = pd.read_sql_table('my_table', engine)
result3 = pd.read_sql_query("SELECT * FROM my_table;", engine)

# Display the results
print("Result from SELECT * FROM my_table:")
print(result1)

print("\nResult from pd.read_sql_table('my_table', engine):")
print(result2)

print("\nResult from pd.read_sql_query('SELECT * FROM my_table;', engine):")
print(result3)```
18/08/23, 14:53 - Harecharan CSE E Amrita CBE: September 1 lab eval portions:dk
septemner8 quiz combined 
Fods
18/08/23, 19:33 - Shesadriii 🎓: BUMRAAHHHH
18/08/23, 19:33 - Shesadriii 🎓: Wicket !!
18/08/23, 19:35 - Shesadriii 🎓: He takes 2 in the first over !!
19/08/23, 08:37 - Shesadriii 🎓: Reached home safely boiz
19/08/23, 10:31 - Sooorrrr 🎓: <Media omitted>
19/08/23, 10:31 - Sooorrrr 🎓: The IETE Club is thrilled to announce its upcoming workshop titled 'Introduction to AI/ML and How ChatGPT Works.' 🧠🤖 
                                                                                                                                                                                                      
 Join us for an insightful session where we'll demystify the inner workings of ChatGPT and explore its incredible capabilities. Whether you're a tech enthusiast or just curious about AI, this workshop is perfect for you. 🌟

Hurry up, it will fill fast! The workshop follows a first-come, first-served basis, and there are only 100 seats available.

Date: 23rd august
Venue: Seminar Hall ( 2nd floor AB3).                                                                                                                                                                                                                                                                                                
 Time:  2pm to 5pm.                                                                                                                                                                                                    
                                                                                                                                                                                                Please fill the registration form https://forms.office.com/r/gh4akmZrGM

On top of that, OD certificates will be provided to attendees upon successful completion of the workshop.

See you there! 🤝🔥

For further details, please contact:
+91 8434346106 | +91 9789555648

Regards,
IETE Club
20/08/23, 13:18 - Viswaa Ramasubramanian: <Media omitted>
20/08/23, 13:19 - Araviiii 🎓: Naa erukum
20/08/23, 13:19 - Araviiii 🎓: Gud in taste 😋 👌🏼
20/08/23, 13:19 - Viswaa Ramasubramanian: <Media omitted>
20/08/23, 13:20 - Shesadriii 🎓: <Media omitted>
20/08/23, 13:20 - Phoool Gobiiii  🎓: <Media omitted>
20/08/23, 13:20 - Araviiii 🎓: Dei stop taking photos da
20/08/23, 13:20 - Viswaa Ramasubramanian: I said this casatta available in main canteen
20/08/23, 13:20 - Araviiii 🎓: Seri seri 😆
20/08/23, 13:20 - Phoool Gobiiii  🎓: Viswa creepy guy
20/08/23, 13:20 - Araviiii 🎓: Leave it
20/08/23, 13:21 - Araviiii 🎓: Poi sapidu
20/08/23, 13:21 - Araviiii 🎓: Sapudu*
20/08/23, 13:21 - Shesadriii 🎓: Wait.....Only viswaa going to mc ?
20/08/23, 13:21 - Viswaa Ramasubramanian: Snap bro
20/08/23, 13:21 - Viswaa Ramasubramanian: Soor irukan
20/08/23, 13:21 - Viswaa Ramasubramanian: Ram and aravii outing
20/08/23, 13:22 - Shesadriii 🎓: Ow......
20/08/23, 21:00 - Harecharan CSE E Amrita CBE: https://www.youtube.com/shorts/8qV5DkisJCE
21/08/23, 11:40 - Phoool Gobiiii  🎓: <Media omitted>
21/08/23, 12:28 - Araviiii 🎓: <Media omitted>
21/08/23, 12:57 - Araviiii 🎓: <Media omitted>
23/08/23, 09:38 - Sanjuuu 🎓: <Media omitted>
23/08/23, 22:13 - Araviiii 🎓: An exciting opportunity has come up for the students of your esteemed institute! Coca-Cola Disrupt Season 3 is open for registrations.


We humbly invite the students of your esteemed college to apply for this challenge.


Rewards:


Hiring Opportunities with Hindustan Coca-Cola Beverages (HCCB)

Cash prizes worth up to INR 6 Lakhs (T&C Applied)

HCCB Goodies


Registration Link: https://unstop.com/competitions/coca-cola-disrupt-season-3-hindustan-coca-cola-beverages-709347?utm_source=HCCB&utm_medium=Placement-Cells&ref=qBdfdG4E


Deadline: 27th August 2023 23:59 PM.
23/08/23, 22:14 - Araviiii 🎓: dei is anyone gonna apply for this ☝🏻?
24/08/23, 10:41 - Araviiii 🎓: <Media omitted>
24/08/23, 10:43 - Araviiii 🎓: @917449292156 @919941614061
24/08/23, 10:45 - Phoool Gobiiii  🎓: <Media omitted>
24/08/23, 12:07 - Araviiii 🎓: Dei shreyas room la enda "all out " mosquito repellent on pani vaichiruka
24/08/23, 12:08 - Araviiii 🎓: Room full-aa atha chemical smell-aa eruku da
24/08/23, 12:30 - Vickssss 🎓: Guys varambodhu pls bring cube
24/08/23, 12:31 - Shesadriii 🎓: Sorry da.... forgot to switch off
24/08/23, 13:29 - Araviiii 🎓: <Media omitted>
24/08/23, 14:00 - Shesadriii 🎓: <Media omitted>
24/08/23, 17:31 - Phoool Gobiiii  🎓: <Media omitted>
25/08/23, 08:25 - Vickssss 🎓: Tomorrow we do not have Embedded Systems Class in the afternoon. Only Computer Networks Lab (for first two slots and sir will not be taking the ML lab slots) and Professional Electives.
25/08/23, 08:25 - Vickssss 🎓: From f section
25/08/23, 08:26 - Vickssss 🎓: So do we have electives or not?
25/08/23, 08:26 - Harecharan CSE E Amrita CBE: we will go and ask ra
25/08/23, 08:26 - Vickssss 🎓: Ok
25/08/23, 08:30 - Harecharan CSE E Amrita CBE: [08:30] Dr. Nikhil Raj P.P (CHEMICAL)

Greatbarrierreef
25/08/23, 10:04 - Araviiii 🎓: ticket booked
25/08/23, 10:10 - Viswaa Ramasubramanian: Edhu anbazhagan sir kooptara
25/08/23, 11:37 - Araviiii 🎓: <Media omitted>
25/08/23, 17:36 - Gannu: <Media omitted>
26/08/23, 08:53 - Araviiii 🎓: https://timesofindia.indiatimes.com/gadgets-news/amazon-india-launches-new-edition-of-machine-learning-summer-school/articleshow/102954959.cms
26/08/23, 17:53 - Shesadriii 🎓: Reached home boiz
26/08/23, 18:46 - Shesadriii 🎓: guys, msg here after you reach : )
26/08/23, 18:47 - Araviiii 🎓: Okay
26/08/23, 18:49 - Harecharan CSE E Amrita CBE: reached 😊
26/08/23, 21:22 - Phoool Gobiiii  🎓: Boarded bus bois ✨
27/08/23, 05:15 - Phoool Gobiiii  🎓: Reached home bois
27/08/23, 05:15 - Viswaa Ramasubramanian: Reached trichy boisss
27/08/23, 05:59 - Gannu: Reached home boiss
27/08/23, 07:31 - Araviiii 🎓: Reached home bois
27/08/23, 08:57 - Sooorrrr 🎓: Reached home bois
27/08/23, 14:31 - Vickssss 🎓: guys can anyone forward the DAA assignment here?
27/08/23, 14:31 - Vickssss 🎓: I am unable to open it
27/08/23, 16:46 - Harecharan CSE E Amrita CBE: <Media omitted>
28/08/23, 09:38 - Araviiii 🎓: Bois, has the result been declared for the xams u wrote for internship?
28/08/23, 09:39 - Harecharan CSE E Amrita CBE: which ? I wrote bny and nothing  as of yet
28/08/23, 09:40 - Araviiii 🎓: Oh okie
28/08/23, 09:40 - Araviiii 🎓: Wat abt providence, slb ?
28/08/23, 09:44 - Viswaa Ramasubramanian: Mail edhuvum varla ippadhiki
28/08/23, 09:44 - Araviiii 🎓: Okie
28/08/23, 14:07 - Araviiii 🎓: guys we need to study 3 things for the upcoming FODS evaluation ryt?
28/08/23, 14:07 - Araviiii 🎓: do u guys know what are they ?
28/08/23, 14:08 - Araviiii 🎓: all I know we have DATA Visualization …..
28/08/23, 14:09 - Gannu: Data cleaning
Data visualisation
Descriptive statistics <This message was edited>
28/08/23, 14:09 - Araviiii 🎓: oic
28/08/23, 14:10 - Araviiii 🎓: did sir gave any notes regarding DATA CLEANING
28/08/23, 14:10 - Araviiii 🎓: ?
28/08/23, 14:10 - Araviiii 🎓: and statistics
28/08/23, 14:10 - Araviiii 🎓: ?
28/08/23, 14:10 - Gannu: Iru
28/08/23, 14:10 - Araviiii 🎓: <Media omitted>
28/08/23, 14:10 - Araviiii 🎓: okie
28/08/23, 14:11 - Araviiii 🎓: which category does this come in
28/08/23, 14:11 - Gannu: Cleaning
28/08/23, 14:12 - Gannu: <Media omitted>
28/08/23, 14:12 - Gannu: <Media omitted>
28/08/23, 14:13 - Araviiii 🎓: only these 3 ppt we need to study?
28/08/23, 14:13 - Gannu: Yep
28/08/23, 14:13 - Gannu: And implement them in few datasets
28/08/23, 14:13 - Araviiii 🎓: k
28/08/23, 14:14 - Araviiii 🎓: we can leave out theory parts ryt?
28/08/23, 14:14 - Gannu: Yess for now
28/08/23, 14:14 - Araviiii 🎓: kk
29/08/23, 08:06 - Araviiii 🎓: https://t.me/dealschamp

Guys, join this telegram channel 

It's gud, especially @918939677049 u can get hoodies in offer
29/08/23, 16:03 - Harecharan CSE E Amrita CBE: can a 5g jio sim work on a 4g set
29/08/23, 16:04 - Harecharan CSE E Amrita CBE: will it provide unlimited data in 4g speed itself if I choose to buy a 5g plan and convert my sim to a 5g?
29/08/23, 17:05 - Phoool Gobiiii  🎓: You need a 5g supporting phone
29/08/23, 17:37 - Vickssss 🎓: Unlimited 5G on jio is applicable only if you are in a Rs239/28 days prepaid plan per month
29/08/23, 17:38 - Vickssss 🎓: That too the device should be 5G one
29/08/23, 20:39 - Harecharan CSE E Amrita CBE: thanks 4 ur response
29/08/23, 20:39 - Harecharan CSE E Amrita CBE: phone is getting delayed so now im using my moms for substitutetion
29/08/23, 23:06 - Viswaa Ramasubramanian: Boarded train boisss
30/08/23, 06:59 - Araviiii 🎓: This message was deleted
30/08/23, 19:25 - Phoool Gobiiii  🎓: <Media omitted>
31/08/23, 09:41 - Sanjuuu 🎓: <Media omitted>
31/08/23, 09:41 - Gannu: Sure, here are some popular ARM microcontrollers:

1. **STM32 Series by STMicroelectronics**: A wide range of 32-bit ARM Cortex-M-based microcontrollers.
2. **NXP LPC Series**: ARM-based microcontrollers with various options for performance and peripherals.
3. **Microchip SAM Series**: ARM Cortex-M-based microcontrollers with different features and capabilities.
4. **Atmel SAM Series**: Acquired by Microchip, these were ARM-based microcontrollers known for their versatility.
5. **TI Tiva C Series**: Now part of the SimpleLink family, these ARM Cortex-M microcontrollers offer connectivity features.
6. **Renesas RX Series**: Some microcontrollers in this series utilize ARM Cortex-M cores for various applications.
7. **Nordic Semiconductor nRF52 Series**: Known for Bluetooth Low Energy (BLE) connectivity, these microcontrollers use ARM Cortex-M cores.
8. **Freescale Kinetis Series**: Acquired by NXP, these microcontrollers use ARM Cortex-M cores with various feature sets.
9. **Silicon Labs EFM32/EFM32 Series**: Energy-efficient microcontrollers with ARM Cortex-M cores.
10. **Cypress PSoC 6**: These microcontrollers combine ARM Cortex-M cores with programmable analog and digital blocks.

Remember that there are numerous other ARM-based microcontrollers available, each with its own set of features and target applications. Always refer to the manufacturers' documentation for the latest information and options.
31/08/23, 09:41 - Gannu: The terms "ARM architecture" and "ARM core" refer to different aspects of the technology developed by ARM Holdings. Let's delve into each concept in detail:

1. **ARM Architecture**:
   The ARM architecture refers to the set of rules, conventions, and specifications that define how processors using ARM technology work and communicate. It's a standardized framework that outlines the design principles for creating processors with specific capabilities. The ARM architecture encompasses various elements, such as instruction sets, memory management, system architecture, and more.

   ARM architectures include different generations, each offering improvements in performance, power efficiency, and capabilities. Examples of ARM architectures include ARMv7, ARMv8-A, ARMv9, and so on. The architecture defines the high-level structure and features of the processors built using ARM technology.

2. **ARM Core**:
   An ARM core is the central processing unit (CPU) that is designed based on a specific ARM architecture. It's the heart of a microcontroller or microprocessor and executes instructions according to the rules set by the ARM architecture. Each ARM core is optimized for a particular set of tasks, whether they are focused on low-power consumption, high performance, or a balance between the two.

   ARM cores can have different features, pipeline structures, and instruction sets based on the ARM architecture they implement. For instance, an ARM core might implement the ARMv8-A architecture, which introduces features like 64-bit support, virtualization, and improved security mechanisms. Another ARM core might implement the ARMv7 architecture, which focuses on 32-bit performance.

In summary, the ARM architecture defines the overall design rules and specifications, while an ARM core is a physical implementation of a CPU that adheres to a specific ARM architecture. Different ARM cores can be designed based on different ARM architectures to cater to various application requirements.
31/08/23, 09:41 - Gannu: Certainly! The ARM Cortex series comprises three main categories: Cortex-A, Cortex-M, and Cortex-R. Each series is optimized for specific types of applications, offering different performance levels, power efficiency, and features. Here's a detailed explanation of each series:

1. **ARM Cortex-A Series**:
   The Cortex-A series targets high-performance applications, such as smartphones, tablets, laptops, and servers. These cores are designed to handle complex tasks, multitasking, and demanding workloads. Key features include:

   - **Out-of-Order Execution**: Cortex-A cores use sophisticated techniques to rearrange instructions for efficient execution, maximizing performance.
   - **Superscalar Architecture**: They can execute multiple instructions per clock cycle, enhancing parallelism.
   - **Advanced Memory Management**: Support for virtual memory, memory protection, and large memory address spaces.
   - **64-Bit Support**: Recent Cortex-A cores support 64-bit memory addressing for handling large amounts of data.
   - **Advanced SIMD (Single Instruction, Multiple Data)**: Accelerates multimedia and signal processing tasks.
   - **TrustZone Technology**: Provides hardware-based security features to isolate and protect sensitive data.

2. **ARM Cortex-M Series**:
   The Cortex-M series is designed for microcontroller applications, emphasizing power efficiency, real-time performance, and simplicity. These cores are commonly found in embedded systems, IoT devices, and wearables. Key features include:

   - **Harvard Architecture**: Separate buses for instructions and data, improving efficiency.
   - **Low Power Consumption**: Cortex-M cores are optimized for energy-efficient operation.
   - **Thumb-2 Instruction Set**: Combines 16-bit and 32-bit instructions for compact code and reduced memory usage.
   - **Interrupt Handling**: Fast and predictable interrupt response for real-time applications.
   - **Memory Protection Unit (MPU)**: Allows memory regions to be protected from unauthorized access.
   - **Debugging and Trace Support**: Simplifies development and troubleshooting.

3. **ARM Cortex-R Series**:
   The Cortex-R series targets real-time applications that require high reliability and determinism, such as automotive systems, industrial control, and medical devices. Key features include:

   - **Predictable Performance**: Designed for hard real-time tasks, ensuring consistent and guaranteed response times.
   - **Dual-Core Lock-Step**: Some Cortex-R cores support dual-core configurations for fault tolerance.
   - **Error Detection and Correction**: Hardware mechanisms to detect and correct errors in memory and data transfers.
   - **Memory Protection**: Ensures isolation between critical and non-critical code and data.
   - **Fast Interrupt Handling**: Minimizes latency for real-time events.
   - **Highly Reliable Systems**: Built to meet stringent safety standards.

Each Cortex series serves specific application domains, offering a range of options within each category to match the requirements of various use cases. ARM continuously develops new cores and architectures to stay at the forefront of performance, power efficiency, and innovation.
31/08/23, 09:43 - Sanjuuu 🎓: <Media omitted>
31/08/23, 23:50 - Harecharan CSE E Amrita CBE: This message was deleted
31/08/23, 23:50 - Harecharan CSE E Amrita CBE: ``` df3[["l_age","u_age"]]=df3["Age"].str.extract(r'(\d+) to (\d+|\d+\+)')
df3```
31/08/23, 23:51 - Harecharan CSE E Amrita CBE: <Media omitted>
01/09/23, 08:27 - Araviiii 🎓: Guys we have quiz
01/09/23, 08:28 - Araviiii 🎓: It uploaded in AUMS
01/09/23, 08:31 - Araviiii 🎓: Dei password enna
01/09/23, 08:35 - Shesadriii 🎓: Mangroveforests
01/09/23, 08:35 - Araviiii 🎓: 👍🏻
01/09/23, 08:46 - Araviiii 🎓: guys
01/09/23, 08:46 - Araviiii 🎓: <Media omitted>
01/09/23, 08:47 - Araviiii 🎓: this is a GitHub account sent by debases sir to us
01/09/23, 08:47 - Araviiii 🎓: I just clicked the link and found out these
01/09/23, 10:14 - Vickssss 🎓: Sure! Here's an example of a sorting activity problem that can be solved using a greedy algorithm:

**Problem: Scheduling Activities**

You are given a list of activities, each with a start time and an end time. Your goal is to select the maximum number of non-overlapping activities that can be scheduled. Activities cannot overlap in terms of their time intervals.

```python
def activity_selection(activities):
    activities.sort(key=lambda x: x[1])  # Sort activities by end time
    selected_activities = [activities[0]]
    last_selected_index = 0
    
    for i in range(1, len(activities)):
        if activities[i][0] >= activities[last_selected_index][1]:
            selected_activities.append(activities[i])
            last_selected_index = i
            
    return selected_activities

# Example activities: (start time, end time)
activities = [(1, 4), (3, 5), (0, 6), (5, 7), (3, 9), (5, 9), (6, 10), (8, 11), (8, 12), (2, 14), (12, 16)]
selected = activity_selection(activities)

print("Selected activities:")
for activity in selected:
    print(activity)
```

In this example, the `activity_selection` function takes a list of activities as input, where each activity is represented as a tuple `(start_time, end_time)`. The algorithm sorts the activities by their end times and then iterates through the sorted list to greedily select non-overlapping activities.

Keep in mind that this is just one example of a greedy algorithm applied to a sorting activity problem. There are many other scenarios where greedy algorithms can be used to efficiently solve sorting-related problems.
01/09/23, 10:38 - Araviiii 🎓: I have given my name for campus decoration
01/09/23, 10:42 - Viswaa Ramasubramanian: Niceee enjoyyt
01/09/23, 10:57 - Harecharan CSE E Amrita CBE: I have given for campus,english writing, digital art., spot photography , and one other thing I 4got
01/09/23, 10:57 - Harecharan CSE E Amrita CBE: but not going into anyhting
01/09/23, 11:14 - Vickssss 🎓: https://raw.githubusercontent.com/dayanandv/Data-Science/main/dataset/uk-500.csv
01/09/23, 15:32 - Vickssss 🎓: https://www.youtube.com/playlist?list=PLp6ek2hDcoNB_YJCruBFjhF79f5ZHyBuz
01/09/23, 15:33 - Vickssss 🎓: https://www.youtube.com/playlist?list=PLbRMhDVUMngc7NM-gDwcBzIYZNFSK2N1a
01/09/23, 15:46 - Vickssss 🎓: <Media omitted>
01/09/23, 15:46 - Vickssss 🎓: <Media omitted>
02/09/23, 06:52 - Gannu: <Media omitted>
02/09/23, 08:02 - Harecharan CSE E Amrita CBE: <Media omitted>
02/09/23, 08:29 - Araviiii 🎓: <Media omitted>
02/09/23, 11:35 - Shesadriii 🎓: <Media omitted>
02/09/23, 11:36 - Shesadriii 🎓: <Media omitted>
02/09/23, 11:56 - Shesadriii 🎓: <Media omitted>
02/09/23, 15:04 - Shesadriii 🎓: <Media omitted>
02/09/23, 19:37 - Harecharan CSE E Amrita CBE: <Media omitted>
02/09/23, 19:38 - Phoool Gobiiii  🎓: Podu 🔥🔥
02/09/23, 19:38 - Shesadriii 🎓: Gethu
02/09/23, 19:38 - Araviiii 🎓: New phoneee... 🔥🔥🔥🔥🔥
02/09/23, 20:31 - Vickssss 🎓: Nice da
03/09/23, 11:48 - Phoool Gobiiii  🎓: <Media omitted>
03/09/23, 11:48 - Phoool Gobiiii  🎓: Featuring Sanjay and Shreyas’ tables
03/09/23, 11:49 - Shesadriii 🎓: Tf is happening 😂
03/09/23, 11:51 - Araviiii 🎓: 🤣
03/09/23, 11:51 - Gannu: Ada paavi 😂
03/09/23, 14:03 - Araviiii 🎓: <Media omitted>
03/09/23, 18:59 - Harecharan CSE E Amrita CBE: <Media omitted>
03/09/23, 19:15 - Harecharan CSE E Amrita CBE: Indians: don't drink cola it has too much sugar 
Also Indians : 👆🏿
03/09/23, 19:15 - Shesadriii 🎓: Bruh.....this is Just natural sugar
03/09/23, 19:16 - Shesadriii 🎓: It ain't a carbonated drink
03/09/23, 19:16 - Viswaa Ramasubramanian: Dei venna white sugar Kum nattu sakarai Kum vithyasam iruku da
03/09/23, 19:16 - Shesadriii 🎓: #attaaaccckkkk_hare
03/09/23, 19:19 - Viswaa Ramasubramanian: https://www.thehindu.com/features/metroplus/sweet-pongal-recipe/article6767756.ece

Kaludhaiku teriyuma karpuram vasana
03/09/23, 19:21 - Viswaa Ramasubramanian: Endha andha alaviku aruvikettipoya da namba oorula Pongal nu celebrate panranga

Enda saara Naa hurt ayi
03/09/23, 19:22 - Viswaa Ramasubramanian: Olunga kuduthada thinnomanu irudha 
Indha Mari nee pesradhunala dhan kadaval unna Amrita la mess la sapda vidraru
03/09/23, 19:22 - Viswaa Ramasubramanian: Sollada engalaiyum sethu sapda vaikraru 🤧
03/09/23, 19:27 - Harecharan CSE E Amrita CBE: dei im not wasting it
03/09/23, 19:27 - Harecharan CSE E Amrita CBE: so god cantpunish me
03/09/23, 19:28 - Harecharan CSE E Amrita CBE: just saying all aunties made only pongal
03/09/23, 19:29 - Viswaa Ramasubramanian: Pongal podama unaku enna poori ah poduvanga
03/09/23, 21:29 - Phoool Gobiiii  🎓: <Media omitted>
03/09/23, 21:30 - Shesadriii 🎓: Bruh
03/09/23, 21:38 - Viswaa Ramasubramanian: swap card rules padida @919941614061
03/09/23, 21:43 - Shesadriii 🎓: English padika theriyadhu......Neeye sollu
04/09/23, 07:32 - Vickssss 🎓: Boys classuku varumbodhu cube aa marandhudadhinga
04/09/23, 12:24 - Araviiii 🎓: <Media omitted>
04/09/23, 19:01 - Araviiii 🎓: <Media omitted>
04/09/23, 19:01 - Araviiii 🎓: 3 litres of beauty
04/09/23, 19:47 - Viswaa Ramasubramanian: Boiss
04/09/23, 19:47 - Viswaa Ramasubramanian: Porotta in agastya bhavanam mess <This message was edited>
05/09/23, 11:02 - Araviiii 🎓: <Media omitted>
05/09/23, 11:02 - Araviiii 🎓: <Media omitted>
05/09/23, 11:20 - Vickssss 🎓: The provided code is written in C and appears to be intended for a microcontroller, specifically the TM4C123GH6PM, which is part of the Texas Instruments Tiva C Series family. This code seems to configure the microcontroller to work with GPIO pins on Port F and perform some basic input/output operations. Let's break down the code and explain each section along with the reasons for setting the registers to those values.

```c
#include "TM4C123GH6PM.h"
```

This line includes the header file for the TM4C123GH6PM microcontroller. It provides access to the register definitions and constants necessary to interact with the microcontroller's peripherals.

```c
int main(void) {
```

This is the main function, the entry point of the program.

```c
    unsigned int state;
```

This declares an unsigned integer variable called 'state' to store the state of a GPIO pin.

```c
    SYSCTL->RCGCGPIO |= 0x20;
```

This line enables the clock for Port F by setting the corresponding bit (bit 5) in the RCGCGPIO (Run-Mode Clock Gating Control for GPIO) register. Enabling the clock is necessary for the microcontroller to use Port F.

```c
    GPIOF->LOCK = 0x4C4F434B;
```

This line unlocks the GPIOCR (GPIO Commit Register) by writing the unlock value 0x4C4F434B to the LOCK register. This is often required before making certain changes to the GPIO configuration.

```c
    GPIOF->CR = 0x01;
```

This line sets the GPIO Commit Register (GPIOF->CR) to 0x01. This might not be necessary in this context, as it's commented as "Can be skipped as switches are connected to PORTF." It's usually used when you want to commit changes to certain GPIO configurations.

```c
    GPIOF->PUR |= 0x10;
```

This line enables the internal pull-up resistor for Pin 4 of Port F (GPIOF). This can be used to ensure that the pin is pulled high when it's not actively being driven low.

```c
    GPIOF->DIR |= 0x02;
```

This line sets Pin 1 of Port F as an output by setting the corresponding bit in the GPIO Direction (GPIOF->DIR) register. Pin 1 is set to 1 (output), while the rest of the pins remain as inputs.

```c
    GPIOF->DEN |= 0x12;
```

This line sets the digital enable for Pins 1 and 4 of Port F by setting the corresponding bits in the Digital Enable (GPIOF->DEN) register. This allows these pins to be used as digital GPIO pins.

```c
    while (1) {
        state = GPIOF->DATA & 0x10;
```

This line reads the current state of Pin 4 (bit 4) of Port F and stores it in the 'state' variable. The '& 0x10' masks out all bits except bit 4, effectively isolating the state of that pin.

```c
        GPIOF->DATA = (~state >> 3);
```

This line inverts the 'state' (bit 4) and then right-shifts it by 3 positions (equivalent to dividing by 8). The result is written to Pin 1 of Port F (bit 1). This code appears to toggle Pin 1 (bit 1) based on the state of Pin 4 (bit 4).

The purpose of this code seems to be reading the state of Pin 4 (perhaps connected to a switch or sensor) and using that state to control Pin 1 as an output. The specifics of what it's controlling would depend on the external hardware connected to these pins.*
05/09/23, 11:31 - Vickssss 🎓: This line inverts the 'state' (bit 4) and then right-shifts it by 3 positions (equivalent to dividing by 8). The result is written to Pin 1 of Port F (bit 1). This code appears to toggle Pin 1 (bit 1) based on the state of Pin 4 (bit 4).

The purpose of this code seems to be reading the state of Pin 4 (perhaps connected to a switch or sensor) and using that state to control Pin 1 as an output. The specifics of what it's controlling would depend on the external hardware connected to these pins.
05/09/23, 12:12 - Harecharan CSE E Amrita CBE: <Media omitted>
05/09/23, 12:24 - Vickssss 🎓: #include "TM4C123GH6PM.h"

int main(void)
{
   unsigned int state;
   SYSCTL->RCGCGPIO |= 0x20;   /* enable clock to GPIOF */
   GPIOF->LOCK = 0x4C4F434B;   // unlockGPIOCR register
   GPIOF->CR = 0x01;           // Enable GPIOPUR register enable to commit
   GPIOF->PUR |= 0x11;        // Enable Pull Up resistor PF4
   GPIOF->DIR |= 0x0E;          //set PF1 as an output and PF4 as an input pin
   GPIOF->DEN |= 0x1F;         // Enable PF1 and PF4 as a digital GPIO pins 
		
	 unsigned int red_led=0x02;
	unsigned int blue_led=0x04;
	unsigned int green_led=0x08;
    while(1)
    {   
        state = GPIOF->DATA & 0x11;
			if(state==0x01){
				GPIOF->DATA=red_led;
        
    }
			else if(state==0x10){
			GPIOF->DATA=blue_led;
			}
			else{GPIOF->DATA=0x00;}
}
		}
05/09/23, 12:24 - Harecharan CSE E Amrita CBE: #include "TM4C123GH6PM.h"

int main(void) {
    unsigned int switches, blue_led, green_led, red_led;

    SYSCTL->RCGCGPIO |= 0x20; 

    GPIOF->LOCK = 0x4C4F434B;  
    GPIOF->CR = 0x01;          
    GPIOF->PUR |= 0x11;       
    GPIOF->DIR |= 0x0E;       
    GPIOF->DEN |= 0x1F;        

    blue_led = 0x04;          
    green_led = 0x08;         
    red_led = 0x02;            

    while (1) {
        switches = GPIOF->DATA & 0x11;  

        if (switches == 0x01) {        
            GPIOF->DATA = green_led;    
        } else if (switches == 0x10) { 
            GPIOF->DATA =  blue_led;   
        } else {
            GPIOF->DATA =  red_led;   
        }
    }
}
07/09/23, 08:50 - Sanjuuu 🎓: https://youtube.com/shorts/KXlZ0Ww9OPg?si=kzkhjjuj_41NJKzo
07/09/23, 09:13 - Sanjuuu 🎓: area Program, code, readonly
	ENTRY
Main
	MOV r1,#0XFFFFFFFF
	mov r2,#1
	ADDS r3,r1,r2	 ;  // NZCV  -  0 1 1 0 
halt B halt 
	END
07/09/23, 09:17 - Vickssss 🎓: This message was deleted
07/09/23, 09:18 - Vickssss 🎓: ```	area Program, code, readonly
	ENTRY
Main
	MOV r1,#0XFFFFFFFF
	mov r2,#1
	ADDS r3,r1,r2	 ;  // NZCV  -  0 1 1 0 
halt B halt 
	END
```
07/09/23, 12:23 - Sooorrrr 🎓: Do gradient based , Momentum gradient based and Nesterov based gradient descent
07/09/23, 12:23 - Sooorrrr 🎓: Implement using batch,stochastic and mini batch
07/09/23, 14:11 - Sanjuuu 🎓: Hi ALL,
Todays lab, please work with the Lab Evaluation 1 questions released. If you have any doubt in questions, please meet me in my cabin(second floor Faculty cabin: AP9)
I will be sharing a link to collect the details of Group Formation for Lab Evaluation 1.
Link will be active between 2:05 and 2:15. Students who edited that sheet will be given the attendance for todays lab session☺️. 
So please dont ask your friends to fill in your number.
07/09/23, 14:11 - Sanjuuu 🎓: Is the link shared?
07/09/23, 15:46 - Sanjuuu 🎓: https://docs.google.com/forms/d/e/1FAIpQLSfcxWDNRgy1FMH6Rcy3Ws4a1ljCXzSzGldZxSn8n0xN5npRdQ/viewform
08/09/23, 00:14 - Araviiii 🎓: <Media omitted>
08/09/23, 08:30 - Phoool Gobiiii  🎓: StroBilanthes
08/09/23, 09:13 - Vickssss 🎓: ```	AREA Program, CODE, READONLY
	ENTRY
Main
	MOV r1,#0X8000000F
	LSL r2,r1,#2
	ASR r3,r1,#2
	
	ASRS r4,r1,#2
	RORS r5,r1,#2
	SWI &11
	END```
08/09/23, 09:18 - Vickssss 🎓: RORS r5, r1, #2: This is a rotate right (RORS) instruction that rotates the value in register r1 right by 2 bits and stores the result in register r5. Like the previous instruction, it also updates the condition flags NZCV. The comment indicates both the resulting value in r5 and the updated NZCV flags as 1010.
08/09/23, 09:38 - Vickssss 🎓: This message was deleted
08/09/23, 09:38 - Vickssss 🎓: ```	AREA Program, CODE, READONLY
	ENTRY
Main
	MOV r0,#100
	MOV r1,#10
	CMP r0,r1
	BEQ P1
	B DF

P1
		MOV r0,#200
DF
		ADD r2,r0,r1
halt B halt
		END```
08/09/23, 21:40 - Phoool Gobiiii  🎓: Boarded the bus bois ✨
09/09/23, 12:56 - Vickssss 🎓: <Media omitted>
09/09/23, 12:56 - Vickssss 🎓: magnetic cube in the house boys
09/09/23, 13:09 - Harecharan CSE E Amrita CBE: <Media omitted>
10/09/23, 08:51 - Viswaa Ramasubramanian: <Media omitted>
10/09/23, 08:51 - Viswaa Ramasubramanian: <Media omitted>
10/09/23, 08:51 - Viswaa Ramasubramanian: <Media omitted>
10/09/23, 08:51 - Viswaa Ramasubramanian: <Media omitted>
10/09/23, 10:00 - Harecharan CSE E Amrita CBE: thank god , I thought I was the only one whos wasting sunday 😉
11/09/23, 09:55 - Araviiii 🎓: Dei
11/09/23, 09:55 - Araviiii 🎓: Soor
11/09/23, 09:55 - Araviiii 🎓: U room Is in trouble
11/09/23, 09:55 - Araviiii 🎓: I tried opening with spare key
11/09/23, 09:55 - Araviiii 🎓: It is not opening
11/09/23, 09:55 - Araviiii 🎓: I applied oil also
11/09/23, 09:56 - Araviiii 🎓: Appaium open agala
11/09/23, 09:56 - Viswaa Ramasubramanian: parvala konjam neram kalichu pannu
11/09/23, 09:56 - Viswaa Ramasubramanian: open agum
11/09/23, 09:56 - Phoool Gobiiii  🎓: That key won't work it seems
11/09/23, 09:56 - Araviiii 🎓: K
11/09/23, 09:56 - Viswaa Ramasubramanian: idhu onnum pudhusu illa
11/09/23, 09:56 - Harecharan CSE E Amrita CBE: which key, mine aa
11/09/23, 09:57 - Araviiii 🎓: S
11/09/23, 09:57 - Viswaa Ramasubramanian: last 5 days ah ipdi dhan iruku
11/09/23, 09:57 - Harecharan CSE E Amrita CBE: hmmm
11/09/23, 09:57 - Viswaa Ramasubramanian: yaru key potalum work aga late agum
11/09/23, 09:57 - Sanjuuu 🎓: ```
\	AREA Program, CODE, READONLY
	ENTRY
Main
	MOV r1,#0X8000000F				; NZCV -0000   flag not set
	LSL r2,r1,#2					; r2 - 0000003C   
	ASR r3,r1,#2					; r3  - E0000003 
	
	ASRS r4,r1,#2					;  r4 - E0000003   NZCV - 1010
	RORS r5,r1,#2					;  r5 - E0000003   NZCV - 1010
	SWI &11
	END
```
11/09/23, 09:57 - Viswaa Ramasubramanian: lock matha porom naanga
11/09/23, 11:30 - Harecharan CSE E Amrita CBE: Good Morning Students,

 Infosys is planning to conduct a 3 day online Technical session on *Fundamentals of AI*, It is done through springboard platform, on successful completion of this course you will be provided with Certificate by Infosys itself. Though the session in virtual registered students *should come to CIR for attending the session*

Date : September 13,14,15
Time : 2.00PM - 3.30PM 
Topics Covered : Fundamentals of AI, ML, NLP, Deep Learning 
*Link : https://forms.office.com/r/cKZX4jDnqD*

*Interested students fill the above form ASAP*
11/09/23, 11:30 - Harecharan CSE E Amrita CBE: anyone doing dis?
11/09/23, 11:40 - Sooorrrr 🎓: yep
12/09/23, 11:09 - Harecharan CSE E Amrita CBE: <Media omitted>
12/09/23, 12:03 - Harecharan CSE E Amrita CBE: <Media omitted>
12/09/23, 12:03 - Harecharan CSE E Amrita CBE: <Media omitted>
12/09/23, 12:03 - Harecharan CSE E Amrita CBE: <Media omitted>
12/09/23, 14:01 - Harecharan CSE E Amrita CBE: https://forms.office.com/Pages/ResponsePage.aspx?id=o835AF4H5USqC6ujrdZTn-UADVEvl5pPmN15fzWbk1FUQlJRUFZFSThOOUdUT0xVRDNBRkNSOFU4Si4u&origin=QRCode
13/09/23, 09:15 - Vickssss 🎓: x - feature

y - response variable

f(x) = B0+B1*x

yi = f(xi) + Ei

Ei = yi - f(xi)

Ei = yi -(B0+B1*xi)

B0 = mean(y) - B1*mean(x)

Sxy -> sum of cross deviations of x and y

Sxx -> sum of squared deviation of x 

Predicted value of y yi' = B0+B1*(xi)

plot x and y using scatter plot and x and y' in a line plot

calulate MAE

calculate MSE

calculate RMSE
13/09/23, 09:28 - Sanjuuu 🎓: x_mean=sum(x)/len(x)
y_mean=sum(y)/len(y)
sxy=sxx=0
for i in range(len(x)):
    sxy+=(x[i]-x_mean)*(y[i]-y_mean)
    sxx+=(x[i]-x_mean)**2
B1=sxx/sxy
B0=y_mean-B1*x_mean

y2=[B1*i+B0 for i in range(0,10)]
print(y2)
14/09/23, 08:24 - Shesadriii 🎓: <Media omitted>
14/09/23, 08:25 - Phoool Gobiiii  🎓: 1 set dosa + 1 onion vada + 1 coffee 
- Ram
14/09/23, 08:26 - Shesadriii 🎓: Onion vada not available
14/09/23, 08:26 - Phoool Gobiiii  🎓: Then remove just that
14/09/23, 08:26 - Shesadriii 🎓: Okay
14/09/23, 08:27 - Shesadriii 🎓: Everyone else?
14/09/23, 09:14 - Vickssss 🎓: The provided code is an assembly language program written for the ARM architecture. It appears to be a program designed to find the length of a null-terminated string, which in this case is "ELECTRONICS 0". Let's go through the code step by step to understand its functionality:

```assembly
;ARM_NULL_STRING
;Program to find the length of a string
;ASCII IS 7 BITS

	AREA	RESET, CODE, READONLY
	ENTRY
```

- This section contains comments and directives that provide information about the code. It specifies that this is a program to find the length of a string and mentions that ASCII is 7 bits. The `AREA` directive defines a code section named "RESET" as read-only code.

```assembly
	MOV		R0, #00 //clearing r0 to use it for counting purposes
	LDR		R1, =TEXT //TEXT is a label pointing to a string
```

- This part of the code initializes two registers. `R0` is initialized with the value 0, which will be used for counting the length of the string. `R1` is loaded with the address of the string labeled "TEXT."

```assembly
BACK
	LDRB	R2, [R1], #01 //loading the byte at the address in R1 into R2
	CMP		R2, #'0'            ; 0 indicates the end of the string
	BEQ		STOP
	ADD		R0, R0, #01
	B		BACK
```

- This is the main loop of the program, denoted by the label "BACK." It does the following:
  - `LDRB` loads a byte from the memory location pointed to by `R1` into `R2` and increments `R1` by 1 byte (specified by `#01`).
  - `CMP` compares the byte in `R2` to the ASCII value of '0', which is used as an end-of-string marker.
  - If the comparison (`CMP`) indicates that `R2` contains '0', the program branches to the label "STOP," indicating the end of the string.
  - If the comparison is not equal (not the end of the string), it increments `R0` by 1 to count the character and goes back to the "BACK" label to process the next character in the string.

```assembly
STOP
	MOV		R3, #0x40000000      ;Result location
	STR		R0, [R3]
	SWI		&11
```

- The "STOP" label is reached when the end of the string is encountered.
  - `MOV` sets `R3` to a specific memory address, 0x40000000, which is presumably the location where the result (length of the string) will be stored.
  - `STR` stores the value in `R0` (which holds the length of the string) into the memory location pointed to by `R3`.
  - `SWI` is a software interrupt instruction. The value `&11` is used to exit the program, likely returning the length of the string as the result.

```assembly
TEXT	DCB		"ELECTRONICS 0"      ;12 including space in HEX it's 0C
```

- This section defines the string labeled "TEXT." It contains the string "ELECTRONICS 0," terminated with a null character '0'. The comment indicates that the length of the string, including the space character, is 12 bytes in hexadecimal, which is 0x0C.

This assembly program effectively calculates the length of the null-terminated string "ELECTRONICS 0" and stores the result in memory at address 0x40000000 before exiting the program. The result can then be accessed from that memory location.
14/09/23, 09:39 - Vickssss 🎓: ```;ARM_NULL_STRING
;Program to find length of a string
;ASCII IS 7 BITS
		AREA	RESET, CODE, READONLY
		ENTRY
		
		MOV		R0, #00 ;clearing r0 to use it for counting purposes
		LDR		R1, =TEXT ;TEXT is a label pointing to a string
		 
BACK	LDRB	R2, [R1], #01 ;r1 is byte incremented by 1
		CMP		R2, #'0'            ; 0 indicate end of string
		BEQ		STOP
		ADD		R0, R0, #01
		B		BACK
STOP
		MOV		R3, #0x40000000      ;Result location
		STR		R0, [R3]
halt B halt
TEXT	DCB		"ELECTRONICS 0"      ;12 including space in HEX it's 0C
		END```
14/09/23, 09:40 - Viswaa Ramasubramanian: ```;ARM_NULL_STRING
;Program to find length of a string
; ASCII is 7 bits
		AREA	RESET, CODE, READONLY
		ENTRY
		
		MOV		R0, #00 
		LDR		R1, =TEXT 
		
BACK	LDRB	R2, [R1], #01 
		CMP		R2, #'0'            ; 0 indicate end of string
		BEQ		STOP
		ADD		R0, R0, #01
		B		BACK
STOP
		MOV		R3, #0x40000000      ;Result location 
		STR		R0, [R3]
halt B halt
TEXT	DCB		"ELECTRONICS 0"      ;12 including space in HEX it's 0C
		END```
14/09/23, 09:41 - Harecharan CSE E Amrita CBE: ;ARM_NULL_STRING
;Program to find length of a string
		AREA	RESET, CODE, READONLY
		ENTRY

		MOV		R0, #00
		LDR		R1, =TEXT

		
BACK	LDRB	R2, [R1], #01
		CMP		R2, #'0'            ; 0 indicate end of string
		BEQ		STOP
		ADD		R0, R0, #01
		B		BACK
STOP
		MOV		R3, #0x40000000      ;Result location
		STR		R0, [R3]

halt b halt
TEXT	DCB		"ELECTRONICS 0"      ;12 including space in HEX it's 0C

		END
14/09/23, 09:42 - Viswaa Ramasubramanian: <Media omitted>
14/09/23, 09:43 - Harecharan CSE E Amrita CBE: <Media omitted>
14/09/23, 11:59 - Phoool Gobiiii  🎓: <Media omitted>
14/09/23, 12:06 - Shesadriii 🎓: Bruh
14/09/23, 12:06 - Shesadriii 🎓: I'm coming
15/09/23, 12:47 - Shesadriii 🎓: <Media omitted>
15/09/23, 12:47 - Shesadriii 🎓: Mc boiz
15/09/23, 12:49 - Sooorrrr 🎓: Palak noodles 1
Schezwan rice 1
Chappati 2
Channa 1
Choco pastry 1
Buttermilk 1
15/09/23, 12:49 - Shesadriii 🎓: For ?
15/09/23, 12:49 - Sooorrrr 🎓: For me, aravii and sanju
15/09/23, 12:49 - Shesadriii 🎓: Okay
15/09/23, 12:49 - Araviiii 🎓: Wait for ram
16/09/23, 11:45 - Sooorrrr 🎓: <Media omitted>
16/09/23, 17:37 - Harecharan CSE E Amrita CBE: This message was deleted
16/09/23, 18:22 - Shesadriii 🎓: Reached home 20 mins ago boiz
16/09/23, 18:51 - Harecharan CSE E Amrita CBE: 👌
16/09/23, 21:34 - Harecharan CSE E Amrita CBE: Reached home safely 😃
16/09/23, 21:34 - Phoool Gobiiii  🎓: Boarded the bus, bois ✨
17/09/23, 05:12 - Phoool Gobiiii  🎓: Reached home bois ❤️
17/09/23, 08:18 - Sooorrrr 🎓: Reached home 🏠 boiiisss
17/09/23, 08:28 - Gannu: Reached home boiss
17/09/23, 14:26 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=wPPcmHGyMwE
17/09/23, 14:26 - Harecharan CSE E Amrita CBE: relatable af
17/09/23, 16:02 - Shesadriii 🎓: <Media omitted>
17/09/23, 16:02 - Shesadriii 🎓: 8/4 lol
17/09/23, 16:03 - Shesadriii 🎓: Top order out for just 8 runs
17/09/23, 16:06 - Shesadriii 🎓: 12/5 lol
17/09/23, 16:15 - Shesadriii 🎓: 12/6 😂
17/09/23, 17:10 - Phoool Gobiiii  🎓: Target run rate 1.0 😂
17/09/23, 17:10 - Shesadriii 🎓: 😂😂😂
17/09/23, 17:13 - Shesadriii 🎓: Still better than RCB
17/09/23, 18:26 - Shesadriii 🎓: Women are very easy to understand......................................................................................
17/09/23, 18:26 - Shesadriii 🎓: Women:
17/09/23, 18:26 - Shesadriii 🎓: <Media omitted>
18/09/23, 08:05 - Sooorrrr 🎓: Happy Ganesh Chaturthi boys
18/09/23, 08:06 - Shesadriii 🎓: Happy Ganesha Chaturthi :) everyone
18/09/23, 08:07 - Viswaa Ramasubramanian: Happy Vinayaga Chaturthi boissss
18/09/23, 08:08 - Harecharan CSE E Amrita CBE: <Media omitted>
18/09/23, 08:43 - Araviiii 🎓: Happy vinayaka chaturthi, my friends
18/09/23, 08:45 - Gannu: Happy Vinayaka Chaturthi boiss
18/09/23, 08:46 - Phoool Gobiiii  🎓: Happy Vinayagar Chaturthi bois ❤️
18/09/23, 08:59 - Harecharan CSE E Amrita CBE: This message was deleted
18/09/23, 09:16 - Vickssss 🎓: Happy Vinayaka chaturthi guys
18/09/23, 09:17 - Hari Kesav CSE E Amrita CBE: Happy Vinayaka chaturthi boys
18/09/23, 11:47 - Viswaa Ramasubramanian: <Media omitted>
18/09/23, 12:00 - Gannu: <Media omitted>
18/09/23, 12:21 - Phoool Gobiiii  🎓: 😂
18/09/23, 14:21 - Araviiii 🎓: <Media omitted>
18/09/23, 15:22 - Araviiii 🎓: <Media omitted>
18/09/23, 15:26 - Shesadriii 🎓: paathu da.....even ur age must hit that 100 mark
18/09/23, 16:27 - Harecharan CSE E Amrita CBE: reached home
18/09/23, 16:52 - Viswaa Ramasubramanian: <Media omitted>
18/09/23, 17:20 - Shesadriii 🎓: <Media omitted>
18/09/23, 17:20 - Shesadriii 🎓: I don't know what to do
18/09/23, 17:21 - Harecharan CSE E Amrita CBE: yaar aavi athu
18/09/23, 17:21 - Araviiii 🎓: 150 Rupees pay panitu sava sollu
18/09/23, 17:22 - Shesadriii 🎓: Bro says he'll stay by u every night
18/09/23, 17:22 - Araviiii 🎓: ?
18/09/23, 18:42 - Harecharan CSE E Amrita CBE: Tuesday no holiday na
18/09/23, 18:42 - Harecharan CSE E Amrita CBE: confirm pls
18/09/23, 18:42 - Harecharan CSE E Amrita CBE: to sir
18/09/23, 19:17 - Araviiii 🎓: Still now no news regarding holiday
18/09/23, 19:18 - Araviiii 🎓: So we will have clg tmrw
19/09/23, 08:51 - Vickssss 🎓: @918939677049 @919043141090 marakkama bring surya's Rubik's and ganesh your cube as well
19/09/23, 11:12 - Harecharan CSE E Amrita CBE: <Media omitted>
19/09/23, 11:46 - Sooorrrr 🎓: <Media omitted>
19/09/23, 11:47 - Araviiii 🎓: <Media omitted>
19/09/23, 12:02 - Sooorrrr 🎓: <Media omitted>
19/09/23, 12:12 - Sooorrrr 🎓: ```#include "TM4C123GH6PM.h"

int main(void)
{
	unsigned int switches1;
	unsigned int switches2;
	
	SYSCTL->RCGCGPIO |= 0x29;
	GPIOF -> LOCK |= 0x4C4F434B;   // unlockGPIOCR register
  GPIOF->CR = 0x01;
	GPIOF->PUR  |= 0x11;
  
	GPIOA -> DEN |= 0x20;
  GPIOA->DIR = 0x20;

	GPIOF->DIR |= 0x00;          
	GPIOF->DEN |= 0x11;

	GPIOD -> DEN |= 0x01;
	GPIOD -> DIR |= 0x01;         
	
	while(1)
	{   
		switches1 = GPIOF -> DATA & 0x01;
		switches2 = GPIOF -> DATA & 0x10;
		GPIOA -> DATA = (switches1==0)?0x00:0x20;
		GPIOD->DATA = (switches2==0)?0x00:0x01;
	}
}```
19/09/23, 12:15 - Vickssss 🎓: ```#include "TM4C123GH6PM.h"
int main(void) {
unsigned int switches1;
unsigned int switches2;
SYSCTL-> RCGCGPIO |= 0x29;
GPIOF -> LOCK |= 0x4C4F434B;
GPIOF -> CR = 0x01; GPIOF ->PUR |= 0x11;
GPIOA -> DEN |= 0x20;
GPIOA -> DIR |= 0x20;
GPIOF -> DEN |= 0x11; 
GPIOF-> DIR |= 0x00;
GPIOD -> DEN |= 0x01;
GPIOD -> DIR |= 0x01;
while (1) {
switches1=GPIOF -> DATA & 0x01; 
switches2 = GPIOF -> DATA & 0x10;
	GPIOA -> DATA=(switches1!=0)?0x00:0x20;
	GPIOD->DATA=(switches2!=0)?0x00:0x01;
}
}```
q3
19/09/23, 12:30 - Vickssss 🎓: Q4
#include "TM4C123GH6PM.h"
int main(void) {
unsigned int switches1;
unsigned int switches2;
SYSCTL-> RCGCGPIO |= 0x26;
GPIOF->DEN|= 0x0E;
GPIOF->DIR|=0x0E;
GPIOB -> DEN |= 0x01;
GPIOB -> DIR |= 0x00;
GPIOC->DEN|=0x10;
GPIOC->DIR|=0x00;
while (1) {
switches1=GPIOB -> DATA & 0x01; 
switches2 = GPIOC -> DATA & 0x10;
	GPIOF -> DATA=(switches1==0)?0x00:0x0A;
	GPIOF->DATA=(switches2==0)?0x00:0x0E;
}
}
19/09/23, 12:31 - Harecharan CSE E Amrita CBE: Q4 ``` #include "TM4C123GH6PM.h"

int main(void)
{
	unsigned int switches1;
	unsigned int switches2;
	
	SYSCTL->RCGCGPIO |= 0x26;

	GPIOB->PUR  |= 0x01;
	GPIOC->PUR  |= 0x10;

  
	GPIOB -> DEN |= 0x01;
  GPIOB->DIR = 0x00;

	GPIOC->DIR |= 0x00;          
	GPIOC->DEN |= 0x10;

	GPIOF -> DEN |= 0x0E;
	GPIOF -> DIR |= 0x0E;         
	
	while(1)
	{   
		switches1 = GPIOB -> DATA & 0x01;
		switches2 = GPIOC -> DATA & 0x10;
		GPIOB -> DATA = (switches1==0)?0x00:0x0A;
		GPIOC->DATA = (switches2==0)?0x00:0x0E;
	}
}
```
20/09/23, 11:17 - Araviiii 🎓: Guys if u want to do any course in Great Learning ask me , I will give u my credentials....
22/09/23, 07:49 - Vickssss 🎓: Bois ganesh odaya cube and Surya odaya cube aa kondu vandhirunga
22/09/23, 07:49 - Vickssss 🎓: We can have cube race
22/09/23, 07:49 - Vickssss 🎓: So pls don't forget
22/09/23, 08:45 - Harecharan CSE E Amrita CBE: Litho of photosynthesis mangrove all of these aquatic
23/09/23, 00:15 - Sanjuuu 🎓: Creating an edible shampoo formula that is safe for both hair and consumption would be a complex task that requires expertise in cosmetic formulation and food science. It's important to prioritize safety and ensure that all ingredients used are non-toxic and safe for ingestion. Here's a very simplified and hypothetical example of an edible shampoo formula:

Edible Shampoo Formula (Simplified)

Ingredients:

Coconut Oil: 20%
Aloe Vera Gel: 15%
Honey: 10%
Oatmeal: 10%
Castile Soap (Food-Grade): 5%
Distilled Water: 40%
Instructions:

Mix the Ingredients: In a mixing bowl, combine the coconut oil, aloe vera gel, honey, oatmeal, and food-grade castile soap. Stir them together until they are well mixed.

Add Water: Slowly add distilled water while stirring continuously. Adjust the amount of water to achieve the desired consistency. You may need to add more or less water depending on your preference.

Testing: Test the formula on a small patch of skin to ensure it's gentle and safe for use. If any irritation occurs, discontinue use.

Application: Wet your hair thoroughly and apply the edible shampoo to your scalp and hair, massaging it in gently.

Rinse: Rinse your hair thoroughly with warm water until all the shampoo is washed out.

Please note that this is a highly simplified example, and creating a safe and effective edible shampoo would require extensive research, testing, and the expertise of cosmetic formulators and food scientists. Additionally, this formula does not contain preservatives, which would be necessary for a commercial product to ensure shelf stability and prevent microbial growth.

Before attempting to create an edible shampoo, consult with experts in the field and be aware of potential regulatory and safety considerations. Additionally, remember that ingesting personal care products, even if they are made with edible ingredients, should be done cautiously, and it's essential to avoid swallowing any product during normal use.
23/09/23, 00:15 - Sanjuuu 🎓: Time to patent bois
23/09/23, 12:50 - Shesadriii 🎓: Lol Mansi mam got the rizz from vidhya mam the meeting yesterday
23/09/23, 15:30 - Vickssss 🎓: guys can anyone share the networks quiz link here
23/09/23, 15:32 - Harecharan CSE E Amrita CBE: https://aumscb.amrita.edu/samigo-app/jsf/delivery/beginTakingAssessment.faces
23/09/23, 15:44 - Viswaa Ramasubramanian: <Media omitted>
23/09/23, 15:45 - Araviiii 🎓: I got D
23/09/23, 15:45 - Viswaa Ramasubramanian: ok
23/09/23, 15:45 - Viswaa Ramasubramanian: thanlkss
23/09/23, 15:46 - Viswaa Ramasubramanian: <Media omitted>
23/09/23, 15:46 - Araviiii 🎓: enna thnks nusolra
23/09/23, 15:46 - Araviiii 🎓: enna da*
23/09/23, 15:46 - Araviiii 🎓: C
23/09/23, 15:47 - Viswaa Ramasubramanian: thanlsss
25/09/23, 13:14 - Sooorrrr 🎓: Do we have ml tutorial today?
25/09/23, 13:23 - Gannu: Nope
25/09/23, 13:23 - Sooorrrr 🎓: Ok
25/09/23, 13:26 - Araviiii 🎓: guys don't forget to apply pass
25/09/23, 13:27 - Harecharan CSE E Amrita CBE: When
25/09/23, 14:27 - Vickssss 🎓: ```# Python program to find maximum contiguous subarray
 
# Function to find the maximum contiguous subarray
from sys import maxint
 
 
def maxSubArraySum(a, size):
 
    max_so_far = -maxint - 1
    max_ending_here = 0
 
    for i in range(0, size):
        max_ending_here = max_ending_here + a[i]
        if (max_so_far < max_ending_here):
            max_so_far = max_ending_here
 
        if max_ending_here < 0:
            max_ending_here = 0
    return max_so_far
 
# Driver function to check the above function
 
 
a = [-2, -3, 4, -1, -2, 1, 5, -3]
 
print "Maximum contiguous sum is", maxSubArraySum(a, len(a))
 
```
25/09/23, 14:34 - Vickssss 🎓: ```# A Divide and Conquer based program
# for maximum subarray sum problem
  
# Find the maximum possible sum in
# arr[] auch that arr[m] is part of it
  
  
def maxCrossingSum(arr, l, m, h):
  
    # Include elements on left of mid.
    sm = 0
    left_sum = -10000
  
    for i in range(m, l-1, -1):
        sm = sm + arr[i]
  
        if (sm > left_sum):
            left_sum = sm
  
    # Include elements on right of mid
    sm = 0
    right_sum = -1000
    for i in range(m, h + 1):
        sm = sm + arr[i]
  
        if (sm > right_sum):
            right_sum = sm
  
    # Return sum of elements on left and right of mid
    # returning only left_sum + right_sum will fail for [-2, 1]
    return max(left_sum + right_sum - arr[m], left_sum, right_sum)
  
  
# Returns sum of maximum sum subarray in aa[l..h]
def maxSubArraySum(arr, l, h):
    #Invalid Range: low is greater than high
    if (l > h):
        return -10000
    # Base Case: Only one element
    if (l == h):
        return arr[l]
  
    # Find middle point
    m = (l + h) // 2
  
    # Return maximum of following three possible cases
    # a) Maximum subarray sum in left half
    # b) Maximum subarray sum in right half
    # c) Maximum subarray sum such that the
    #     subarray crosses the midpoint
    return max(maxSubArraySum(arr, l, m-1),
               maxSubArraySum(arr, m+1, h),
               maxCrossingSum(arr, l, m, h))
  
  
# Driver Code
arr = [2, 3, 4, 5, 7]
n = len(arr)
  
max_sum = maxSubArraySum(arr, 0, n-1)
print("Maximum contiguous sum is ", max_sum)```
25/09/23, 15:49 - Araviiii 🎓: Is sir is saying 4th Oct which is Wed is also a holiday?
25/09/23, 15:49 - Araviiii 🎓: If s
25/09/23, 15:49 - Araviiii 🎓: Surya, i think u know wat to do
25/09/23, 15:50 - Sooorrrr 🎓: Thambi
25/09/23, 15:50 - Sooorrrr 🎓: enough da kanna
25/09/23, 15:50 - Sooorrrr 🎓: we are already going home from 26th to 3rd
25/09/23, 15:50 - Sooorrrr 🎓: which is a long long gap
25/09/23, 15:50 - Sooorrrr 🎓: you do one thing
25/09/23, 15:50 - Sooorrrr 🎓: better drop out and stay back in home itselg
25/09/23, 15:51 - Sooorrrr 🎓: itself*
25/09/23, 15:51 - Sooorrrr 🎓: no need to come to college
25/09/23, 16:01 - Araviiii 🎓: And one more
25/09/23, 16:02 - Araviiii 🎓: Coming Thursday is not a holiday
25/09/23, 16:02 - Araviiii 🎓: It is a holiday for Muslims students and professors
25/09/23, 16:02 - Araviiii 🎓: Not conform , will get to know abt this in a day or 2
25/09/23, 17:06 - Harecharan CSE E Amrita CBE: Pass podava venama
25/09/23, 17:08 - Viswaa Ramasubramanian: potachu potachu
25/09/23, 17:09 - Harecharan CSE E Amrita CBE: Thursday leave illana e days leave aagum
25/09/23, 17:09 - Harecharan CSE E Amrita CBE: 3 days
25/09/23, 17:09 - Harecharan CSE E Amrita CBE: So I'll just go friday
25/09/23, 17:10 - Vickssss 🎓: Appah enna idhuku da indha kelvi
25/09/23, 17:10 - Harecharan CSE E Amrita CBE: Np 4me as I'm in covai 🤭
25/09/23, 17:10 - Harecharan CSE E Amrita CBE: Illada wanted to ask what u were doing
25/09/23, 17:10 - Harecharan CSE E Amrita CBE: Vicky I'll come with u in sitra bus best u
25/09/23, 17:11 - Harecharan CSE E Amrita CBE: ✋🏻
25/09/23, 17:11 - Viswaa Ramasubramanian: ippah naliki kelambiriya illaya??
25/09/23, 17:11 - Vickssss 🎓: Theridhu la
25/09/23, 17:11 - Harecharan CSE E Amrita CBE: Illada
25/09/23, 17:11 - Vickssss 🎓: Friday dhan kelambaran
25/09/23, 17:11 - Viswaa Ramasubramanian: nee mattum dhan room la irupa
25/09/23, 17:11 - Viswaa Ramasubramanian: naanga ellarum kelaburom
25/09/23, 17:11 - Harecharan CSE E Amrita CBE: Viswa nee oo nu sollu Naa un kooda kelambi varan
25/09/23, 17:11 - Viswaa Ramasubramanian: oo
25/09/23, 17:12 - Harecharan CSE E Amrita CBE: Paraavala
25/09/23, 17:12 - Harecharan CSE E Amrita CBE: 🖕🏻
25/09/23, 17:12 - Viswaa Ramasubramanian: idhu ooh ooooh
25/09/23, 17:12 - Harecharan CSE E Amrita CBE: I'll go friday room la thanni ya irupen so
25/09/23, 17:12 - Harecharan CSE E Amrita CBE: <Media omitted>
25/09/23, 17:13 - Viswaa Ramasubramanian: See the exam will be both 50% lab and 50% theory so u have to prepare for both

AI
25/09/23, 17:13 - Harecharan CSE E Amrita CBE: Paathen
25/09/23, 17:13 - Vickssss 🎓: 🤣🤣🤣🤣🤣
25/09/23, 17:14 - Harecharan CSE E Amrita CBE: Maghilchi <This message was edited>
25/09/23, 17:14 - Vickssss 🎓: Dei thitti proyajanum illa
25/09/23, 17:14 - Vickssss 🎓: We have next week full ah
25/09/23, 17:14 - Harecharan CSE E Amrita CBE: Aanantham <This message was edited>
25/09/23, 17:14 - Vickssss 🎓: We can catch up
25/09/23, 17:15 - Viswaa Ramasubramanian: edhu catch up ahhh seri illayae
25/09/23, 17:15 - Viswaa Ramasubramanian: vickss mooditu prepare panra poda
25/09/23, 17:15 - Vickssss 🎓: Poda venna
25/09/23, 20:34 - Gannu: null
25/09/23, 20:36 - Viswaa Ramasubramanian: null
25/09/23, 21:28 - Sooorrrr 🎓: <Media omitted>
26/09/23, 21:09 - Viswaa Ramasubramanian: <Media omitted>
27/09/23, 07:16 - Viswaa Ramasubramanian: Reached home boisss 😊
27/09/23, 07:33 - Sooorrrr 🎓: Reached home🏠 boiss
27/09/23, 07:45 - Araviiii 🎓: Reached home 🏡 bois
27/09/23, 07:48 - Gannu: Reached home boisss
27/09/23, 09:20 - Viswaa Ramasubramanian: <Media omitted>
27/09/23, 11:39 - Phoool Gobiiii  🎓: @919840365293 @919566280078 
I’ve got your hall tickets too
27/09/23, 11:39 - Phoool Gobiiii  🎓: Get it from me later 😘
27/09/23, 14:15 - Sooorrrr 🎓: Thanks bro
28/09/23, 04:49 - Sanjuuu 🎓: Reached home
28/09/23, 07:52 - Viswaa Ramasubramanian: @917449292156 https://www.youtube.com/watch?v=iQrXB0DBZsY

nee ketha mari Vikram style music vandhirichu maamae
28/09/23, 11:10 - Araviiii 🎓: guys what should we need to study for DAA eval?
28/09/23, 12:37 - Sanjuuu 🎓: <Media omitted>
28/09/23, 12:37 - Sanjuuu 🎓: <Media omitted>
28/09/23, 12:37 - Sanjuuu 🎓: Congrats bois
28/09/23, 12:37 - Araviiii 🎓: Let's goo 🔥🔥🔥
28/09/23, 12:38 - Harecharan CSE E Amrita CBE: Thank you 😎🥰
28/09/23, 12:39 - Harecharan CSE E Amrita CBE: Congrats Surya team (I only know ur team name apart from mine because it's Blake association and only I understood the reference 😄🤣)
28/09/23, 12:39 - Harecharan CSE E Amrita CBE: Les goooo🥳🥳
30/09/23, 07:44 - Harecharan CSE E Amrita CBE: Reached home yesterday evening 🌆
01/10/23, 12:45 - Araviiii 🎓: www.ssnsnucinvente.com
01/10/23, 12:48 - Harecharan CSE E Amrita CBE: vebcite wery!
01/10/23, 12:48 - Harecharan CSE E Amrita CBE: why u send tis btw
01/10/23, 12:49 - Harecharan CSE E Amrita CBE: we cant participate 😭😭
01/10/23, 12:49 - Sanjuuu 🎓: Oct 6
01/10/23, 12:49 - Sanjuuu 🎓: 🥲
01/10/23, 12:50 - Araviiii 🎓: Share this as much as u can da like seniors or even juniors....
02/10/23, 14:29 - Harecharan CSE E Amrita CBE: <Media omitted>
03/10/23, 10:52 - Vickssss 🎓: <Media omitted>
03/10/23, 10:53 - Vickssss 🎓: Guys got some info like this
03/10/23, 10:53 - Vickssss 🎓: So is tomorrow a holiday or is it working?
03/10/23, 10:53 - Viswaa Ramasubramanian: working day dhan da
03/10/23, 10:54 - Viswaa Ramasubramanian: unaku mattum bus varadhu pola
03/10/23, 12:42 - Harecharan CSE E Amrita CBE: Enakkum varaathu 😢
03/10/23, 12:47 - Viswaa Ramasubramanian: unna madhikadha clg ku nee en machan varanum nee varadha
03/10/23, 12:47 - Viswaa Ramasubramanian: bus mattum dhan varadhu nee un power ah kamichu neeye naliki varadhu machan
03/10/23, 12:47 - Harecharan CSE E Amrita CBE: Enna madikaatah clg a oru naal enna thirumbi paakum ...athuku Naa padikamum, so I coming
03/10/23, 12:48 - Viswaa Ramasubramanian: Vaipilla Raja Vaipilla
03/10/23, 12:48 - Viswaa Ramasubramanian: adhuku nee indha clg vithu dhan poganum
04/10/23, 09:22 - Vickssss 🎓: Thank goodness I didn't come today
04/10/23, 09:22 - Shesadriii 🎓: Inshallah
04/10/23, 15:03 - Harecharan CSE E Amrita CBE: Guys cn ku ethavathu Nala video iruka yt la
05/10/23, 10:47 - Vickssss 🎓: <Media omitted>
05/10/23, 15:48 - Araviiii 🎓: I am set 2 bois
05/10/23, 15:48 - Araviiii 🎓: need help
05/10/23, 16:47 - Araviiii 🎓: Guys still no water in our hostel
05/10/23, 16:47 - Araviiii 🎓: So fill ur bottles and come to hostel
05/10/23, 19:18 - Phoool Gobiiii  🎓: <Media omitted>
05/10/23, 19:47 - Harecharan CSE E Amrita CBE: HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the World Wide Web. It employs several request methods, each serving a specific purpose. Let's explore some of the most commonly used HTTP methods, including GET, POST, and a few others, with a real-life example involving a web-based application for ordering pizza.

**1. GET Method:**
The GET method is used to retrieve data from a server. It is typically used for safe and idempotent operations, meaning it should not have any side effects on the server's data. GET requests are often used to retrieve web pages, images, or other resources from a web server.

**Example:** Imagine you visit an online pizza ordering website and select the "Menu" page. When you click on the "Menu" link, your web browser sends a GET request to the server to fetch the pizza menu. The server responds with the HTML page containing the list of available pizzas.

**2. POST Method:**
The POST method is used to submit data to be processed by the server. It is often employed when you want to create or update a resource on the server. POST requests are not idempotent because submitting the same data multiple times may result in different outcomes.

**Example:** Continuing with our pizza ordering website, once you've selected the pizzas you want to order and provided your delivery address, you click the "Place Order" button. When you do this, your browser sends a POST request to the server with the details of your order, including the pizza types and delivery address. The server processes this request and creates a new order in its database.

**3. PUT Method:**
The PUT method is used to update an existing resource or create a new one if it doesn't exist at a specific URL. It is idempotent, meaning repeated requests will have the same result.

**Example:** Suppose you want to modify your delivery address on the pizza ordering website. You would use a PUT request to send the updated address data to the server, which would then replace the existing address in its database with the new information.

**4. DELETE Method:**
The DELETE method is used to request the removal of a resource from the server. It is also idempotent.

**Example:** If you decide to cancel your pizza order, you could send a DELETE request to the server, specifying the order you want to cancel. The server would then remove the order from its database.

**5. PATCH Method:**
The PATCH method is used to apply partial modifications to a resource on the server. It is often used when you want to update only specific fields of a resource without affecting the entire resource.

**Example:** Let's say you want to change the delivery time for your pizza order, but you don't need to modify the delivery address or pizza choices. You would send a PATCH request to the server with the updated delivery time, and the server would make that specific change while leaving other order details intact.

In summary, HTTP methods are essential for communication between clients (such as web browsers) and servers. They define the type of operation to be performed on a resource, whether it's retrieving data with GET, submitting data with POST, updating with PUT, deleting with DELETE, or making partial changes with PATCH. These methods enable a wide range of interactions in web applications, making them dynamic and interactive.

The HTTP HEAD method is one of the less commonly used HTTP request methods. It is similar to the GET method in that it requests information from the server, but there is a significant difference: the HEAD method requests only the headers of the response, not the actual content. In other words, when you send a HEAD request to a server, it will return the headers of the resource that would be returned if you had sent a GET request, but without the body of the resource. This can be useful in various scenarios:

1. **Resource Metadata:** The HEAD method is often used to retrieve metadata about a resource without transferring the entire content. For example, you can use it to check the last-modified timestamp, content type, content length, or other headers associated with a resource.

2. **Efficiency:** When you are interested in checking if a resource has been modified (e.g., for caching purposes) but do not need the actual content, using a HEAD request can save bandwidth and reduce unnecessary data transfer.

3. **Link Validation:** Web crawlers and validators can use HEAD requests to check the validity of links on a website without downloading the full content of each linked page.

Here's an example of how a HEAD request works:

Suppose you want to check if a specific image file on a web server has been modified since your last visit. You can send a HEAD request for that image's URL. The server will respond with headers like:

- `HTTP/1.1 200 OK` (indicating a successful response).
- `Content-Type: image/jpeg` (indicating the type of content).
- `Content-Length: 54235` (indicating the size of the content).
- `Last-Modified: Tue, 05 Oct 2022 14:30:00 GMT` (indicating the last modification date).

However, the response will not include the actual image data. If the `Last-Modified` date is different from your local copy, it means the image has been updated, and you may want to download the new version with a GET request.

In summary, the HTTP HEAD method is a lightweight way to retrieve metadata about a resource without fetching the entire content. It is especially useful for efficiency, link validation, and checking if a resource has been modified since the last request.
05/10/23, 20:26 - Harecharan CSE E Amrita CBE: <Media omitted>
05/10/23, 21:04 - Gannu: <Media omitted>
06/10/23, 08:36 - Gannu: https://www-net.cs.umass.edu/kurose_ross/interactive/circuit_switching.php
06/10/23, 08:40 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 08:41 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 09:07 - Shesadriii 🎓: <Media omitted>
06/10/23, 09:07 - Viswaa Ramasubramanian: Poori 2pc
Kadala curry 1
06/10/23, 09:09 - Harecharan CSE E Amrita CBE: 3 Vada 6 dosa
06/10/23, 09:09 - Harecharan CSE E Amrita CBE: 1 watermelon
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 20:18 - Harecharan CSE E Amrita CBE: <Media omitted>
06/10/23, 22:20 - Gannu: <Media omitted>
07/10/23, 08:56 - Sooorrrr 🎓: <Media omitted>
07/10/23, 08:56 - Sooorrrr 🎓: <Media omitted>
07/10/23, 08:56 - Sooorrrr 🎓: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:51 - Harecharan CSE E Amrita CBE: <Media omitted>
07/10/23, 18:55 - Viswaa Ramasubramanian: <Media omitted>
07/10/23, 19:21 - Araviiii 🎓: Mess la poori
08/10/23, 10:56 - Araviiii 🎓: <Media omitted>
08/10/23, 10:56 - Araviiii 🎓: <Media omitted>
08/10/23, 10:56 - Araviiii 🎓: <Media omitted>
08/10/23, 10:57 - Viswaa Ramasubramanian: dei idhe dhan da andha session1 ppt layum iruku
08/10/23, 10:57 - Viswaa Ramasubramanian: avaru anupchu ppt dhan inga pirichi potrikanunga
08/10/23, 10:58 - Araviiii 🎓: oic idk
08/10/23, 10:58 - Viswaa Ramasubramanian: illa idhu nethike adhu nala dhan anupla we saw like apdiye same stuff dhan irukum
08/10/23, 10:58 - Araviiii 🎓: oh okie
08/10/23, 12:55 - Araviiii 🎓: <Media omitted>
08/10/23, 12:56 - Shesadriii 🎓: 2 chappti 
1 paneer butter masala <This message was edited>
08/10/23, 12:57 - Araviiii 🎓: Mushroom Chilly is also there da
08/10/23, 12:57 - Araviiii 🎓: In tdy's special category
08/10/23, 13:06 - Phoool Gobiiii  🎓: <Media omitted>
08/10/23, 16:48 - Phoool Gobiiii  🎓: <Media omitted>
08/10/23, 16:48 - Phoool Gobiiii  🎓: <Media omitted>
08/10/23, 17:09 - Vickssss 🎓: ```AREA fibo,code,readonly
	export fib1

fib1
	mov r0,#4
	mov r1,#0
	mov r2,#1
	mov r3,#0
	
loop
	
	add r3,r2,r1
	mov r1,r2
	mov r2,r3
	subs r0,r0,#1
	cmp r0,#0
	bne loop
	beq halt
halt
	b halt
	end```

nth term of Fibonacci 
update the value for r0(n)
08/10/23, 17:11 - Phoool Gobiiii  🎓: what does export fib1 do?
08/10/23, 17:12 - Vickssss 🎓: this can be used as a module and you can import fib1 in your main program
08/10/23, 17:12 - Vickssss 🎓: like java
08/10/23, 17:12 - Phoool Gobiiii  🎓: oh okay
08/10/23, 17:13 - Vickssss 🎓: Class Person in Person.java file and in Main.java we can call Person class here you have to give a statement like

import fib1
08/10/23, 17:13 - Phoool Gobiiii  🎓: yeah.. in keil you can run only one file on a particular project so we can use this
08/10/23, 17:14 - Vickssss 🎓: even program works
08/10/23, 17:16 - Vickssss 🎓: ```	AREA program,code,readonly

fib1
	mov r0,#4
	mov r1,#0
	mov r2,#1
	mov r3,#0
	
loop
	
	add r3,r2,r1
	mov r1,r2
	mov r2,r3
	subs r0,r0,#1
	cmp r0,#0
	bne loop
	beq halt
halt
	b halt
	end```

updated one
08/10/23, 17:42 - Vickssss 🎓: ```	AREA data, data, readonly
a   DCD 0   
b1   DCD 1   
c   DCD 1   


	AREA program, code, readonly
    ENTRY      


    MOV r0, #5  
	LDR r1, =a  
	ldr r1,[r1]
    LDR r2, =b1  
	ldr r2,[r2]
    LDR r3, =c 
	ldr r3,[r3]

loop  
    ADD r3, r3, r1 
    mov r1,r2
	mov r2,r3


    SUBS r0, r0, #1 


    CMP r0, #0
    BNE loop    
    BEQ halt    

halt

    B halt

	END
```

using variables
08/10/23, 18:16 - Vickssss 🎓: ```	AREA program,code,readonly
ENTRY
	ldr r0, =text
	mov r1,#0

loop

	ldrb r2,[r0],#1
	cmp r2,#0
	beq halt
	add r1,r1,#1
	b loop
halt

	ldr r3,=res
	str r1,[r3]

text dcb "Hello world",0
stop
	b stop

	AREA output,data,readwrite
res dcd 0
	end```

program to find the length of a given string
08/10/23, 18:48 - Sooorrrr 🎓: ; Input: r0 (the number to be reversed)
; Output: r1 (the reversed number)

    MOV     r1, #0          ; Initialize the result to 0
    MOV     r2, #10         ; Initialize r2 with 10 (used for division)
    MOV     r3, #0          ; Initialize r3 as a temporary register

reverse_loop:
    MOV     r3, r0          ; Copy the original number to r3
    UMOD    r0, r3, r2      ; r0 = r3 % 10 (remainder is the rightmost digit)
    MUL     r1, r1, r2      ; Multiply the reversed number by 10
    ADD     r1, r1, r0      ; Add the rightmost digit to the reversed number

    MOV     r3, r0          ; Copy the remainder to r3
    UDIV    r0, r3, r2      ; r0 = r3 / 10 (integer division)
    
    CMP     r0, #0          ; Check if r0 (the quotient) is zero
    BNE     reverse_loop    ; If not, continue looping

    ; At this point, r1 contains the reversed number
08/10/23, 18:49 - Gannu: UMOD and UDIV use pannalama?
08/10/23, 18:49 - Sooorrrr 🎓: try it out not sure
08/10/23, 18:50 - Gannu: okayy
08/10/23, 20:14 - Araviiii 🎓: https://www.youtube.com/watch?v=sztQSC_27cQ
08/10/23, 20:29 - Harecharan CSE E Amrita CBE: <Media omitted>
08/10/23, 20:32 - Viswaa Ramasubramanian: <Media omitted>
08/10/23, 20:48 - Harecharan CSE E Amrita CBE: <Media omitted>
08/10/23, 23:42 - Sooorrrr 🎓: <Media omitted>
09/10/23, 00:07 - Harecharan CSE E Amrita CBE: SUSAAIF
09/10/23, 00:08 - Harecharan CSE E Amrita CBE: <Media omitted>
09/10/23, 09:00 - Araviiii 🎓: <Media omitted>
09/10/23, 18:31 - Harecharan CSE E Amrita CBE: https://www.youtube.com/watch?v=ZKh6z0X6KRw
10/10/23, 13:15 - Viswaa Ramasubramanian: <Media omitted>
10/10/23, 13:25 - Viswaa Ramasubramanian: <Media omitted>
10/10/23, 13:25 - Viswaa Ramasubramanian: <Media omitted>
10/10/23, 13:28 - Shesadriii 🎓: Guys, 1:30 it seems
12/10/23, 10:20 - Araviiii 🎓: <Media omitted>
12/10/23, 10:37 - Sanjuuu 🎓: This message was deleted
12/10/23, 19:15 - Viswaa Ramasubramanian: <Media omitted>
13/10/23, 11:03 - Sanjuuu 🎓: Ganesh send this
13/10/23, 11:04 - Gannu: <Media omitted>
13/10/23, 19:03 - Harecharan CSE E Amrita CBE: <Media omitted>
13/10/23, 19:07 - Shesadriii 🎓: That's what your parents said
13/10/23, 19:08 - Harecharan CSE E Amrita CBE: Notice the secret message yet
14/10/23, 06:04 - Viswaa Ramasubramanian: Boisss naaa ooruku poitu varennm
14/10/23, 06:48 - Araviiii 🎓: Safe journey da
14/10/23, 07:02 - Viswaa Ramasubramanian: <Media omitted>
14/10/23, 07:18 - Viswaa Ramasubramanian: Boarded Palani bus
14/10/23, 09:51 - Viswaa Ramasubramanian: Raeched Palani boisss
14/10/23, 11:10 - Sooorrrr 🎓: First Look of Vande Bharat Trains Sleeper Version.
14/10/23, 11:10 - Sooorrrr 🎓: <Media omitted>
14/10/23, 11:10 - Sooorrrr 🎓: <Media omitted>
14/10/23, 11:10 - Sooorrrr 🎓: <Media omitted>
14/10/23, 16:51 - Shesadriii 🎓: witnessing a pak collapse
14/10/23, 16:52 - Shesadriii 🎓: 154-2 to 171-6
14/10/23, 16:52 - Shesadriii 🎓: now 7
14/10/23, 17:10 - Viswaa Ramasubramanian: Now 8
14/10/23, 17:11 - Viswaa Ramasubramanian: Pak ah eduthoma vethalaila la pothuma nu irukanum adha vituthu babar ah vaikran rizwan ah thaikran nu scene ah potha senijithu poikittehhhh irukanum
14/10/23, 17:11 - Shesadriii 🎓: 9
14/10/23, 17:11 - Shesadriii 🎓: Podu
14/10/23, 17:12 - Shesadriii 🎓: 25 runs la 7 wickets lost
14/10/23, 17:12 - Viswaa Ramasubramanian: Yess broooo
14/10/23, 17:12 - Viswaa Ramasubramanian: Adhiridha othaaa adhiranum maamae
14/10/23, 17:12 - Shesadriii 🎓: Stadium bgm : " India waale ....." 😂
14/10/23, 22:44 - Viswaa Ramasubramanian: <Media omitted>
15/10/23, 10:25 - Araviiii 🎓: <Media omitted>
15/10/23, 11:55 - Viswaa Ramasubramanian: 😍😍😍😍
15/10/23, 11:55 - Viswaa Ramasubramanian: 🔥
15/10/23, 12:30 - Viswaa Ramasubramanian: <Media omitted>
15/10/23, 12:30 - Viswaa Ramasubramanian: <Media omitted>
15/10/23, 12:48 - Viswaa Ramasubramanian: Boiss boarded bus to kovaiii
15/10/23, 12:49 - Viswaa Ramasubramanian: <Media omitted>
15/10/23, 13:45 - Viswaa Ramasubramanian: @919566280078 @916383425519 @917449292156 @919941614061 @919840365293 
Yarachu oruthanga msg pathadhum call pannavum
15/10/23, 16:22 - Phoool Gobiiii  🎓: <Media omitted>
15/10/23, 16:30 - Viswaa Ramasubramanian: <Media omitted>
15/10/23, 16:30 - Viswaa Ramasubramanian: Late ayiricuuuu
15/10/23, 16:32 - Viswaa Ramasubramanian: But idhuvum nall dhan iruku
15/10/23, 16:32 - Viswaa Ramasubramanian: ✌🏻
15/10/23, 16:32 - Viswaa Ramasubramanian: By the way ensooyyyy boisss 😍❤️
15/10/23, 16:45 - Viswaa Ramasubramanian: But serious ah daa semmaya irundhichu 
Semma pasila sooda Karama window seat la okanditu pathu kethikitu karam thanga mudiyama kanla thanni vandhu sabhaaa Vera level 😅😅
15/10/23, 17:29 - Viswaa Ramasubramanian: Reached room boisss ✌🏻
15/10/23, 19:05 - Harecharan CSE E Amrita CBE: Reached home da guys
15/10/23, 19:05 - Shesadriii 🎓: Hv fun bru
15/10/23, 19:05 - Shesadriii 🎓: We have reached AB 1 ( almost )
15/10/23, 19:06 - Viswaa Ramasubramanian: Vaanga vaanga epdi irukinga
15/10/23, 19:06 - Viswaa Ramasubramanian: This is how ur relatives welcome u when ur visiting their home 🤭
15/10/23, 19:07 - Viswaa Ramasubramanian: Their mindvoice : edhuku vandhingaaa
15/10/23, 19:07 - Viswaa Ramasubramanian: Seekaram vaada shreyas mark Antony Naa pakanum
15/10/23, 20:51 - Sanjuuu 🎓: https://www.threads.net/@aznblng/post/CyY4QUmplmP/?igshid=NTc4MTIwNjQ2YQ==
15/10/23, 20:51 - Sanjuuu 🎓: They should make these movies
15/10/23, 20:51 - Viswaa Ramasubramanian: You deleted this message
15/10/23, 20:52 - Viswaa Ramasubramanian: You deleted this message
15/10/23, 20:52 - Viswaa Ramasubramanian: You deleted this message
16/10/23, 07:40 - Phoool Gobiiii  🎓: <Media omitted>
16/10/23, 07:40 - Phoool Gobiiii  🎓: <Media omitted>
16/10/23, 07:40 - Phoool Gobiiii  🎓: <Media omitted>
16/10/23, 07:40 - Phoool Gobiiii  🎓: <Media omitted>
16/10/23, 08:05 - Viswaa Ramasubramanian: All the best boisss for Accenture ✌🏻🔥
16/10/23, 08:07 - Shesadriii 🎓: Ye boiz.....ATB !!
16/10/23, 08:15 - Harecharan CSE E Amrita CBE: All the best daa
16/10/23, 09:15 - Viswaa Ramasubramanian: Guys pls make a note embedded class is shifted to the slot after break
16/10/23, 09:15 - Viswaa Ramasubramanian: @916383425519  enga da iruka?
16/10/23, 09:15 - Viswaa Ramasubramanian: room ku varlaya?
16/10/23, 09:15 - Harecharan CSE E Amrita CBE: I'm in vasista da
16/10/23, 09:15 - Viswaa Ramasubramanian: enda?
16/10/23, 09:17 - Harecharan CSE E Amrita CBE: I'll come after some time meeting some relatives
16/10/23, 09:18 - Viswaa Ramasubramanian: serida
16/10/23, 13:37 - Vickssss 🎓: Guys I need anyone's lap
16/10/23, 13:37 - Vickssss 🎓: Pls it's urgent
16/10/23, 13:39 - Vickssss 🎓: Pls
16/10/23, 13:39 - Vickssss 🎓: Pls
16/10/23, 13:39 - Gannu: F sec ?
16/10/23, 13:39 - Gannu: Anyone else
16/10/23, 13:40 - Gannu: Try asking anyone in CIR ryt now
16/10/23, 13:43 - Vickssss 🎓: I'm in ab3
16/10/23, 13:43 - Vickssss 🎓: Anga evanume illa
16/10/23, 13:49 - Gannu: Kedachucha?
16/10/23, 13:54 - Vickssss 🎓: Nope
16/10/23, 13:55 - Vickssss 🎓: Accenture Govinda .. goovinda
16/10/23, 13:55 - Gannu: Has the exam started ???
16/10/23, 13:55 - Gannu: Come to our class
16/10/23, 13:55 - Vickssss 🎓: Yes and finalogin us. Y,2
16/10/23, 13:55 - Gannu: .
16/10/23, 13:55 - Vickssss 🎓: And I have to go to CIR BLOCK
16/10/23, 13:56 - Gannu: Try pannu
16/10/23, 15:05 - Viswaa Ramasubramanian: <Media omitted>
16/10/23, 15:05 - Viswaa Ramasubramanian: Missing ❗❗❗
16/10/23, 15:34 - Harecharan CSE E Amrita CBE: <Media omitted>
16/10/23, 21:34 - Phoool Gobiiii  🎓: https://youtu.be/20vSgED2OLU?si=b3Ed0fHYtqdoi_Vb
17/10/23, 09:31 - Harecharan CSE E Amrita CBE: <Media omitted>
17/10/23, 11:39 - Vickssss 🎓: ```#include "TM4C123GH6PM.h"

void delay(void) {
  int j;  
	for (j = 0; j < 2000; j++) {
        int k = 0;
        k = k + 1;
    }
}

int main(void) {
    SYSCTL->RCGCGPIO |= 0x02;
    GPIOB->DEN |= 0x7F;
    GPIOB->DIR |= 0x7F;
    unsigned char hexArray[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6B, 0x7D, 0x07, 0x7F, 0x6F}; // Corrected '6g' to '6B'

    while (1) {
      int i;  
			for (i = 0; i < 10; i++) {
            GPIOB->DATA = hexArray[i];
            delay();
        }
    }
}
```
17/10/23, 11:55 - Sooorrrr 🎓: <Media omitted>
17/10/23, 12:02 - Sooorrrr 🎓: This message was deleted
17/10/23, 12:03 - Sooorrrr 🎓: ```#include "TM4C123GH6PM.h"

void delay (unsigned long time){
	while (Time>0){
		Time --;
	}
}

int main (void){
	SYSCTL -> RCGCGPIO |= 0x02;
	GPIOB -> DIR |= 0x7E;
	GPIOB -> DEN |= 0x7E:
	unsigned char arr[10] = {0x3F, 0×06, 0x5B, 0х4F, 0х66, 0x6D, 0x7D, 0x07, 0×7D, 0х7F,0x6F};
	while (1){
		unsigned int 1 = 0:
		while (i!=10) {
			GPIOB -> DATA = arr[i];
			i = i+1;
			delay(1000000);
		}
	}
}```
17/10/23, 20:17 - Sanjuuu 🎓: <Media omitted>
18/10/23, 08:26 - Vickssss 🎓: Leo LCU
18/10/23, 08:27 - Vickssss 🎓: Udayanidhi Stalin tweet
18/10/23, 08:32 - Vickssss 🎓: <Media omitted>
18/10/23, 08:34 - Viswaa Ramasubramanian: Naliki teriya podhu broo
18/10/23, 08:58 - Araviiii 🎓: bois dont forgot apply the pass
18/10/23, 09:00 - Viswaa Ramasubramanian: leo boiss timings 2:30pm
18/10/23, 09:01 - Viswaa Ramasubramanian: 20 oct 2:30 pm to 25 oct 7:30 am
19/10/23, 12:31 - Phoool Gobiiii  🎓: <Media omitted>
19/10/23, 12:35 - Viswaa Ramasubramanian: 3parotta
1 masala without egg
20/10/23, 10:34 - Gannu: All the best for ur interview boys @919841229753 and @918248897225 
Nalla pannunga with confidence ✨
20/10/23, 10:49 - Sanjuuu 🎓: 🫂
20/10/23, 10:51 - Araviiii 🎓: ATB bois
20/10/23, 10:51 - Viswaa Ramasubramanian: Terika vidungaaa boisss
20/10/23, 10:51 - Viswaa Ramasubramanian: <Media omitted>
20/10/23, 10:53 - Vickssss 🎓: thank you guys
20/10/23, 15:21 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 16:22 - Sanjuuu 🎓: 👀
20/10/23, 18:39 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 18:39 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 18:40 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 18:40 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 18:40 - Phoool Gobiiii  🎓: <Media omitted>
20/10/23, 21:02 - Gannu: <Media omitted>
20/10/23, 22:29 - Phoool Gobiiii  🎓: Boarded the bus bois
Happy holidays 😘✨
20/10/23, 22:29 - Harecharan CSE E Amrita CBE: 😊 happy holidays
20/10/23, 22:29 - Shesadriii 🎓: Happy holidays dudesss
20/10/23, 22:33 - Araviiii 🎓: Happy holiday boisss
20/10/23, 23:48 - Gannu: Happy holiday boisss
20/10/23, 23:50 - Viswaa Ramasubramanian: Happy holiday nanbaaasss
20/10/23, 23:50 - Viswaa Ramasubramanian: Boarded train ✌🏻
20/10/23, 23:51 - Viswaa Ramasubramanian: <Media omitted>
21/10/23, 04:23 - Sanjuuu 🎓: Reached home bois
21/10/23, 05:41 - Viswaa Ramasubramanian: <Media omitted>
21/10/23, 05:41 - Viswaa Ramasubramanian: Lyrics lam kandraviya iruku
21/10/23, 05:42 - Viswaa Ramasubramanian: Full ah sogathula irukara mari iruku
21/10/23, 05:54 - Phoool Gobiiii  🎓: Reached home bois
21/10/23, 06:39 - Shesadriii 🎓: Reached home boiz
21/10/23, 06:51 - Viswaa Ramasubramanian: Reached Home boisss
21/10/23, 06:54 - Vickssss 🎓: Happy holidays boys,☁️☁️☁️☁️
21/10/23, 06:59 - Viswaa Ramasubramanian: Enna Anga Malaya enna
21/10/23, 07:30 - Harecharan CSE E Amrita CBE: Nope
21/10/23, 07:31 - Shesadriii 🎓: Inge rain
21/10/23, 07:53 - Araviiii 🎓: Reached home bois
21/10/23, 08:26 - Vickssss 🎓: Nope <This message was edited>
21/10/23, 08:26 - Vickssss 🎓: Aana neenga pora oorula mala varum

And chill ah irukkum🥶
21/10/23, 08:31 - Viswaa Ramasubramanian: <Media omitted>
21/10/23, 08:31 - Viswaa Ramasubramanian: <Media omitted>
21/10/23, 09:17 - Sooorrrr 🎓: Reached🏠 bois
21/10/23, 10:07 - Gannu: Reached home half an hour ago boiss
22/10/23, 13:34 - Shesadriii 🎓: Surya Kumar in !
22/10/23, 22:09 - Sanjuuu 🎓: fuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuck
22/10/23, 22:09 - Sanjuuu 🎓: nNoooooooooooooooooooooooooooooooooooooooooooooooooooooo
22/10/23, 22:09 - Shesadriii 🎓: That's okay😂
22/10/23, 22:09 - Viswaa Ramasubramanian: enna ok poda deii
22/10/23, 22:09 - Viswaa Ramasubramanian: 95 lam podaaaaaaa
22/10/23, 22:10 - Viswaa Ramasubramanian: but 4 adicha
22/10/23, 22:10 - Viswaa Ramasubramanian: sela peru wide potu 99 la mudika vachirpanunga
22/10/23, 22:11 - Shesadriii 🎓: 👍🏻👍🏻👍🏻👍🏻🥳🥳🥳🥳🥳🥳
22/10/23, 22:24 - Viswaa Ramasubramanian: You deleted this message
23/10/23, 09:41 - Shesadriii 🎓: Happy maha Navami boiz
23/10/23, 10:26 - Sanjuuu 🎓: Shd go wish navami mam
23/10/23, 10:26 - Viswaa Ramasubramanian: 😅😅🫣
23/10/23, 10:51 - Vickssss 🎓: <Media omitted>
23/10/23, 10:55 - Harecharan CSE E Amrita CBE: Happy ayudha Pooja da boys
25/10/23, 09:18 - Harecharan CSE E Amrita CBE: Guys class la nadhathuratha enaku Inga update panunga guys
25/10/23, 09:18 - Vickssss 🎓: enga da irukka
25/10/23, 09:19 - Vickssss 🎓: bus la varla
25/10/23, 09:19 - Harecharan CSE E Amrita CBE: <Media omitted>
25/10/23, 09:19 - Harecharan CSE E Amrita CBE: Inga oorla
25/10/23, 09:19 - Vickssss 🎓: enjoy....
25/10/23, 09:19 - Harecharan CSE E Amrita CBE: Nanri
25/10/23, 09:19 - Harecharan CSE E Amrita CBE: Class la what's the haps da guys
25/10/23, 09:40 - Sanjuuu 🎓: <Media omitted>
25/10/23, 10:40 - Harecharan CSE E Amrita CBE: Gotha damnnnm
25/10/23, 10:40 - Harecharan CSE E Amrita CBE: Dei 1300 fps aaa🥶😱😱😱
25/10/23, 23:12 - Viswaa Ramasubramanian: <Media omitted>
25/10/23, 23:13 - Viswaa Ramasubramanian: <Media omitted>
25/10/23, 23:18 - Viswaa Ramasubramanian: <Media omitted>
25/10/23, 23:19 - Viswaa Ramasubramanian: <Media omitted>
26/10/23, 11:43 - Harecharan CSE E Amrita CBE: This message was deleted
26/10/23, 11:43 - Harecharan CSE E Amrita CBE: This message was deleted
26/10/23, 11:44 - Harecharan CSE E Amrita CBE: This message was deleted
26/10/23, 11:44 - Harecharan CSE E Amrita CBE: This message was deleted
